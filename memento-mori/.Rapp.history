rmarkdown::pandoc_version()
library(wordbankr)
korean <- get_administrative_info("Korean", "CDI-WS")
rmarkdown::pandoc_versi
?wordbankr
?wordbank
??wordbankr
korean <- get_administration_data("Korean", "CDI-WS")
_data("Korean", "CDI-WS")
head(korean)
korean <- get_administration_data("Korean", "WS")
head(korean)
korean_item <- get_item_data("Korean", "WS")
head(korean_item)
nrow(korean_item)
korea_item[679]
korean_item[679]
korean_item[,679]
korean_item[679,]
korean_item[679,9]
korean_item[678,9]
korean_item[678,2]
korean_item[679,10]
korean_item[679,11]
korean_item[679,3]
korean_item[679,4]
korean_item[679,5]
korean_item[679,6]
korean_item[678,6]
korean_item[673,6]
korean_item[600,6]
korean_item[601,6]
korean_item[604,6]
korean_item[609,6]
korean_item[670,6]
korean_item[665,6]
korean_item[660,6]
korean_item[655,6]
korean_item[650,6]
korean_item[640,6]
korean_item[645,6]
korean_item[644,6]
korean_item[643,6]
korean_item[642,6]
korean_item[641,6]
korean_item[641,5]
korean_item[641,4]
korean_item[641,5]
korean_item[642,5]
korean_item[641,5]
korean_item[1,5]
unique(korean_item$category)
nrow(korean)
library(tidyverse)
korean %>% group_by(age) %>% count()
italian <- get_administration_data("Italian", "WS")
italian %>% group_by(age) %>% count()
version()
library(qrcode)
qrcode::qrcode(https://padlet.com/junhoc1/biopsy1, "padletl1.svg")
qrcode::qrcode("https://padlet.com/junhoc1/biopsy1", "padletl1.svg")
qrcode::generate_qrcode("https://padlet.com/junhoc1/biopsy1", "padletl1.svg")
help(qrcode)
?qrcode
??qrcode
qrcode::generate_svg(https://padlet.com/junhoc1/biopsy1, "padletl1.svg")
qrcode::generate_svg(https://padlet.com/junhoc1/biopsy1, filename = "padletl1.svg")
qrcode::generate_svg("https://padlet.com/junhoc1/biopsy1", filename = "padletl1.svg")
generate_svg("https://padlet.com/junhoc1/biopsy1", filename = "padletl1.svg
")"
generate_svg("https://padlet.com/junhoc1/biopsy1", filename = "padletl1.svg")
library(qrcode)
generate_svg(qr_code(https://forms.office.com/r/42T8n6gymz), "group.svg")
generate_svg(qr_code("https://forms.office.com/r/42T8n6gymz"), "group.svg")
getwd()
library(qrcode)
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/BbjnqxrXXoX9493Q-OPZ4XKLpje3Dvqg1"), "Lecture2Padlet.svg")
library(qrcode)
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/eo1R47MYx9ZmqZDL-OPZ4XKLpje3Dvqg1"), "qrcode.png")
library(qrcode)
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/ldoNv8bBWy7D2JXV-OPZ4XKLpje3Dvqg1", "L7.svg"))
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/ldoNv8bBWy7D2JXV-OPZ4XKLpje3Dvqg1"), "L7.svg")
library(qrcode)
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/mWng4l1OQznN2zdJ-OPZ4XKLpje3Dvqg1"), "Lecture8.svg")
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
#
# Check column names to ensure proper referencing#
print("Column names in the dataset:")#
print(colnames(df))#
#
# Define the grading criteria columns by position (safer approach)#
# Positions 8-14 are the grading criteria columns#
criteria_positions <- 8:14#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
df <- df %>% rename("Introduction" = colnames(df[8]),#
                    "Background Knowledge" = colnames(df[9]),#
                    "Application & Comparison" = colnames(df[10]),#
                    "Critical Analysis & Stance" = colnames(df[11]),#
                    "Conclusion & Synthesis" = colnames(df[12]),#
                    "Structure & Delivery" = colnames(df[13]),#
                    "Comprehension & Communication" = colnames(df[14]))#
#
# Define weightages (same order as criteria)#
weightages <- c(0.10, 0.20, 0.25, 0.25, 0.10, 0.05, 0.05)#
#
# Create plots for each criterion#
plots <- list()#
#
for(i in 1:length(criteria_positions)) {#
  criterion_name <- criteria_names[i]#
  col_pos <- criteria_positions[i]#
  # Create data for this criterion#
  criterion_data <- df %>%#
    select(Name, !!sym(colnames(df)[col_pos])) %>%#
    rename(Score = !!sym(colnames(df)[col_pos]))#
  # Calculate statistics by evaluator#
  stats <- criterion_data %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(Score),#
      sd_score = sd(Score),#
      n = n(),#
      .groups = "drop"#
    )#
  # Create the plot#
  p <- ggplot(criterion_data, aes(x = Score, fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", size = 1) +#
    scale_x_continuous(limits = c(0, 5.5), breaks = seq(0, 5.5, 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(title = paste("Distribution of", criterion_name),#
         subtitle = paste("Jun Ho Chai: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
                          "± σ =", round(stats$sd_score[stats$Name == "Jun Ho Chai"], 2),#
                          "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2),#
                          "± σ =", round(stats$sd_score[stats$Name == "Arjun"], 2)),#
         x = "Score", y = "Frequency") +#
    theme_minimal() +#
    theme(legend.position = "bottom", legend.title = element_blank())#
  plots[[i]] <- p#
}#
#
# Create a combined plot grid#
combined_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the grid plot#
ggsave("criteria_distributions.png", combined_plot, width = 15, height = 12, dpi = 300)#
########################
#
# Create overall score plot by evaluator#
# Define the weights for each criterion#
weights <- c(#
  0.10, # Introduction#
  0.20, # Background Knowledge#
  0.25, # Application & Comparison#
  0.25, # Critical Analysis & Stance#
  0.10, # Conclusion & Synthesis#
  0.05, # Structure & Delivery#
  0.05  # Comprehension & Communication#
)#
#
colnames(df[8:14])#
#
# Calculate the overall score#
df$Overall_Score <- rowSums(mapply(`*`, df[8:14], weights))#
#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score),#
    sd_score = sd(Overall_Score),#
    n = n(),#
    .groups = "drop"#
  )#
#
overall_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 10, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", size = 1) +#
  scale_x_continuous(limits = c(2, 5.5), breaks = seq(2, 5.5, 0.5)) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(title = "Distribution of Overall Scores by Evaluator",#
       subtitle = paste("Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 3),#
                        "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 3),#
                        "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 3),#
                        "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 3)),#
       x = "Overall Score", y = "Frequency") +#
  theme_minimal() +#
  theme(legend.position = "bottom", legend.title = element_blank())#
#
print(overall_plot)#
ggsave("overall_scores_by_evaluator.png", overall_plot, width = 10, height = 6, dpi = 300)#
#
# Create group-wise overall score distribution#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(Overall_Score = mean(Overall_Score), .groups = "drop")#
#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7, color = "black") +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", size = 1) +#
  labs(title = "Distribution of Overall Scores by Group",#
       subtitle = paste("Mean =", round(group_stats$mean, 3), #
                        "| SD =", round(group_stats$sd, 3),#
                        "| Range =", round(group_stats$min, 3), "-", round(group_stats$max, 3),#
                        "| n =", group_stats$n, "groups"),#
       x = "Overall Score", y = "Frequency") +#
  theme_minimal()#
#
print(group_plot)#
ggsave("group_overall_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# Print comprehensive summary statistics#
cat("\n=== COMPREHENSIVE SUMMARY STATISTICS ===\n")#
#
cat("\n1. INDIVIDUAL CRITERION STATISTICS BY EVALUATOR:\n")#
for(i in 1:length(criteria_positions)) {#
  criterion_name <- criteria_names[i]#
  col_pos <- criteria_positions[i]#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean = round(mean(!!sym(colnames(df)[col_pos])), 3),#
      sd = round(sd(!!sym(colnames(df)[col_pos])), 3),#
      min = round(min(!!sym(colnames(df)[col_pos])), 3),#
      max = round(max(!!sym(colnames(df)[col_pos])), 3),#
      n = n(),#
      .groups = "drop"#
    )#
  cat("\n", criterion_name, " (Weight:", weightages[i], "):\n")#
  print(stats)#
}#
#
# Save summary statistics to CSV#
write.csv(overall_stats, "evaluator_summary_stats.csv", row.names = FALSE)#
write.csv(group_scores, "group_scores_ranked.csv", row.names = FALSE)#
#
cat("\n=== FILES CREATED ===\n")#
cat("1. criteria_distributions.png - Distribution plots for all criteria\n")#
cat("2. overall_scores_by_evaluator.png - Overall scores by evaluator\n")#
cat("3. group_overall_scores.png - Group overall score distribution\n")#
cat("4. evaluator_summary_stats.csv - Summary statistics by evaluator\n")#
cat("5. group_scores_ranked.csv - Ranked group scores\n")
getwd()
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check column names to ensure proper referencing#
print("Column names in the dataset:")#
print(colnames(df))#
#
# Define the grading criteria columns by position (safer approach)#
# Positions 8-14 are the grading criteria columns#
criteria_positions <- 8:14#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
df <- df %>% rename("Introduction" = colnames(df[8]),#
                    "Background Knowledge" = colnames(df[9]),#
                    "Application & Comparison" = colnames(df[10]),#
                    "Critical Analysis & Stance" = colnames(df[11]),#
                    "Conclusion & Synthesis" = colnames(df[12]),#
                    "Structure & Delivery" = colnames(df[13]),#
                    "Comprehension & Communication" = colnames(df[14]))#
#
# Define weightages (same order as criteria)#
weightages <- c(0.10, 0.20, 0.25, 0.25, 0.10, 0.05, 0.05)#
#
# Create plots for each criterion#
plots <- list()#
#
for(i in 1:length(criteria_positions)) {#
  criterion_name <- criteria_names[i]#
  col_pos <- criteria_positions[i]#
  # Create data for this criterion#
  criterion_data <- df %>%#
    select(Name, !!sym(colnames(df)[col_pos])) %>%#
    rename(Score = !!sym(colnames(df)[col_pos]))#
  # Calculate statistics by evaluator#
  stats <- criterion_data %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(Score),#
      sd_score = sd(Score),#
      n = n(),#
      .groups = "drop"#
    )#
  # Create the plot#
  p <- ggplot(criterion_data, aes(x = Score, fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", size = 1) +#
    scale_x_continuous(limits = c(0, 5.5), breaks = seq(0, 5.5, 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(title = paste("Distribution of", criterion_name),#
         subtitle = paste("Jun Ho Chai: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
                          "± σ =", round(stats$sd_score[stats$Name == "Jun Ho Chai"], 2),#
                          "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2),#
                          "± σ =", round(stats$sd_score[stats$Name == "Arjun"], 2)),#
         x = "Score", y = "Frequency") +#
    theme_minimal() +#
    theme(legend.position = "bottom", legend.title = element_blank())#
  plots[[i]] <- p#
}#
#
# Create a combined plot grid#
combined_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the grid plot#
ggsave("criteria_distributions.png", combined_plot, width = 15, height = 12, dpi = 300)#
########################
#
# Create overall score plot by evaluator#
# Define the weights for each criterion#
weights <- c(#
  0.10, # Introduction#
  0.20, # Background Knowledge#
  0.25, # Application & Comparison#
  0.25, # Critical Analysis & Stance#
  0.10, # Conclusion & Synthesis#
  0.05, # Structure & Delivery#
  0.05  # Comprehension & Communication#
)#
#
colnames(df[8:14])#
#
# Calculate the overall score#
df$Overall_Score <- rowSums(mapply(`*`, df[8:14], weights))#
#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score),#
    sd_score = sd(Overall_Score),#
    n = n(),#
    .groups = "drop"#
  )#
#
overall_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 10, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", size = 1) +#
  scale_x_continuous(limits = c(2, 5.5), breaks = seq(2, 5.5, 0.5)) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(title = "Distribution of Overall Scores by Evaluator",#
       subtitle = paste("Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 3),#
                        "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 3),#
                        "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 3),#
                        "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 3)),#
       x = "Overall Score", y = "Frequency") +#
  theme_minimal() +#
  theme(legend.position = "bottom", legend.title = element_blank())#
#
print(overall_plot)#
ggsave("overall_scores_by_evaluator.png", overall_plot, width = 10, height = 6, dpi = 300)#
#
# Create group-wise overall score distribution#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(Overall_Score = mean(Overall_Score), .groups = "drop")#
#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7, color = "black") +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", size = 1) +#
  labs(title = "Distribution of Overall Scores by Group",#
       subtitle = paste("Mean =", round(group_stats$mean, 3), #
                        "| SD =", round(group_stats$sd, 3),#
                        "| Range =", round(group_stats$min, 3), "-", round(group_stats$max, 3),#
                        "| n =", group_stats$n, "groups"),#
       x = "Overall Score", y = "Frequency") +#
  theme_minimal()#
#
print(group_plot)#
ggsave("group_overall_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# Print comprehensive summary statistics#
cat("\n=== COMPREHENSIVE SUMMARY STATISTICS ===\n")#
#
cat("\n1. INDIVIDUAL CRITERION STATISTICS BY EVALUATOR:\n")#
for(i in 1:length(criteria_positions)) {#
  criterion_name <- criteria_names[i]#
  col_pos <- criteria_positions[i]#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean = round(mean(!!sym(colnames(df)[col_pos])), 3),#
      sd = round(sd(!!sym(colnames(df)[col_pos])), 3),#
      min = round(min(!!sym(colnames(df)[col_pos])), 3),#
      max = round(max(!!sym(colnames(df)[col_pos])), 3),#
      n = n(),#
      .groups = "drop"#
    )#
  cat("\n", criterion_name, " (Weight:", weightages[i], "):\n")#
  print(stats)#
}#
#
# Save summary statistics to CSV#
write.csv(overall_stats, "evaluator_summary_stats.csv", row.names = FALSE)#
write.csv(group_scores, "group_scores_ranked.csv", row.names = FALSE)#
#
cat("\n=== FILES CREATED ===\n")#
cat("1. criteria_distributions.png - Distribution plots for all criteria\n")#
cat("2. overall_scores_by_evaluator.png - Overall scores by evaluator\n")#
cat("3. group_overall_scores.png - Group overall score distribution\n")#
cat("4. evaluator_summary_stats.csv - Summary statistics by evaluator\n")#
cat("5. group_scores_ranked.csv - Ranked group scores\n")
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12)#
  )#
#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11)#
  )#
#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
  data_range <- range(df[[criterion_name]], na.rm = TRUE)#
  x_min <- max(0, floor(data_range[1]) - 0.5)#
  x_max <- ceiling(data_range[2]) + 0.5#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12)#
  )#
#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11)#
  )#
#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2])#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12)#
  )#
#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(breaks = seq(10, 18, 1)) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11)#
  )#
#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_classic#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_classic#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(binwidth = 1, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5)#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 6, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "identity") +#
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "stack") + #
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "bottom", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
#
print(evaluator_plot)#
ggsave("overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("1-overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "stack") + #
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Frequency"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "right", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
#
print(evaluator_plot)#
ggsave("2-overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("1-overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "stack") + #
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "right", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
#
print(evaluator_plot)#
ggsave("2-overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "identity") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Frequency"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
# Load required libraries#
library(ggplot2)#
library(dplyr)#
library(tidyr)#
library(gridExtra)#
#
# Read the data#
#df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/combined-Group Presentation Score Sheet.csv")#
#
df <- read.csv("~/My Drive/PhD/Current Project/Portfolio/[Sunway]/[Teaching]/PSY2104 Biological Psychology/Group - 2025 - PSY2104 Group Presentation/raters moderation/combined-weighted.csv")#
# Check the structure#
print("Column names in the dataset:")#
print(colnames(df))#
print("Data dimensions:")#
print(dim(df))#
#
# Clean data - remove rows with missing Name#
df <- df[!is.na(df$Name) & df$Name != "", ]#
#
# Use the existing weighted score column (column 15)#
# Rename for consistency#
df$Overall_Score <- df$weighted.score#
#
# 1. OVERALL GROUP SCORES PLOT#
# Calculate average score per group#
group_scores <- df %>%#
  group_by(Group.name) %>%#
  summarise(#
    Overall_Score = mean(Overall_Score, na.rm = TRUE),#
    n_evaluations = n(),#
    .groups = "drop"#
  ) %>%#
  filter(!is.na(Group.name) & Group.name != "")#
#
# Group statistics#
group_stats <- group_scores %>%#
  summarise(#
    mean = mean(Overall_Score),#
    sd = sd(Overall_Score),#
    min = min(Overall_Score),#
    max = max(Overall_Score),#
    n = n()#
  )#
#
# Create group scores plot#
group_plot <- ggplot(group_scores, aes(x = Overall_Score)) +#
  geom_histogram(bins = 12, fill = "steelblue", alpha = 0.7, color = "white", linewidth = 0.5) +#
  geom_vline(xintercept = group_stats$mean, color = "red", linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(group_scores$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(group_scores$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(group_scores$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(group_scores$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  labs(#
    title = "Distribution of Overall Group Scores",#
    subtitle = paste("Mean =", round(group_stats$mean, 2), #
                     "| SD =", round(group_stats$sd, 2),#
                     "| Range =", round(group_stats$min, 2), "-", round(group_stats$max, 2),#
                     "| n =", group_stats$n, "groups"),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
print(group_plot)#
ggsave("1-overall_group_scores.png", group_plot, width = 10, height = 6, dpi = 300)#
#
# 2. OVERALL SCORES BY EVALUATOR#
# Calculate statistics by evaluator#
overall_stats <- df %>%#
  group_by(Name) %>%#
  summarise(#
    mean_score = mean(Overall_Score, na.rm = TRUE),#
    sd_score = sd(Overall_Score, na.rm = TRUE),#
    n = n(),#
    .groups = "drop"#
  )#
#
# Create evaluator comparison plot#
evaluator_plot <- ggplot(df, aes(x = Overall_Score, fill = Name)) +#
  geom_histogram(alpha = 0.7, bins = 12, position = "stack") + #
  geom_vline(data = overall_stats, aes(xintercept = mean_score, color = Name), #
             linetype = "dashed", linewidth = 1) +#
  scale_x_continuous(#
    breaks = seq(floor(min(df$Overall_Score, na.rm = TRUE)), #
                 ceiling(max(df$Overall_Score, na.rm = TRUE)), 1),#
    limits = c(floor(min(df$Overall_Score, na.rm = TRUE)) - 0.5, #
               ceiling(max(df$Overall_Score, na.rm = TRUE)) + 0.5)#
  ) +#
  scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
  scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
  labs(#
    title = "Distribution of Overall Scores by Evaluator",#
    subtitle = paste(#
      "Jun Ho Chai: μ =", round(overall_stats$mean_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Jun Ho Chai"], 2),#
      "| Arjun: μ =", round(overall_stats$mean_score[overall_stats$Name == "Arjun"], 2),#
      "± σ =", round(overall_stats$sd_score[overall_stats$Name == "Arjun"], 2)#
    ),#
    x = "Overall Score", #
    y = "Number of Groups"#
  ) +#
  theme_minimal() +#
  theme(#
    legend.position = "right", #
    legend.title = element_blank(),#
    plot.title = element_text(size = 14, face = "bold"),#
    plot.subtitle = element_text(size = 11),#
    axis.title = element_text(size = 12),#
    axis.title.x = element_text(size = 12, margin = margin(t = 10)),#
    axis.text.x = element_text(size = 10),#
    axis.text.y = element_text(size = 10)#
  )#
#
print(evaluator_plot)#
ggsave("2-overall_scores_by_evaluator.png", evaluator_plot, width = 10, height = 6, dpi = 300)#
#
# 3. ZOOM-IN CRITERIA DISTRIBUTIONS BY EVALUATOR#
# Define the criteria columns (positions 8-14)#
criteria_names <- c("Introduction", "Background Knowledge", "Application & Comparison", #
                    "Critical Analysis", "Conclusion & Synthesis", "Structure & Delivery", #
                    "Comprehension & Communication")#
#
# Rename columns for easier access#
colnames(df)[8:14] <- criteria_names#
#
# Create individual criterion plots#
plots <- list()#
#
for(i in 1:length(criteria_names)) {#
  criterion_name <- criteria_names[i]#
  # Calculate statistics by evaluator for this criterion#
  stats <- df %>%#
    group_by(Name) %>%#
    summarise(#
      mean_score = mean(!!sym(criterion_name), na.rm = TRUE),#
      sd_score = sd(!!sym(criterion_name), na.rm = TRUE),#
      n = n(),#
      .groups = "drop"#
    )#
  # Determine appropriate x-axis limits based on data range#
	data_range <- range(df[[criterion_name]], na.rm = TRUE)#
	x_min <- max(0, floor(data_range[1]))#
	x_max <- ceiling(data_range[2]+.5)#
  # Create the plot with zoomed-in view#
  p <- ggplot(df, aes(x = !!sym(criterion_name), fill = Name)) +#
    geom_histogram(alpha = 0.7, bins = 8, position = "stack") +#
    geom_vline(data = stats, aes(xintercept = mean_score, color = Name), #
               linetype = "dashed", linewidth = 0.8) +#
    scale_x_continuous(limits = c(x_min, x_max), #
                      breaks = seq(x_min, x_max, by = 1)) +#
    scale_fill_manual(values = c("Jun Ho Chai" = "skyblue", "Arjun" = "lightcoral")) +#
    scale_color_manual(values = c("Jun Ho Chai" = "blue", "Arjun" = "red")) +#
    labs(#
      title = criterion_name,#
      subtitle = paste(#
        "JHC: μ =", round(stats$mean_score[stats$Name == "Jun Ho Chai"], 2),#
        "| Arjun: μ =", round(stats$mean_score[stats$Name == "Arjun"], 2)#
      ),#
      x = "Score", #
      y = "Number of Groups"#
    ) +#
    theme_minimal() +#
    theme(#
      legend.position = "none",#
      plot.title = element_text(size = 11, face = "bold"),#
      plot.subtitle = element_text(size = 9),#
      axis.title = element_text(size = 9),#
      axis.text = element_text(size = 8)#
    )#
  plots[[i]] <- p#
}#
#
# Create a combined criteria plot grid (zoomed-in)#
combined_criteria_plot <- grid.arrange(grobs = plots, ncol = 3, nrow = 3)#
#
# Save the criteria distributions plot#
ggsave("zoom-in-criteria_distributions.png", combined_criteria_plot, width = 15, height = 12, dpi = 300)#
#
# Print summary information#
cat("\n=== ANALYSIS SUMMARY ===\n")#
cat("Files created:\n")#
cat("1. overall_group_scores.png - Distribution of group average scores\n")#
cat("2. overall_scores_by_evaluator.png - Comparison of evaluator scoring patterns\n")#
cat("3. zoom-in-criteria_distributions.png - Detailed view of each criterion by evaluator\n")#
#
print("Overall Statistics by Evaluator:")#
print(overall_stats)#
#
print("Group Scores Summary:")#
print(group_stats)
library(qrcode)
generate_svg("revision.svg", qr_code("https://padlet.com/junhoc1/breakout-room/kxPM2kx0NZaVqgbV-OPZ4XKLpje3Dvqg1"))
??qr_code
generate_svg(qr_code("https://padlet.com/junhoc1/breakout-room/kxPM2kx0NZaVqgbV-OPZ4XKLpje3Dvqg1"), "revision.svg")
library(shiny)#
library(shinydashboard)#
library(DT)#
#
ui <- dashboardPage(#
  dashboardHeader(title = "Life in Boxes"),#
  dashboardSidebar(#
    selectInput("country", "Country", choices = c("Malaysia", "Korea", "USA")),#
    selectInput("gender", "Gender", choices = c("Female", "Male")),#
    numericInput("age", "Current age", value = 30, min = 0, max = 120)#
  ),#
  dashboardBody(#
    valueBoxOutput("life_stats"),#
    uiOutput("boxes_grid")#
  )#
)#
#
server <- function(input, output, session) {#
  # Placeholder: Life expectancy data lookup#
  getLifeExpectancy <- function(country, gender) {#
    # Lookup table or API; simplistic version below#
    if(country == "Malaysia" && gender == "Female") return(78)#
    if(country == "Malaysia" && gender == "Male") return(74)#
    return(80)#
  }#
  output$life_stats <- renderValueBox({#
    expectancy <- getLifeExpectancy(input$country, input$gender)#
    lived <- input$age#
    perc <- round(100 * lived / expectancy, 1)#
    valueBox(paste(perc, "%"), "Life lived", color = "purple")#
  })#
  output$boxes_grid <- renderUI({#
    expectancy <- getLifeExpectancy(input$country, input$gender)#
    lived <- input$age#
    boxes <- lapply(1:expectancy, function(i) {#
      style <- if(i <= lived) "background-color:purple;" else "background-color:gray;"#
      tags$div(style = paste("display:inline-block;width:15px;height:15px;margin:1px;", style))#
    })#
    do.call(tagList, boxes)#
  })#
}#
shinyApp(ui, server)
install.packages("shinydashboard")
library(shiny)#
library(shinydashboard)#
library(DT)#
#
ui <- dashboardPage(#
  dashboardHeader(title = "Life in Boxes"),#
  dashboardSidebar(#
    selectInput("country", "Country", choices = c("Malaysia", "Korea", "USA")),#
    selectInput("gender", "Gender", choices = c("Female", "Male")),#
    numericInput("age", "Current age", value = 30, min = 0, max = 120)#
  ),#
  dashboardBody(#
    valueBoxOutput("life_stats"),#
    uiOutput("boxes_grid")#
  )#
)#
#
server <- function(input, output, session) {#
  # Placeholder: Life expectancy data lookup#
  getLifeExpectancy <- function(country, gender) {#
    # Lookup table or API; simplistic version below#
    if(country == "Malaysia" && gender == "Female") return(78)#
    if(country == "Malaysia" && gender == "Male") return(74)#
    return(80)#
  }#
  output$life_stats <- renderValueBox({#
    expectancy <- getLifeExpectancy(input$country, input$gender)#
    lived <- input$age#
    perc <- round(100 * lived / expectancy, 1)#
    valueBox(paste(perc, "%"), "Life lived", color = "purple")#
  })#
  output$boxes_grid <- renderUI({#
    expectancy <- getLifeExpectancy(input$country, input$gender)#
    lived <- input$age#
    boxes <- lapply(1:expectancy, function(i) {#
      style <- if(i <= lived) "background-color:purple;" else "background-color:gray;"#
      tags$div(style = paste("display:inline-block;width:15px;height:15px;margin:1px;", style))#
    })#
    do.call(tagList, boxes)#
  })#
}#
shinyApp(ui, server)
# app.R#
# ------------------------------------------------------------#
# "Life in Boxes": Visualize a life as boxes of time that fill as time passes.#
# - Data: World Bank life expectancy (by country & gender) via WDI package.#
# - User inputs: birth date, country, gender; optional manual override.#
# - Views: Days / Weeks / Months grids, percent lived, expected age at death.#
# - Ticking: grid and stats update every second to reflect real time.#
# - Export: save current grid as PNG.#
# ------------------------------------------------------------#
#
# ==== Packages ====#
packages <- c(#
  "shiny", "bslib", "WDI", "countrycode", "dplyr", "tidyr",#
  "lubridate", "ggplot2", "scales", "rlang", "stringr", "withr"#
)#
#
missing <- packages[!packages %in% rownames(installed.packages())]#
if (length(missing)) install.packages(missing, repos = "https://cloud.r-project.org")#
#
lapply(packages, require, character.only = TRUE)#
#
# ---- Helpers ----#
# Safely fetch latest life expectancy for a given ISO3C and sex.#
fetch_life_exp <- function(iso3c, sex = c("total", "male", "female")) {#
  sex <- match.arg(sex)#
  ind_map <- list(#
    total = "SP.DYN.LE00.IN",#
    male  = "SP.DYN.LE00.MA.IN",#
    female= "SP.DYN.LE00.FE.IN"#
  )#
  ind <- ind_map[[sex]]#
  # Grab last ~15 years and take the most recent non-NA#
  dat <- WDI(country = iso3c, indicator = ind, start = 2005, end = as.integer(format(Sys.Date(), "%Y")), extra = FALSE)#
  if (!nrow(dat)) return(NA_real_)#
  dat <- dat[order(dat$year, decreasing = TRUE), , drop = FALSE]#
  val <- dat[[ind]][which(!is.na(dat[[ind]]))[1]]#
  as.numeric(val)#
}#
#
# Create a tibble of boxes (rows) for the grid#
make_boxes <- function(start_date, expected_age, granularity = c("Weeks", "Days", "Months")) {#
  granularity <- match.arg(granularity)#
  # total units expected#
  if (granularity == "Days") {#
    total_units <- as.integer(round(expected_age * 365.2425))#
    unit_seq <- seq.Date(from = as.Date(start_date), by = "day", length.out = total_units)#
    n_cols <- 365L     # 365 columns ~ days per year#
  } else if (granularity == "Weeks") {#
    total_units <- as.integer(round(expected_age * 52.1775))#
    unit_seq <- seq.Date(from = as.Date(start_date), by = "week", length.out = total_units)#
    n_cols <- 52L#
  } else {#
    # Months#
    total_units <- as.integer(round(expected_age * 12))#
    unit_seq <- seq.Date(from = floor_date(as.Date(start_date), "month"), by = "month", length.out = total_units)#
    n_cols <- 12L#
  }#
  df <- tibble(#
    idx = seq_len(total_units),#
    date = unit_seq#
  )#
  df <- df |> mutate(#
    row = (idx - 1L) %/% n_cols + 1L,#
    col = (idx - 1L) %%  n_cols + 1L#
  )#
  df#
}#
#
# Compute share lived up to now for a given granularity#
mark_lived <- function(df, now = Sys.time()) {#
  df |> mutate(#
    lived = date <= as.Date(now),#
    is_today = date == as.Date(now)#
  )#
}#
#
# Build the plot#
plot_grid <- function(df, granularity, accent_today = TRUE) {#
  lived_color <- "#222222"#
  future_color <- "#e8e8ee"#
  today_color <- "#ff6b6b"#
#
  p <- ggplot(df, aes(x = col, y = -row)) +#
    geom_tile(aes(fill = lived), width = 0.95, height = 0.95, color = NA) +#
    scale_fill_manual(values = c(`TRUE` = lived_color, `FALSE` = future_color), guide = "none") +#
    coord_equal() +#
    theme_void(base_size = 11) +#
    theme(#
      plot.background = element_rect(fill = "white", color = NA),#
      plot.margin = margin(6, 6, 6, 6)#
    )#
#
  if (accent_today && any(df$is_today, na.rm = TRUE)) {#
    p <- p +#
      geom_tile(data = subset(df, is_today), fill = today_color, width = 0.95, height = 0.95)#
  }#
#
  title_txt <- paste0(#
    ifelse(granularity == "Days", "Life in Days",#
    ifelse(granularity == "Weeks", "Life in Weeks", "Life in Months"))#
  )#
#
  p + ggtitle(title_txt)#
}#
#
# Pretty value boxes (using bslib cards)#
value_card <- function(title, value, subtitle = NULL) {#
  bslib::card(#
    class = "shadow-sm border-0",#
    bslib::card_body(#
      div(class = "d-flex align-items-baseline justify-content-between",#
          tags$div(#
            tags$div(title, class = "text-muted small"),#
            tags$div(value, class = "fw-bold h4 mb-0")#
          ),#
          if (!is.null(subtitle)) tags$div(subtitle, class = "text-muted small")#
      )#
    )#
  )#
}#
#
# ---- UI ----#
ui <- page_fillable(#
  theme = bs_theme(version = 5, bootswatch = "flatly", base_font = font_google("Inter")),#
  title = "Life in Boxes",#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 340,#
      h5("Inputs"),#
      dateInput("dob", "Date of birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectizeInput(#
        "country", "Country",#
        choices = sort(unique(countrycode::codelist$country.name.en)),#
        selected = "Malaysia",#
        options = list(placeholder = "Type to search...")#
      ),#
      radioButtons("sex", "Gender", choices = c("Female", "Male", "Total"), inline = TRUE, selected = "Total"),#
      radioButtons("gran", "Granularity", choices = c("Weeks", "Days", "Months"), inline = TRUE, selected = "Weeks"),#
      checkboxInput("use_manual", "Override life expectancy", FALSE),#
      numericInput("manual_le", "Manual life expectancy (years)", value = 80, min = 1, max = 130, step = 0.1),#
      hr(),#
      h6("Data source"),#
      helpText("World Bank Indicators: SP.DYN.LE00 (Total/Male/Female)."),#
      hr(),#
      downloadButton("dl_png", "Download PNG", class = "btn-primary"),#
      div(class = "small text-muted mt-2", "Tip: Use Weeks for speed; Days view can be heavy on older machines.")#
    ),#
    bslib::card(class = "border-0",#
      card_body(#
        fluidRow(#
          column(4, uiOutput("age_box")),#
          column(4, uiOutput("expect_box")),#
          column(4, uiOutput("pct_box"))#
        )#
      )#
    ),#
    navs_tab_card(#
      nav_panel("Grid", plotOutput("grid_plot", height = "72vh")),#
      nav_panel("Stats",#
        fluidRow(#
          column(6,#
            tableOutput("stats_table")#
          ),#
          column(6,#
            div(class = "p-2",#
              tags$ul(#
                tags$li("Each square represents one unit of time (day/week/month)."),#
                tags$li("Dark squares = time lived, light = projected time remaining."),#
                tags$li("Today's unit is highlighted."),#
                tags$li("Life expectancy fetched from World Bank; you can override it.")#
              )#
            )#
          )#
        )#
      )#
    )#
  )#
)#
#
# ---- Server ----#
server <- function(input, output, session) {#
  # Update manual LE input enabled/disabled#
  observe({#
    shinyjs::toggleState <- function(id, condition) {#
      session$sendInputMessage(id, list(disabled = !condition))#
    }#
  })#
#
  # Reactive timer for ticking updates#
  tick <- reactiveTimer(1000, session)#
#
  # Reactive: country ISO3C#
  country_iso3c <- reactive({#
    req(input$country)#
    out <- suppressWarnings(countrycode(input$country, "country.name", "iso3c"))#
    validate(need(!is.na(out), "Unknown country selected."))#
    out#
  })#
#
  # Reactive: fetched life expectancy#
  life_exp_fetched <- reactive({#
    req(country_iso3c(), input$sex)#
    sex <- tolower(input$sex)#
    # map "Total" -> total#
    sex <- ifelse(sex == "total", "total", sex)#
    val <- tryCatch(fetch_life_exp(country_iso3c(), sex), error = function(e) NA_real_)#
    val#
  })#
#
  # Effective life expectancy used#
  life_exp <- reactive({#
    if (isTRUE(input$use_manual) && is.finite(input$manual_le)) {#
      return(as.numeric(input$manual_le))#
    }#
    life_exp_fetched()#
  })#
#
  # Compute age and expected age at death#
  age_years <- reactive({#
    req(input$dob)#
    as.numeric(interval(start = input$dob, end = Sys.time()) / years(1))#
  })#
#
  expected_age_at_death <- reactive({#
    req(life_exp())#
    # Simple approach: LE at birth approximates expected age at death#
    le <- as.numeric(life_exp())#
    validate(need(is.finite(le) && le > 1, "Life expectancy not available; try manual override."))#
    le#
  })#
#
  # Boxes data#
  boxes <- reactive({#
    req(input$dob, expected_age_at_death())#
    make_boxes(start_date = input$dob, expected_age = expected_age_at_death(), granularity = input$gran)#
  })#
#
  boxes_marked <- reactive({#
    tick()  # cause re-eval every second#
    mark_lived(boxes(), now = Sys.time())#
  })#
#
  # Stats#
  stats <- reactive({#
    bx <- boxes_marked()#
    total <- nrow(bx)#
    lived <- sum(bx$lived, na.rm = TRUE)#
    pct   <- lived / total#
    tibble(#
      Metric = c("Current age (years)", "Expected age at death (years)", paste0("Units (", input$gran, ") lived"), paste0("Total units (", input$gran, ")"), "Percent lived"),#
      Value  = c(sprintf("%.2f", age_years()), sprintf("%.2f", expected_age_at_death()), formatC(lived, big.mark = ","), formatC(total, big.mark = ","), scales::percent(pct, accuracy = 0.01))#
    )#
  })#
#
  # ---- Outputs ----#
  output$age_box <- renderUI({ value_card("Age", sprintf("%.2f yrs", age_years())) })#
  output$expect_box <- renderUI({ value_card("Expected age at death", sprintf("%.2f yrs", expected_age_at_death())) })#
  output$pct_box <- renderUI({#
    bx <- boxes_marked(); total <- nrow(bx); lived <- sum(bx$lived); pct <- lived / total#
    value_card("Percent lived", scales::percent(pct, accuracy = 0.01))#
  })#
#
  output$grid_plot <- renderPlot({#
    plot_grid(boxes_marked(), input$gran, accent_today = TRUE)#
  }, res = 120)#
#
  output$stats_table <- renderTable({ stats() }, striped = TRUE, hover = TRUE, bordered = FALSE, width = "100%")#
#
  # ---- Download PNG ----#
  output$dl_png <- downloadHandler(#
    filename = function() {#
      paste0("life-in-boxes-", tolower(gsub("\\s+", "-", input$country)), "-", tolower(input$sex), "-", tolower(input$gran), ".png")#
    },#
    content = function(file) {#
      withr::with_tempfile(fileext = ".png", code = function(tmp) {#
        # Render plot at high DPI#
        p <- plot_grid(boxes_marked(), input$gran, accent_today = TRUE)#
        # Use ragg for crisp text if available#
        dev <- if (requireNamespace("ragg", quietly = TRUE)) ragg::agg_png else png#
        dev(filename = tmp, width = 2000, height = 1200, res = 200, units = "px", type = "cairo")#
        print(p)#
        dev.off()#
        file.copy(tmp, file, overwrite = TRUE)#
      })#
    }#
  )#
}#
#
shinyApp(ui, server)
# Updated R Shiny app: Life in Boxes (Simplified Customization)#
# ------------------------------------------------------------#
# - Adds: Dark/Light mode toggle, Show age scale option#
# - Simplified colors: lived, remaining, today#
# - Fix: Ensure grid & stats render correctly by handling missing life expectancy gracefully#
# ------------------------------------------------------------#
#
library(shiny)#
library(bslib)#
library(WDI)#
library(countrycode)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Fetch life expectancy#
data_life_exp <- function(iso3c, sex) {#
  ind_map <- list(#
    total = "SP.DYN.LE00.IN",#
    male  = "SP.DYN.LE00.MA.IN",#
    female= "SP.DYN.LE00.FE.IN"#
  )#
  ind <- ind_map[[sex]]#
  dat <- WDI(country = iso3c, indicator = ind, start = 2010, end = as.integer(format(Sys.Date(), "%Y")), extra = FALSE)#
  if (!nrow(dat)) return(NA_real_)#
  dat <- dat[order(dat$year, decreasing = TRUE),]#
  na.omit(dat[[ind]])[1]#
}#
#
make_boxes <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Days") {#
    total_units <- round(expected_age * 365.25)#
    seq.Date(start_date, by = "day", length.out = total_units)#
  } else if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
}#
#
ui <- page_fillable(#
  theme = bs_theme(version = 5, bootswatch = "flatly"),#
  title = "Life in Boxes",#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 320,#
      dateInput("dob", "Date of birth", value = as.Date("1990-01-01")),#
      selectInput("country", "Country", choices = sort(unique(countrycode::codelist$country.name.en)), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Female", "Male", "Total"), selected = "Total", inline = TRUE),#
      radioButtons("gran", "Granularity", choices = c("Weeks", "Months", "Days"), selected = "Weeks", inline = TRUE),#
      checkboxInput("override", "Override life expectancy", FALSE),#
      numericInput("manual_le", "Life expectancy (years)", value = 80, min = 1, max = 120, step = 1),#
      checkboxInput("age_scale", "Show age scale", TRUE),#
      radioButtons("theme_mode", "Theme", choices = c("Light", "Dark"), selected = "Light", inline = TRUE),#
      downloadButton("dl_png", "Download PNG", class = "btn-primary")#
    ),#
    card(#
      card_body(#
        fluidRow(#
          column(4, uiOutput("age_box")),#
          column(4, uiOutput("expect_box")),#
          column(4, uiOutput("pct_box"))#
        )#
      )#
    ),#
    plotOutput("grid_plot", height = "75vh")#
  )#
)#
#
server <- function(input, output, session) {#
  tick <- reactiveTimer(1000, session)#
#
  life_exp <- reactive({#
    if (input$override) return(input$manual_le)#
    iso <- countrycode(input$country, "country.name", "iso3c")#
    sex <- tolower(ifelse(input$sex == "Total", "total", input$sex))#
    val <- suppressWarnings(data_life_exp(iso, sex))#
    ifelse(is.na(val), input$manual_le, val)#
  })#
#
  age_years <- reactive({#
    interval(input$dob, Sys.Date()) / years(1)#
  })#
#
  boxes_data <- reactive({#
    req(life_exp(), input$dob)#
    make_boxes(input$dob, life_exp(), input$gran)#
  })#
#
  boxes_marked <- reactive({#
    tick()#
    tibble(date = boxes_data(), lived = date <= Sys.Date(), today = date == Sys.Date())#
  })#
#
  output$grid_plot <- renderPlot({#
    df <- boxes_marked()#
    cols <- if (input$theme_mode == "Dark") c(bg = "black", lived = "white", remaining = "gray40", today = "red")#
            else c(bg = "white", lived = "black", remaining = "gray90", today = "red")#
#
    n_cols <- ifelse(input$gran == "Months", 12, ifelse(input$gran == "Weeks", 52, 365))#
    df <- df %>% mutate(#
      idx = row_number(),#
      row = (idx - 1) %/% n_cols + 1,#
      col = (idx - 1) %% n_cols + 1#
    )#
#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.95, height = 0.95) +#
      scale_fill_manual(values = c(`TRUE` = cols["lived"], `FALSE` = cols["remaining"]), guide = "none") +#
      geom_tile(data = subset(df, today), fill = cols["today"], width = 0.95, height = 0.95) +#
      coord_equal() +#
      theme_void() +#
      theme(plot.background = element_rect(fill = cols["bg"], color = NA))#
  })#
#
  output$age_box <- renderUI({#
    card(class = "p-2", paste("Age:", sprintf("%.1f yrs", age_years())))#
  })#
#
  output$expect_box <- renderUI({#
    card(class = "p-2", paste("Life Expectancy:", round(life_exp(), 1), "yrs"))#
  })#
#
  output$pct_box <- renderUI({#
    df <- boxes_marked()#
    pct <- mean(df$lived)#
    card(class = "p-2", paste("Lived:", percent(pct, accuracy = 0.1)))#
  })#
#
  output$dl_png <- downloadHandler(#
    filename = function() {#
      paste0("life-in-boxes-", Sys.Date(), ".png")#
    },#
    content = function(file) {#
      png(file, width = 1600, height = 1000, res = 150)#
      print(#
        ggplot(boxes_marked(), aes(x = col, y = -row)) +#
          geom_tile(aes(fill = lived)) +#
          scale_fill_manual(values = c(`TRUE` = "black", `FALSE` = "gray90"), guide = "none") +#
          theme_void()#
      )#
      dev.off()#
    }#
  )#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(shinydashboard)#
library(dplyr)#
library(readr)#
#
# --- 1. Load or Define Life Expectancy Data ---#
# For demonstration, a small built-in table; extend this with real data as needed.#
life_expectancy <- tibble::tribble(#
  ~country,       ~gender,    ~life_exp,#
  "Malaysia",     "Female",   78,#
  "Malaysia",     "Male",     74,#
  "South Korea",  "Female",   86,#
  "South Korea",  "Male",     80,#
  "United States","Female",   81,#
  "United States","Male",     76#
)#
#
# --- 2. UI Definition ---#
ui <- dashboardPage(#
  dashboardHeader(title = "Life in Boxes"),#
  dashboardSidebar(#
    selectInput("country", "Country:", #
                choices = unique(life_expectancy$country)),#
    selectInput("gender", "Gender:", #
                choices = unique(life_expectancy$gender)),#
    sliderInput("age", "Current Age:", #
                min = 0, max = 100, value = 30, step = 1)#
  ),#
  dashboardBody(#
    fluidRow(#
      valueBoxOutput("years_lived"),#
      valueBoxOutput("years_remaining"),#
      valueBoxOutput("percent_lived")#
    ),#
    fluidRow(#
      box(#
        title = "Life Grid (1 box = 1 year)",#
        width = 12,#
        # CSS to enable scrolling for large grids#
        tags$div(#
          style = "height:400px; overflow-y:auto; white-space: normal;",#
          uiOutput("life_grid")#
        )#
      )#
    )#
  )#
)#
#
# --- 3. Server Logic ---#
server <- function(input, output, session) {#
#
  # Reactive: Lookup life expectancy based on inputs#
  expect <- reactive({#
    req(input$country, input$gender)#
    life_expectancy %>%#
      filter(country == input$country, gender == input$gender) %>%#
      pull(life_exp)#
  })#
  # Reactive: Compute lived and remaining years#
  lived <- reactive({ min(input$age, expect()) })#
  remaining <- reactive({ max(expect() - input$age, 0) })#
  # --- Value Boxes ---#
  output$years_lived <- renderValueBox({#
    valueBox(#
      lived(), "Years Lived", icon = icon("calendar-check"),#
      color = "purple"#
    )#
  })#
  output$years_remaining <- renderValueBox({#
    valueBox(#
      remaining(), "Years Remaining", icon = icon("hourglass-half"),#
      color = "gray"#
    )#
  })#
  output$percent_lived <- renderValueBox({#
    perc <- round(100 * lived() / expect(), 1)#
    valueBox(#
      paste0(perc, "%"), "Life Completed", icon = icon("percent"),#
      color = "navy"#
    )#
  })#
  # --- Render the Grid of Boxes ---#
  output$life_grid <- renderUI({#
    total <- expect()#
    ui_boxes <- lapply(seq_len(total), function(year) {#
      # Determine fill color#
      fill_col <- if (year <= lived()) "#6a0dad" else "#d3d3d3"#
      tags$div(#
        style = paste0(#
          "display:inline-block;",#
          "width:15px; height:15px; margin:2px;",#
          "background-color:", fill_col, ";"#
        ),#
        title = paste0("Year ", year)#
      )#
    })#
    do.call(tagList, ui_boxes)#
  })#
}#
#
# --- 4. Run the App ---#
shinyApp(ui, server)
# Updated R Shiny app: Life in Boxes (Fixed grid, stats, download, added life meter)#
# ------------------------------------------------------------#
# - Fixed: Grid and stats not showing (row/col indexing moved into reactive)#
# - Fixed: Download PNG uses same data processing#
# - Added: Real-time ticking life meter progress bar#
# ------------------------------------------------------------#
#
library(shiny)#
library(bslib)#
library(WDI)#
library(countrycode)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(progress)#
#
# Fetch life expectancy#
data_life_exp <- function(iso3c, sex) {#
  ind_map <- list(#
    total = "SP.DYN.LE00.IN",#
    male  = "SP.DYN.LE00.MA.IN",#
    female= "SP.DYN.LE00.FE.IN"#
  )#
  ind <- ind_map[[sex]]#
  dat <- WDI(country = iso3c, indicator = ind, start = 2010, end = as.integer(format(Sys.Date(), "%Y")), extra = FALSE)#
  if (!nrow(dat)) return(NA_real_)#
  dat <- dat[order(dat$year, decreasing = TRUE),]#
  na.omit(dat[[ind]])[1]#
}#
#
make_boxes <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Days") {#
    total_units <- round(expected_age * 365.25)#
    seq.Date(start_date, by = "day", length.out = total_units)#
  } else if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
}#
#
ui <- page_fillable(#
  theme = bs_theme(version = 5, bootswatch = "flatly"),#
  title = "Life in Boxes",#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 320,#
      dateInput("dob", "Date of birth", value = as.Date("1990-01-01")),#
      selectInput("country", "Country", choices = sort(unique(countrycode::codelist$country.name.en)), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Female", "Male", "Total"), selected = "Total", inline = TRUE),#
      radioButtons("gran", "Granularity", choices = c("Weeks", "Months", "Days"), selected = "Weeks", inline = TRUE),#
      checkboxInput("override", "Override life expectancy", FALSE),#
      numericInput("manual_le", "Life expectancy (years)", value = 80, min = 1, max = 120, step = 1),#
      radioButtons("theme_mode", "Theme", choices = c("Light", "Dark"), selected = "Light", inline = TRUE),#
      downloadButton("dl_png", "Download PNG", class = "btn-primary")#
    ),#
    card(#
      card_body(#
        uiOutput("life_meter"),#
        fluidRow(#
          column(4, uiOutput("age_box")),#
          column(4, uiOutput("expect_box")),#
          column(4, uiOutput("pct_box"))#
        )#
      )#
    ),#
    plotOutput("grid_plot", height = "75vh")#
  )#
)#
#
server <- function(input, output, session) {#
  tick <- reactiveTimer(1000, session)#
#
  life_exp <- reactive({#
    if (input$override) return(input$manual_le)#
    iso <- countrycode(input$country, "country.name", "iso3c")#
    sex <- tolower(ifelse(input$sex == "Total", "total", input$sex))#
    val <- suppressWarnings(data_life_exp(iso, sex))#
    ifelse(is.na(val), input$manual_le, val)#
  })#
#
  age_years <- reactive({#
    interval(input$dob, Sys.Date()) / years(1)#
  })#
#
  boxes_marked <- reactive({#
    tick()#
    req(life_exp(), input$dob)#
    dates <- make_boxes(input$dob, life_exp(), input$gran)#
    n_cols <- ifelse(input$gran == "Months", 12, ifelse(input$gran == "Weeks", 52, 365))#
    df <- tibble(date = dates, lived = dates <= Sys.Date(), today = dates == Sys.Date()) %>%#
      mutate(idx = row_number(),#
             row = (idx - 1) %/% n_cols + 1,#
             col = (idx - 1) %% n_cols + 1)#
    df#
  })#
#
  output$grid_plot <- renderPlot({#
    df <- boxes_marked()#
    cols <- if (input$theme_mode == "Dark") c(bg = "black", lived = "white", remaining = "gray40", today = "red")#
            else c(bg = "white", lived = "black", remaining = "gray90", today = "red")#
#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.95, height = 0.95) +#
      scale_fill_manual(values = c(`TRUE` = cols["lived"], `FALSE` = cols["remaining"]), guide = "none") +#
      geom_tile(data = subset(df, today), fill = cols["today"], width = 0.95, height = 0.95) +#
      coord_equal() +#
      theme_void() +#
      theme(plot.background = element_rect(fill = cols["bg"], color = NA))#
  })#
#
  output$life_meter <- renderUI({#
    df <- boxes_marked()#
    pct <- mean(df$lived)#
    tags$div(style = "width: 100%; background-color: #ddd; border-radius: 8px; height: 20px;",#
             tags$div(style = paste0("width:", round(pct*100), "%; background-color: #4CAF50; height: 100%; border-radius: 8px;")))#
  })#
#
  output$age_box <- renderUI({#
    card(class = "p-2", paste("Age:", sprintf("%.1f yrs", age_years())))#
  })#
#
  output$expect_box <- renderUI({#
    card(class = "p-2", paste("Life Expectancy:", round(life_exp(), 1), "yrs"))#
  })#
#
  output$pct_box <- renderUI({#
    df <- boxes_marked()#
    pct <- mean(df$lived)#
    card(class = "p-2", paste("Lived:", percent(pct, accuracy = 0.1)))#
  })#
#
  output$dl_png <- downloadHandler(#
    filename = function() {#
      paste0("life-in-boxes-", Sys.Date(), ".png")#
    },#
    content = function(file) {#
      df <- boxes_marked()#
      png(file, width = 1600, height = 1000, res = 150)#
      ggplot(df, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.95, height = 0.95) +#
        scale_fill_manual(values = c(`TRUE` = "black", `FALSE` = "gray90"), guide = "none") +#
        theme_void()#
      dev.off()#
    }#
  )#
}#
#
shinyApp(ui, server)
# Enhanced Life Calendar App with Multiple Interactive Features#
# app.R#
#
library(shiny)#
library(shinydashboard)#
library(bslib)#
library(dplyr)#
library(DT)#
library(lubridate)#
library(plotly)#
#
# --- Life Expectancy Data ---#
life_expectancy <- tibble::tribble(#
  ~country,       ~gender,    ~life_exp,#
  "Malaysia",     "Female",   78.2,#
  "Malaysia",     "Male",     74.1,#
  "South Korea",  "Female",   85.7,#
  "South Korea",  "Male",     79.8,#
  "United States","Female",   81.2,#
  "United States","Male",     76.3,#
  "Japan",        "Female",   87.6,#
  "Japan",        "Male",     81.6,#
  "Singapore",    "Female",   85.8,#
  "Singapore",    "Male",     81.2,#
  "United Kingdom","Female",  82.9,#
  "United Kingdom","Male",    79.4#
)#
#
# --- Milestone Data Structure ---#
milestone_categories <- c("Birth", "Education", "Career", "Relationships", #
                         "Health", "Travel", "Personal", "Family", "Other")#
#
# --- UI Definition ---#
ui <- dashboardPage(#
  dashboardHeader(title = "Life in Boxes - Interactive Life Calendar"),#
  dashboardSidebar(#
    width = 300,#
    # Personal Info Section#
    h4("Personal Information", style = "color: white; margin-left: 15px;"),#
    selectInput("country", "Country:", #
                choices = unique(life_expectancy$country),#
                selected = "Malaysia"),#
    selectInput("gender", "Gender:", #
                choices = unique(life_expectancy$gender)),#
    dateInput("birth_date", "Birth Date:",#
              value = Sys.Date() - years(30),#
              max = Sys.Date()),#
    # Display Options#
    h4("Display Options", style = "color: white; margin-left: 15px;"),#
    radioButtons("granularity", "Time Granularity:",#
                choices = list("Years" = "years", "Months" = "months", #
                             "Weeks" = "weeks", "Days" = "days"),#
                selected = "years"),#
    checkboxInput("show_milestones", "Show Milestones", value = TRUE),#
    checkboxInput("real_time", "Real-time Updates", value = FALSE),#
    conditionalPanel(#
      condition = "input.real_time == true",#
      numericInput("update_interval", "Update Interval (seconds):",#
                   min = 1, max = 60, value = 10)#
    ),#
    # Color Scheme#
    selectInput("color_scheme", "Color Scheme:",#
                choices = list("Default" = "default",#
                              "Warm" = "warm", #
                              "Cool" = "cool",#
                              "Monochrome" = "mono"),#
                selected = "default"),#
    # Milestone Management#
    h4("Add Milestone", style = "color: white; margin-left: 15px;"),#
    textInput("milestone_name", "Event Name:", placeholder = "e.g., Graduation"),#
    dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
    selectInput("milestone_category", "Category:",#
                choices = milestone_categories),#
    textAreaInput("milestone_note", "Notes:", #
                  placeholder = "Additional details...", rows = 2),#
    actionButton("add_milestone", "Add Milestone", #
                class = "btn-primary", width = "100%")#
  ),#
  dashboardBody(#
    tags$head(#
      tags$style(HTML("#
        .life-box {#
          display: inline-block;#
          margin: 1px;#
          border: 1px solid #ccc;#
          cursor: pointer;#
          transition: all 0.2s;#
        }#
        .life-box:hover {#
          transform: scale(1.1);#
          box-shadow: 0 2px 5px rgba(0,0,0,0.3);#
        }#
        .milestone-marker {#
          border: 2px solid gold !important;#
          box-shadow: 0 0 5px gold;#
        }#
        .real-time-pulse {#
          animation: pulse 2s infinite;#
        }#
        @keyframes pulse {#
          0% { opacity: 1; }#
          50% { opacity: 0.5; }#
          100% { opacity: 1; }#
        }#
      "))#
    ),#
    # Statistics Row#
    fluidRow(#
      valueBoxOutput("years_lived"),#
      valueBoxOutput("time_remaining"),  #
      valueBoxOutput("percent_lived")#
    ),#
    # Progress and Stats Row#
    fluidRow(#
      box(#
        title = "Life Progress", width = 6, status = "primary",#
        plotlyOutput("progress_chart", height = "200px")#
      ),#
      box(#
        title = "Time Statistics", width = 6, status = "info",#
        DT::dataTableOutput("time_stats_table")#
      )#
    ),#
    # Main Life Grid#
    fluidRow(#
      box(#
        title = tooltip(#
          span("Life Grid ", icon("info-circle")),#
          "Each box represents a unit of time. Click boxes to add notes!"#
        ),#
        width = 8,#
        status = "primary",#
        solidHeader = TRUE,#
        div(#
          style = "height: 500px; overflow: auto; padding: 10px;",#
          uiOutput("life_grid")#
        )#
      ),#
      # Milestones Panel#
      box(#
        title = "Milestones & Events", width = 4, status = "warning",#
        solidHeader = TRUE,#
        div(#
          style = "height: 500px; overflow: auto;",#
          DT::dataTableOutput("milestones_table")#
        )#
      )#
    ),#
    # Current Time Display (for real-time mode)#
    conditionalPanel(#
      condition = "input.real_time == true",#
      fluidRow(#
        box(#
          title = "Current Time", width = 12, status = "success",#
          h3(textOutput("current_time"), style = "text-align: center;")#
        )#
      )#
    )#
  )#
)#
#
# --- Server Logic ---#
server <- function(input, output, session) {#
  # Reactive Values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      notes = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if(input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Current time display#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Life expectancy lookup#
  life_expect <- reactive({#
    req(input$country, input$gender)#
    life_expectancy %>%#
      filter(country == input$country, gender == input$gender) %>%#
      pull(life_exp)#
  })#
  # Calculate current age and time units#
  current_age <- reactive({#
    req(input$birth_date)#
    as.numeric(difftime(values$current_time, input$birth_date, units = "days")) / 365.25#
  })#
  # Time calculations based on granularity#
  time_calcs <- reactive({#
    req(input$granularity, life_expect(), current_age())#
    life_exp <- life_expect()#
    age <- current_age()#
    multiplier <- switch(input$granularity,#
                        "years" = 1,#
                        "months" = 12,#
                        "weeks" = 52.18,#
                        "days" = 365.25)#
    total_units <- round(life_exp * multiplier)#
    lived_units <- round(age * multiplier)#
    remaining_units <- max(0, total_units - lived_units)#
    list(#
      total = total_units,#
      lived = lived_units,#
      remaining = remaining_units,#
      multiplier = multiplier,#
      unit_name = input$granularity#
    )#
  })#
  # Value boxes#
  output$years_lived <- renderValueBox({#
    tc <- time_calcs()#
    valueBox(#
      value = format(tc$lived, big.mark = ","),#
      subtitle = paste("Units Lived"),#
      icon = icon("calendar-check"),#
      color = "purple"#
    )#
  })#
  output$time_remaining <- renderValueBox({#
    tc <- time_calcs()#
    valueBox(#
      value = format(tc$remaining, big.mark = ","),#
      subtitle = paste("Units Remaining"),#
      icon = icon("hourglass-half"),#
      color = "blue"#
    )#
  })#
  output$percent_lived <- renderValueBox({#
    tc <- time_calcs()#
    perc <- round(100 * tc$lived / tc$total, 1)#
    valueBox(#
      value = paste0(perc, "%"),#
      subtitle = "Life Completed",#
      icon = icon("percent"),#
      color = "green"#
    )#
  })#
  # Progress chart#
  output$progress_chart <- renderPlotly({#
    tc <- time_calcs()#
    data <- data.frame(#
      category = c("Lived", "Remaining"),#
      value = c(tc$lived, tc$remaining),#
      color = c("#9b59b6", "#ecf0f1")#
    )#
    p <- plot_ly(data, x = ~category, y = ~value, type = 'bar',#
                marker = list(color = ~color)) %>%#
      layout(#
        title = paste("Life Progress in", str_to_title(tc$unit_name)),#
        xaxis = list(title = ""),#
        yaxis = list(title = paste("Number of", str_to_title(tc$unit_name))),#
        showlegend = FALSE#
      )#
    p#
  })#
  # Time statistics table#
  output$time_stats_table <- DT::renderDataTable({#
    tc <- time_calcs()#
    age <- current_age()#
    stats <- data.frame(#
      Metric = c("Current Age", "Life Expectancy", "Years Remaining",#
                paste("Total", str_to_title(tc$unit_name)), #
                paste("Lived", str_to_title(tc$unit_name)),#
                "Percentage Lived"),#
      Value = c(#
        paste(round(age, 1), "years"),#
        paste(life_expect(), "years"),#
        paste(round(life_expect() - age, 1), "years"),#
        format(tc$total, big.mark = ","),#
        format(tc$lived, big.mark = ","),#
        paste0(round(100 * tc$lived / tc$total, 1), "%")#
      )#
    )#
    DT::datatable(stats, options = list(dom = 't', pageLength = 10),#
                 rownames = FALSE)#
  }, server = FALSE)#
  # Color scheme function#
  get_colors <- function(scheme) {#
    switch(scheme,#
           "default" = list(lived = "#9b59b6", remaining = "#ecf0f1", milestone = "#f39c12"),#
           "warm" = list(lived = "#e74c3c", remaining = "#f8c471", milestone = "#f39c12"),#
           "cool" = list(lived = "#3498db", remaining = "#aed6f1", milestone = "#1abc9c"),#
           "mono" = list(lived = "#2c3e50", remaining = "#bdc3c7", milestone = "#95a5a6"))#
  }#
  # Life grid rendering#
  output$life_grid <- renderUI({#
    req(time_calcs())#
    tc <- time_calcs()#
    colors <- get_colors(input$color_scheme)#
    # Calculate box size based on granularity#
    box_size <- switch(input$granularity,#
                      "years" = "20px",#
                      "months" = "12px", #
                      "weeks" = "8px",#
                      "days" = "4px")#
    # Create boxes#
    boxes <- lapply(1:tc$total, function(i) {#
      is_lived <- i <= tc$lived#
      is_current <- i == tc$lived + 1 && input$real_time#
      # Check for milestones#
      milestone_match <- FALSE#
      if(input$show_milestones && nrow(values$milestones) > 0) {#
        # Calculate milestone positions based on dates#
        milestone_units <- sapply(values$milestones$date, function(d) {#
          age_at_milestone <- as.numeric(difftime(d, input$birth_date, units = "days")) / 365.25#
          round(age_at_milestone * tc$multiplier)#
        })#
        milestone_match <- i %in% milestone_units#
      }#
      # Set colors and classes#
      bg_color <- if(is_lived) colors$lived else colors$remaining#
      if(milestone_match) bg_color <- colors$milestone#
      css_class <- "life-box"#
      if(milestone_match) css_class <- paste(css_class, "milestone-marker")#
      if(is_current) css_class <- paste(css_class, "real-time-pulse")#
      # Tooltip content#
      unit_type <- substr(tc$unit_name, 1, nchar(tc$unit_name) - 1)  # Remove 's'#
      tooltip_text <- paste0(#
        str_to_title(unit_type), " ", i, "\n",#
        if(is_lived) "✓ Lived" else "○ Future",#
        if(milestone_match) "\n⭐ Milestone!" else ""#
      )#
      tooltip(#
        tags$div(#
          class = css_class,#
          style = paste0(#
            "width:", box_size, "; height:", box_size, ";",#
            "background-color:", bg_color, ";"#
          ),#
          onclick = paste0("Shiny.setInputValue('box_clicked', ", i, ", {priority: 'event'});")#
        ),#
        tooltip_text,#
        placement = "top"#
      )#
    })#
    do.call(tagList, boxes)#
  })#
  # Milestone addition#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      notes = input$milestone_note,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    # Clear inputs#
    updateTextInput(session, "milestone_name", value = "")#
    updateTextAreaInput(session, "milestone_note", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    if(nrow(values$milestones) == 0) {#
      return(data.frame(Message = "No milestones added yet"))#
    }#
    milestones_display <- values$milestones %>%#
      mutate(#
        Date = format(date, "%Y-%m-%d"),#
        Age = round(as.numeric(difftime(date, input$birth_date, units = "days")) / 365.25, 1)#
      ) %>%#
      select(Name = name, Date, Age, Category = category, Notes = notes)#
    DT::datatable(milestones_display, #
                 options = list(pageLength = 10, dom = 'frtip'),#
                 rownames = FALSE)#
  })#
  # Box click handling#
  observeEvent(input$box_clicked, {#
    tc <- time_calcs()#
    unit_num <- input$box_clicked#
    # Calculate what this unit represents#
    age_at_unit <- unit_num / tc$multiplier#
    date_at_unit <- input$birth_date + days(age_at_unit * 365.25)#
    showModal(modalDialog(#
      title = paste("Unit", unit_num),#
      paste0(#
        "This represents ", str_to_title(substr(tc$unit_name, 1, nchar(tc$unit_name) - 1)),#
        " #", unit_num, " of your life.\n\n",#
        "Age: ", round(age_at_unit, 1), " years\n",#
        "Approximate date: ", format(date_at_unit, "%Y-%m-%d"), "\n\n",#
        if(unit_num <= tc$lived) "✓ This time has passed" else "○ This time is yet to come"#
      ),#
      easyClose = TRUE#
    ))#
  })#
}#
#
# --- Run the App ---#
shinyApp(ui, server)
# Enhanced Life in Boxes - Modern Aesthetic with Full Functionality#
# ================================================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(plotly)#
#
# Life expectancy data (simplified for reliability)#
life_expectancy_data <- tibble::tribble(#
  ~country, ~male, ~female, ~total,#
  "Malaysia", 74.1, 78.2, 76.2,#
  "Singapore", 81.2, 85.8, 83.5,#
  "Japan", 81.6, 87.6, 84.6,#
  "South Korea", 79.8, 85.7, 82.8,#
  "United States", 76.3, 81.2, 78.8,#
  "United Kingdom", 79.4, 82.9, 81.2,#
  "Australia", 81.2, 85.4, 83.3,#
  "Canada", 80.9, 84.7, 82.8,#
  "Germany", 78.9, 83.6, 81.3,#
  "France", 79.8, 85.6, 82.7#
)#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (nrow(row) == 0) return(80) # Default#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Days") {#
    total_units <- round(expected_age * 365.25)#
    n_cols <- 30  # 30 days per row#
    unit_dates <- seq.Date(start_date, by = "day", length.out = total_units)#
  } else if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52  # 52 weeks per row (1 year)#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else { # Months#
    total_units <- round(expected_age * 12)#
    n_cols <- 12  # 12 months per row (1 year)#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  tibble(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    idx = row_number(),#
    row = (idx - 1) %/% n_cols + 1,#
    col = (idx - 1) %% n_cols + 1#
  )#
}#
#
# UI Definition#
ui <- page_fillable(#
  theme = bs_theme(#
    version = 5, #
    bootswatch = "flatly",#
    primary = "#3498db",#
    secondary = "#95a5a6",#
    success = "#2ecc71",#
    warning = "#f39c12",#
    danger = "#e74c3c"#
  ),#
  title = "Life in Boxes - Interactive Life Calendar",#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 350,#
      # Personal Information Section#
      card(#
        card_header("Personal Information"),#
        card_body(#
          dateInput("dob", "Date of Birth:", #
                   value = as.Date("1990-01-01"), #
                   max = Sys.Date()),#
          selectInput("country", "Country:", #
                     choices = sort(life_expectancy_data$country), #
                     selected = "Malaysia"),#
          radioButtons("sex", "Gender:", #
                      choices = c("Male", "Female", "Total"), #
                      selected = "Total", #
                      inline = TRUE)#
        )#
      ),#
      # Display Options Section#
      card(#
        card_header("Display Options"),#
        card_body(#
          radioButtons("granularity", "Time Granularity:", #
                      choices = c("Weeks", "Months", "Days"), #
                      selected = "Weeks", #
                      inline = TRUE),#
          radioButtons("theme_mode", "Visual Theme:", #
                      choices = c("Light", "Dark"), #
                      selected = "Light", #
                      inline = TRUE),#
          checkboxInput("real_time", "Real-time Updates", FALSE),#
          conditionalPanel(#
            condition = "input.real_time == true",#
            numericInput("update_interval", "Update Interval (seconds):",#
                        min = 1, max = 60, value = 5)#
          )#
        )#
      ),#
      # Life Expectancy Override#
      card(#
        card_header("Advanced Options"),#
        card_body(#
          checkboxInput("override_le", "Override Life Expectancy", FALSE),#
          conditionalPanel(#
            condition = "input.override_le == true",#
            numericInput("manual_le", "Custom Life Expectancy (years):", #
                        value = 80, min = 1, max = 120, step = 0.1)#
          )#
        )#
      ),#
      # Milestone Management#
      card(#
        card_header("Add Milestone"),#
        card_body(#
          textInput("milestone_name", "Event Name:", #
                   placeholder = "e.g., Graduation"),#
          dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
          selectInput("milestone_category", "Category:",#
                     choices = c("Education", "Career", "Personal", #
                               "Health", "Travel", "Family", "Other")),#
          actionButton("add_milestone", "Add Milestone", #
                      class = "btn-primary w-100")#
        )#
      ),#
      # Export Options#
      card(#
        card_header("Export"),#
        card_body(#
          downloadButton("download_png", "Download as PNG", #
                        class = "btn-success w-100 mb-2"),#
          downloadButton("download_data", "Download Data", #
                        class = "btn-info w-100")#
        )#
      )#
    ),#
    # Main Content Area#
    div(#
      # Life Progress Meter#
      card(#
        card_body(#
          div(#
            style = "margin-bottom: 15px;",#
            h4("Life Progress Meter", style = "margin-bottom: 10px;"),#
            uiOutput("life_meter")#
          ),#
          # Statistics Row#
          fluidRow(#
            column(3, uiOutput("age_card")),#
            column(3, uiOutput("expect_card")),#
            column(3, uiOutput("lived_card")),#
            column(3, uiOutput("remaining_card"))#
          )#
        )#
      ),#
      # Interactive Features Row#
      fluidRow(#
        column(8,#
          card(#
            card_header("Life Visualization Grid"),#
            card_body(#
              div(#
                style = "height: 60vh; overflow: auto;",#
                plotOutput("life_grid", #
                          height = "100%",#
                          hover = "grid_hover",#
                          click = "grid_click")#
              )#
            )#
          )#
        ),#
        column(4,#
          card(#
            card_header("Milestones & Statistics"),#
            card_body(#
              div(#
                style = "height: 60vh; overflow: auto;",#
                conditionalPanel(#
                  condition = "output.has_milestones",#
                  h5("Your Milestones:"),#
                  DT::dataTableOutput("milestones_table")#
                ),#
                conditionalPanel(#
                  condition = "!output.has_milestones",#
                  div(#
                    style = "text-align: center; margin-top: 50px; color: #7f8c8d;",#
                    icon("calendar-plus", style = "font-size: 48px; margin-bottom: 15px;"),#
                    h5("No milestones added yet"),#
                    p("Add milestones using the sidebar to track important life events!")#
                  )#
                ),#
                hr(),#
                h5("Time Statistics:"),#
                uiOutput("detailed_stats")#
              )#
            )#
          )#
        )#
      ),#
      # Real-time Display#
      conditionalPanel(#
        condition = "input.real_time == true",#
        card(#
          card_body(#
            div(#
              style = "text-align: center;",#
              h4("Current Time:", style = "display: inline; margin-right: 15px;"),#
              h4(textOutput("current_time", inline = TRUE), #
                 style = "display: inline; color: #e74c3c;")#
            )#
          )#
        )#
      )#
    )#
  )#
)#
#
# Server Logic#
server <- function(input, output, session) {#
  # Reactive values for storing data#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time timer#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy calculation#
  life_expectancy <- reactive({#
    if (input$override_le) {#
      return(input$manual_le)#
    }#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age calculation#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Main data processing#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Life progress meter#
  output$life_meter <- renderUI({#
    data <- boxes_data()#
    pct <- mean(data$lived) * 100#
    div(#
      div(#
        style = "width: 100%; background-color: #ecf0f1; border-radius: 10px; height: 25px; position: relative;",#
        div(#
          style = paste0(#
            "width: ", round(pct), "%; ",#
            "background: linear-gradient(90deg, #3498db, #2ecc71); ",#
            "height: 100%; border-radius: 10px; ",#
            "transition: width 0.5s ease;"#
          )#
        ),#
        div(#
          style = "position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-weight: bold; color: white;",#
          paste0(round(pct, 1), "% Complete")#
        )#
      )#
    )#
  })#
  # Statistics cards#
  output$age_card <- renderUI({#
    card(#
      class = "text-center",#
      card_body(#
        h4(round(current_age(), 1), style = "color: #3498db; margin: 0;"),#
        p("Years Old", style = "margin: 0; color: #7f8c8d;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    card(#
      class = "text-center",#
      card_body(#
        h4(round(life_expectancy(), 1), style = "color: #2ecc71; margin: 0;"),#
        p("Life Expectancy", style = "margin: 0; color: #7f8c8d;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    data <- boxes_data()#
    lived_units <- sum(data$lived)#
    card(#
      class = "text-center",#
      card_body(#
        h4(format(lived_units, big.mark = ","), style = "color: #9b59b6; margin: 0;"),#
        p(paste("Units Lived"), style = "margin: 0; color: #7f8c8d;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    data <- boxes_data()#
    remaining_units <- sum(!data$lived)#
    card(#
      class = "text-center",#
      card_body(#
        h4(format(remaining_units, big.mark = ","), style = "color: #e74c3c; margin: 0;"),#
        p("Units Remaining", style = "margin: 0; color: #7f8c8d;")#
      )#
    )#
  })#
  # Main life grid visualization#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Color scheme based on theme#
    if (input$theme_mode == "Dark") {#
      colors <- list(#
        bg = "#2c3e50",#
        lived = "#ecf0f1",#
        remaining = "#34495e",#
        today = "#e74c3c",#
        milestone = "#f39c12"#
      )#
    } else {#
      colors <- list(#
        bg = "#ffffff",#
        lived = "#3498db",#
        remaining = "#ecf0f1",#
        today = "#e74c3c",#
        milestone = "#f39c12"#
      )#
    }#
    # Add milestone information#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- switch(input$granularity,#
                           "Days" = 365.25,#
                           "Weeks" = 52.18,#
                           "Months" = 12)#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    } else {#
      data$milestone <- FALSE#
    }#
    # Create the plot#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.1) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = colors$bg, color = NA),#
        panel.background = element_rect(fill = colors$bg, color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = subset(data, milestone), #
        fill = colors$milestone, #
        width = 0.9, height = 0.9,#
        color = "white", size = 0.2#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = subset(data, today), #
        fill = colors$today, #
        width = 0.9, height = 0.9,#
        color = "white", size = 0.3#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    # Clear inputs#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Check if milestones exist#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones %>%#
      mutate(#
        Date = format(date, "%Y-%m-%d"),#
        Age = round(as.numeric(difftime(date, input$dob, units = "days")) / 365.25, 1)#
      ) %>%#
      select(Event = name, Date, Age, Category = category) %>%#
      arrange(Date)#
    DT::datatable(#
      display_data,#
      options = list(#
        pageLength = 5,#
        dom = 't',#
        scrollX = TRUE#
      ),#
      rownames = FALSE#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    data <- boxes_data()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stats <- list(#
      paste("Current Age:", round(age, 2), "years"),#
      paste("Years Remaining:", round(life_exp - age, 2)),#
      paste("Total Units:", format(nrow(data), big.mark = ",")),#
      paste("Units per Year:", #
            switch(input$granularity, "Days" = 365, "Weeks" = 52, "Months" = 12)),#
      paste("Completion:", scales::percent(mean(data$lived), accuracy = 0.01))#
    )#
    div(#
      lapply(stats, function(stat) {#
        p(stat, style = "margin: 5px 0; font-size: 14px;")#
      })#
    )#
  })#
  # Current time display#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() {#
      paste0("life-calendar-", Sys.Date(), ".png")#
    },#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() {#
      paste0("life-data-", Sys.Date(), ".csv")#
    },#
    content = function(file) {#
      data <- boxes_data() %>%#
        mutate(#
          age_at_unit = as.numeric(difftime(date, input$dob, units = "days")) / 365.25,#
          granularity = input$granularity,#
          life_expectancy = life_expectancy()#
        )#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
# Modernized Life in Boxes - 2025 Design Trends#
# ============================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(plotly)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- tibble::tribble(#
  ~country, ~male, ~female, ~total,#
  "Malaysia", 74.1, 78.2, 76.2,#
  "Singapore", 81.2, 85.8, 83.5,#
  "Japan", 81.6, 87.6, 84.6,#
  "South Korea", 79.8, 85.7, 82.8,#
  "United States", 76.3, 81.2, 78.8,#
  "United Kingdom", 79.4, 82.9, 81.2,#
  "Australia", 81.2, 85.4, 83.3,#
  "Canada", 80.9, 84.7, 82.8,#
  "Germany", 78.9, 83.6, 81.3,#
  "France", 79.8, 85.6, 82.7#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-4px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.15);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  backdrop-filter: blur(10px);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  position: relative;#
  overflow: hidden;#
}#
#
.modern-progress-bar::after {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: -100%;#
  width: 100%;#
  height: 100%;#
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);#
  animation: shimmer 2s infinite;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
@keyframes shimmer {#
  0% { left: -100%; }#
  100% { left: 100%; }#
}#
#
/* Modern Life Grid */#
.life-box-modern {#
  border-radius: 6px;#
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);#
  cursor: pointer;#
  position: relative;#
  overflow: hidden;#
}#
#
.life-box-modern::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: -100%;#
  width: 100%;#
  height: 100%;#
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);#
  transition: left 0.5s;#
}#
#
.life-box-modern:hover::before {#
  left: 100%;#
}#
#
.life-box-modern:hover {#
  transform: scale(1.05);#
  z-index: 2;#
}#
#
/* Glassmorphism Sidebar */#
.modern-sidebar {#
  background: rgba(255, 255, 255, 0.85);#
  backdrop-filter: blur(20px);#
  border-right: 1px solid rgba(255, 255, 255, 0.2);#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
#
[data-bs-theme='dark'] .modern-sidebar {#
  background: rgba(20, 20, 20, 0.9);#
  backdrop-filter: blur(20px);#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (nrow(row) == 0) return(80)#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Days") {#
    total_units <- round(expected_age * 365.25)#
    n_cols <- 30#
    unit_dates <- seq.Date(start_date, by = "day", length.out = total_units)#
  } else if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  tibble(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    idx = row_number(),#
    row = (idx - 1) %/% n_cols + 1,#
    col = (idx - 1) %% n_cols + 1#
  )#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600"),#
  code_font = font_google("JetBrains Mono")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Life in Boxes - Modern Life Calendar",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      class = "modern-sidebar",#
      # Header with Icon#
      div(#
        class = "text-center mb-4",#
        style = "padding: 20px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Life Calendar", class = "mt-2", style = "font-weight: 600; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;")#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months", "Days"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      )#
    )#
  ),#
  # Dark Mode Toggle Script#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      const pulseIndicator = document.getElementById('pulse_indicator');#
      const currentIndicator = document.getElementById('current_indicator');#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block
# Modernized Life in Boxes - 2025 Design Trends#
# ============================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(plotly)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- tibble::tribble(#
  ~country, ~male, ~female, ~total,#
  "Malaysia", 74.1, 78.2, 76.2,#
  "Singapore", 81.2, 85.8, 83.5,#
  "Japan", 81.6, 87.6, 84.6,#
  "South Korea", 79.8, 85.7, 82.8,#
  "United States", 76.3, 81.2, 78.8,#
  "United Kingdom", 79.4, 82.9, 81.2,#
  "Australia", 81.2, 85.4, 83.3,#
  "Canada", 80.9, 84.7, 82.8,#
  "Germany", 78.9, 83.6, 81.3,#
  "France", 79.8, 85.6, 82.7#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-4px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.15);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  backdrop-filter: blur(10px);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  position: relative;#
  overflow: hidden;#
}#
#
.modern-progress-bar::after {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: -100%;#
  width: 100%;#
  height: 100%;#
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);#
  animation: shimmer 2s infinite;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
@keyframes shimmer {#
  0% { left: -100%; }#
  100% { left: 100%; }#
}#
#
/* Modern Life Grid */#
.life-box-modern {#
  border-radius: 6px;#
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);#
  cursor: pointer;#
  position: relative;#
  overflow: hidden;#
}#
#
.life-box-modern::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: -100%;#
  width: 100%;#
  height: 100%;#
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);#
  transition: left 0.5s;#
}#
#
.life-box-modern:hover::before {#
  left: 100%;#
}#
#
.life-box-modern:hover {#
  transform: scale(1.05);#
  z-index: 2;#
}#
#
/* Glassmorphism Sidebar */#
.modern-sidebar {#
  background: rgba(255, 255, 255, 0.85);#
  backdrop-filter: blur(20px);#
  border-right: 1px solid rgba(255, 255, 255, 0.2);#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
#
[data-bs-theme='dark'] .modern-sidebar {#
  background: rgba(20, 20, 20, 0.9);#
  backdrop-filter: blur(20px);#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (nrow(row) == 0) return(80)#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Days") {#
    total_units <- round(expected_age * 365.25)#
    n_cols <- 30#
    unit_dates <- seq.Date(start_date, by = "day", length.out = total_units)#
  } else if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  tibble(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    idx = row_number(),#
    row = (idx - 1) %/% n_cols + 1,#
    col = (idx - 1) %% n_cols + 1#
  )#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600"),#
  code_font = font_google("JetBrains Mono")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Life in Boxes - Modern Life Calendar",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      class = "modern-sidebar",#
      # Header with Icon#
      div(#
        class = "text-center mb-4",#
        style = "padding: 20px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Life Calendar", class = "mt-2", style = "font-weight: 600; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;")#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months", "Days"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      )#
    )#
  ),#
  # Dark Mode Toggle Script#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      const pulseIndicator = document.getElementById('pulse_indicator');#
      const currentIndicator = document.getElementById('current_indicator');#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block';#
        } else {#
          pulseIndicator.style.display = 'none';#
          currentIndicator.style.display = 'none';#
        }#
      }#
    });#
  "))#
)#
#
# Server Logic#
server <- function(input, output, session) {#
  # Reactive values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy#
  life_expectancy <- reactive({#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Boxes data#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Progress text#
  output$progress_text <- renderUI({#
    data <- boxes_data()#
    pct <- mean(data$lived) * 100#
    div(#
      class = "text-center",#
      h3(paste0(round(pct, 1), "%"), style = "font-weight: 700; margin: 0; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
      p("of your expected life has been lived", style = "color: #7f8c8d; margin: 0;")#
    )#
  })#
  # Modern value cards with gradients#
  output$age_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-primary",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(current_age(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Years Old", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-person-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-success",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(life_expectancy(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Life Expectancy", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-heart-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    data <- boxes_data()#
    lived_units <- sum(data$lived)#
    div(#
      class = "modern-value-box gradient-warning",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(lived_units, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Lived", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-check-circle-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    data <- boxes_data()#
    remaining_units <- sum(!data$lived)#
    div(#
      class = "modern-value-box gradient-info",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(remaining_units, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Remaining", style = "margin: 0;")#
        ),#
        tags$i(class = "bi bi-hourglass-split", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  # Life grid with modern styling#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Add milestone information#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- switch(input$granularity,#
                           "Days" = 365.25,#
                           "Weeks" = 52.18,#
                           "Months" = 12)#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    } else {#
      data$milestone <- FALSE#
    }#
    # Modern color palette#
    colors <- list(#
      lived = "#667eea",#
      remaining = "#e2e8f0",#
      today = "#e74c3c",#
      milestone = "#f39c12"#
    )#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = subset(data, milestone), #
        fill = colors$milestone, #
        width = 0.85, height = 0.85,#
        color = "white", size = 0.8#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = subset(data, today), #
        fill = colors$today, #
        width = 0.85, height = 0.85,#
        color = "white", size = 1#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification(#
      "Milestone added successfully!", #
      type = "success",#
      ui = div(#
        class = "d-flex align-items-center",#
        tags$i(class = "bi bi-check-circle-fill me-2"),#
        "Milestone added successfully!"#
      )#
    )#
  })#
  # Milestones existence check#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones %>%#
      mutate(#
        Date = format(date, "%Y-%m-%d"),#
        Age = round(as.numeric(difftime(date, input$dob, units = "days")) / 365.25, 1)#
      ) %>%#
      select(Event = name, Date, Age, Category = category) %>%#
      arrange(Date)#
    DT::datatable(#
      display_data,#
      options = list(#
        pageLength = 8,#
        dom = 't',#
        scrollX = TRUE,#
        columnDefs = list(#
          list(className = 'dt-center', targets = 1:3)#
        )#
      ),#
      rownames = FALSE,#
      class = "table table-striped table-hover"#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    data <- boxes_data()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stats_list <- list(#
      list(icon = "bi-calendar-check", label = "Current Age", value = paste(round(age, 2), "years"), color = "#667eea"),#
      list(icon = "bi-hourglass-split", label = "Years Remaining", value = round(life_exp - age, 2), color = "#4facfe"),#
      list(icon = "bi-grid-3x3", label = "Total Units", value = format(nrow(data), big.mark = ","), color = "#fa709a"),#
      list(icon = "bi-percent", label = "Completion", value = scales::percent(mean(data$lived), accuracy = 0.01), color = "#2ecc71")#
    )#
    div(#
      lapply(stats_list, function(stat) {#
        div(#
          class = "d-flex align-items-center p-3 mb-2",#
          style = paste0("background: linear-gradient(135deg, ", stat$color, "20, ", stat$color, "10); border-radius: 12px; border-left: 4px solid ", stat$color, ";"),#
          tags$i(class = paste("bi", stat$icon, "me-3"), style = paste0("color: ", stat$color, "; font-size: 1.2rem;")),#
          div(#
            div(stat$label, style = "font-size: 0.9rem; color: #7f8c8d;"),#
            div(stat$value, style = "font-weight: 600; color: #2c3e50;")#
          )#
        )#
      })#
    )#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() paste0("modern-life-calendar-", Sys.Date(), ".png"),#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#667eea", `FALSE` = "#e2e8f0"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() paste0("life-calendar-data-", Sys.Date(), ".csv"),#
    content = function(file) {#
      data <- boxes_data() %>%#
        mutate(#
          age_at_unit = as.numeric(difftime(date, input$dob, units = "days")) / 365.25,#
          granularity = input$granularity,#
          life_expectancy = life_expectancy()#
        )#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
# Modern Life in Boxes - Fixed Version (Weeks & Months Only)#
# ========================================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-2px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.12);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  transition: width 0.8s ease;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row_index <- which(life_expectancy_data$country == country)#
  if (length(row_index) == 0) return(80)#
  row <- life_expectancy_data[row_index, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52  # 52 weeks per row (1 year)#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else { # Months#
    total_units <- round(expected_age * 12)#
    n_cols <- 12  # 12 months per row (1 year)#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  # Create the data frame without using data-masking verbs initially#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    stringsAsFactors = FALSE#
  )#
  # Add calculated columns#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Life in Boxes - Modern Life Calendar",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      # Header with Icon#
      div(#
        class = "text-center mb-4",#
        style = "padding: 20px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Life Calendar", class = "mt-2", style = "font-weight: 600; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;")#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar", style = "width: 0%;")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      ),#
      # Real-time Display#
      conditionalPanel(#
        condition = "input.real_time == true",#
        div(#
          class = "modern-card mt-4",#
          style = "padding: 24px;",#
          div(#
            class = "text-center",#
            h4("Current Time:", style = "display: inline; margin-right: 15px; color: #2c3e50;"),#
            h4(textOutput("current_time", inline = TRUE), #
               style = "display: inline; color: #e74c3c; font-weight: 700;")#
          )#
        )#
      )#
    )#
  ),#
  # Scripts#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block';#
        } else {#
          pulseIndicator.style.display = 'none';#
          currentIndicator.style.display = 'none';#
        }#
      }#
    });#
    // Update progress bar#
    $(document).on('shiny:value', function(event) {#
      if (event.name === 'progress_percent') {#
        const progressBar = document.getElementById('main_progress_bar');#
        if (progressBar) {#
          progressBar.style.width = event.value + '%';#
        }#
      }#
    });#
  "))#
)#
#
# Server Logic#
server <- function(input, output, session) {#
  # Reactive values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Boxes data#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Progress calculations#
  progress_stats <- reactive({#
    data <- boxes_data()#
    total_units <- nrow(data)#
    lived_units <- sum(data$lived)#
    remaining_units <- total_units - lived_units#
    pct <- if (total_units > 0) (lived_units / total_units) * 100 else 0#
    list(#
      total = total_units,#
      lived = lived_units,#
      remaining = remaining_units,#
      percent = pct#
    )#
  })#
  # Update progress bar via JavaScript#
  observe({#
    stats <- progress_stats()#
    session$sendCustomMessage("shiny:value", list(name = "progress_percent", value = stats$percent))#
  })#
  # Progress text#
  output$progress_text <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "text-center",#
      h3(paste0(round(stats$percent, 1), "%"), #
         style = "font-weight: 700; margin: 0; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
      p("of your expected life has been lived", style = "color: #7f8c8d; margin: 0;")#
    )#
  })#
  # Modern value cards#
  output$age_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-primary",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(current_age(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Years Old", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-person-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-success",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(life_expectancy(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Life Expectancy", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-heart-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-warning",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$lived, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Lived", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-check-circle-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-info",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$remaining, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Remaining", style = "margin: 0;")#
        ),#
        tags$i(class = "bi bi-hourglass-split", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  # Life grid#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Add milestone information#
    data$milestone <- FALSE#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- if (input$granularity == "Weeks") 52.18 else 12#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    }#
    # Colors#
    colors <- list(#
      lived = "#667eea",#
      remaining = "#e2e8f0",#
      today = "#e74c3c",#
      milestone = "#f39c12"#
    )#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = data[data$milestone, ], #
        fill = colors$milestone, #
        width = 0.85, height = 0.85,#
        color = "white", size = 0.8#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = data[data$today, ], #
        fill = colors$today, #
        width = 0.85, height = 0.85,#
        color = "white", size = 1#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Milestones existence check#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones#
    display_data$Date <- format(display_data$date, "%Y-%m-%d")#
    display_data$Age <- round(as.numeric(difftime(display_data$date, input$dob, units = "days")) / 365.25, 1)#
    final_data <- data.frame(#
      Event = display_data$name,#
      Date = display_data$Date,#
      Age = display_data$Age,#
      Category = display_data$category,#
      stringsAsFactors = FALSE#
    )#
    final_data <- final_data[order(final_data$Date), ]#
    DT::datatable(#
      final_data,#
      options = list(#
        pageLength = 8,#
        dom = 't',#
        scrollX = TRUE#
      ),#
      rownames = FALSE#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    stats <- progress_stats()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stat_items <- list(#
      list(#
        icon = "bi-calendar-check",#
        label = "Current Age",#
        value = paste(round(age, 2), "years"),#
        color = "#667eea"#
      ),#
      list(#
        icon = "bi-hourglass-split",#
        label = "Years Remaining",#
        value = paste(round(life_exp - age, 2), "years"),#
        color = "#4facfe"#
      ),#
      list(#
        icon = "bi-grid-3x3",#
        label = "Total Units",#
        value = format(stats$total, big.mark = ","),#
        color = "#fa709a"#
      ),#
      list(#
        icon = "bi-percent",#
        label = "Completion",#
        value = paste0(round(stats$percent, 2), "%"),#
        color = "#2ecc71"#
      )#
    )#
    div(#
      lapply(stat_items, function(stat) {#
        div(#
          class = "d-flex align-items-center p-3 mb-2",#
          style = paste0("background: linear-gradient(135deg, ", stat$color, "20, ", stat$color, "10); border-radius: 12px; border-left: 4px solid ", stat$color, ";"),#
          tags$i(class = paste("bi", stat$icon, "me-3"), style = paste0("color: ", stat$color, "; font-size: 1.2rem;")),#
          div(#
            div(stat$label, style = "font-size: 0.9rem; color: #7f8c8d;"),#
            div(stat$value, style = "font-weight: 600; color: #2c3e50;")#
          )#
        )#
      })#
    )#
  })#
  # Current time#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() paste0("modern-life-calendar-", Sys.Date(), ".png"),#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#667eea", `FALSE` = "#e2e8f0"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() paste0("life-calendar-data-", Sys.Date(), ".csv"),#
    content = function(file) {#
      data <- boxes_data()#
      data$age_at_unit <- as.numeric(difftime(data$date, input$dob, units = "days")) / 365.25#
      data$granularity <- input$granularity#
      data$life_expectancy <- life_expectancy()#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
# Modern Life in Boxes - Fixed Version (Weeks & Months Only)#
# ========================================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-2px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.12);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  transition: width 0.8s ease;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Memento Mori Quote Styling */#
.memento-mori-quote {#
  background: linear-gradient(135deg, rgba(52, 73, 94, 0.95), rgba(44, 62, 80, 0.95));#
  border-radius: 16px;#
  padding: 24px;#
  margin: 20px 0;#
  border-left: 4px solid #e67e22;#
  position: relative;#
  overflow: hidden;#
}#
#
.memento-mori-quote::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  width: 100%;#
  height: 1px;#
  background: linear-gradient(90deg, transparent, rgba(230, 126, 34, 0.6), transparent);#
}#
#
.memento-mori-quote blockquote {#
  color: #ecf0f1;#
  font-size: 1rem;#
  line-height: 1.6;#
  margin: 0;#
  font-style: italic;#
  position: relative;#
}#
#
.memento-mori-quote blockquote::before {#
  content: '"';#
  font-size: 3rem;#
  color: #e67e22;#
  position: absolute;#
  left: -15px;#
  top: -10px;#
  font-family: serif;#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
#
[data-bs-theme='dark'] .memento-mori-quote {#
  background: linear-gradient(135deg, rgba(26, 35, 44, 0.95), rgba(20, 28, 36, 0.95));#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row_index <- which(life_expectancy_data$country == country)#
  if (length(row_index) == 0) return(80)#
  row <- life_expectancy_data[row_index, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52  # 52 weeks per row (1 year)#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else { # Months#
    total_units <- round(expected_age * 12)#
    n_cols <- 12  # 12 months per row (1 year)#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  # Create the data frame without using data-masking verbs initially#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    stringsAsFactors = FALSE#
  )#
  # Add calculated columns#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Memento Mori - Life in Boxes",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      # Header with Icon and Memento Mori Quote#
      div(#
        class = "text-center mb-3",#
        style = "padding: 20px 0 10px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Memento Mori", class = "mt-2 mb-1", style = "font-weight: 700; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
        h5("Life in Boxes", class = "mb-0", style = "font-weight: 400; color: #7f8c8d;")#
      ),#
      # Memento Mori Quote#
      div(#
        class = "memento-mori-quote mb-4",#
        blockquote(#
          "I built the Memento Mori mini app to make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar", style = "width: 0%;")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      ),#
      # Real-time Display#
      conditionalPanel(#
        condition = "input.real_time == true",#
        div(#
          class = "modern-card mt-4",#
          style = "padding: 24px;",#
          div(#
            class = "text-center",#
            h4("Current Time:", style = "display: inline; margin-right: 15px; color: #2c3e50;"),#
            h4(textOutput("current_time", inline = TRUE), #
               style = "display: inline; color: #e74c3c; font-weight: 700;")#
          )#
        )#
      )#
    )#
  ),#
  # Scripts#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block';#
        } else {#
          pulseIndicator.style.display = 'none';#
          currentIndicator.style.display = 'none';#
        }#
      }#
    });#
    // Update progress bar#
    $(document).on('shiny:value', function(event) {#
      if (event.name === 'progress_percent') {#
        const progressBar = document.getElementById('main_progress_bar');#
        if (progressBar) {#
          progressBar.style.width = event.value + '%';#
        }#
      }#
    });#
  "))#
)#
#
# Server Logic (unchanged from previous version)#
server <- function(input, output, session) {#
  # Reactive values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Boxes data#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Progress calculations#
  progress_stats <- reactive({#
    data <- boxes_data()#
    total_units <- nrow(data)#
    lived_units <- sum(data$lived)#
    remaining_units <- total_units - lived_units#
    pct <- if (total_units > 0) (lived_units / total_units) * 100 else 0#
    list(#
      total = total_units,#
      lived = lived_units,#
      remaining = remaining_units,#
      percent = pct#
    )#
  })#
  # Update progress bar via JavaScript#
  observe({#
    stats <- progress_stats()#
    session$sendCustomMessage("shiny:value", list(name = "progress_percent", value = stats$percent))#
  })#
  # Progress text#
  output$progress_text <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "text-center",#
      h3(paste0(round(stats$percent, 1), "%"), #
         style = "font-weight: 700; margin: 0; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
      p("of your expected life has been lived", style = "color: #7f8c8d; margin: 0;")#
    )#
  })#
  # Modern value cards#
  output$age_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-primary",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(current_age(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Years Old", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-person-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-success",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(life_expectancy(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Life Expectancy", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-heart-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-warning",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$lived, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Lived", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-check-circle-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-info",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$remaining, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Remaining", style = "margin: 0;")#
        ),#
        tags$i(class = "bi bi-hourglass-split", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  # Life grid#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Add milestone information#
    data$milestone <- FALSE#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- if (input$granularity == "Weeks") 52.18 else 12#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    }#
    # Colors#
    colors <- list(#
      lived = "#667eea",#
      remaining = "#e2e8f0",#
      today = "#e74c3c",#
      milestone = "#f39c12"#
    )#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = data[data$milestone, ], #
        fill = colors$milestone, #
        width = 0.85, height = 0.85,#
        color = "white", size = 0.8#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = data[data$today, ], #
        fill = colors$today, #
        width = 0.85, height = 0.85,#
        color = "white", size = 1#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Milestones existence check#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones#
    display_data$Date <- format(display_data$date, "%Y-%m-%d")#
    display_data$Age <- round(as.numeric(difftime(display_data$date, input$dob, units = "days")) / 365.25, 1)#
    final_data <- data.frame(#
      Event = display_data$name,#
      Date = display_data$Date,#
      Age = display_data$Age,#
      Category = display_data$category,#
      stringsAsFactors = FALSE#
    )#
    final_data <- final_data[order(final_data$Date), ]#
    DT::datatable(#
      final_data,#
      options = list(#
        pageLength = 8,#
        dom = 't',#
        scrollX = TRUE#
      ),#
      rownames = FALSE#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    stats <- progress_stats()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stat_items <- list(#
      list(#
        icon = "bi-calendar-check",#
        label = "Current Age",#
        value = paste(round(age, 2), "years"),#
        color = "#667eea"#
      ),#
      list(#
        icon = "bi-hourglass-split",#
        label = "Years Remaining",#
        value = paste(round(life_exp - age, 2), "years"),#
        color = "#4facfe"#
      ),#
      list(#
        icon = "bi-grid-3x3",#
        label = "Total Units",#
        value = format(stats$total, big.mark = ","),#
        color = "#fa709a"#
      ),#
      list(#
        icon = "bi-percent",#
        label = "Completion",#
        value = paste0(round(stats$percent, 2), "%"),#
        color = "#2ecc71"#
      )#
    )#
    div(#
      lapply(stat_items, function(stat) {#
        div(#
          class = "d-flex align-items-center p-3 mb-2",#
          style = paste0("background: linear-gradient(135deg, ", stat$color, "20, ", stat$color, "10); border-radius: 12px; border-left: 4px solid ", stat$color, ";"),#
          tags$i(class = paste("bi", stat$icon, "me-3"), style = paste0("color: ", stat$color, "; font-size: 1.2rem;")),#
          div(#
            div(stat$label, style = "font-size: 0.9rem; color: #7f8c8d;"),#
            div(stat$value, style = "font-weight: 600; color: #2c3e50;")#
          )#
        )#
      })#
    )#
  })#
  # Current time#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() paste0("memento-mori-life-calendar-", Sys.Date(), ".png"),#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#667eea", `FALSE` = "#e2e8f0"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() paste0("memento-mori-data-", Sys.Date(), ".csv"),#
    content = function(file) {#
      data <- boxes_data()#
      data$age_at_unit <- as.numeric(difftime(data$date, input$dob, units = "days")) / 365.25#
      data$granularity <- input$granularity#
      data$life_expectancy <- life_expectancy()#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
# Modern Life in Boxes - Fixed Version (Weeks & Months Only)#
# ========================================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-2px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.12);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  transition: width 0.8s ease;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row_index <- which(life_expectancy_data$country == country)#
  if (length(row_index) == 0) return(80)#
  row <- life_expectancy_data[row_index, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52  # 52 weeks per row (1 year)#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else { # Months#
    total_units <- round(expected_age * 12)#
    n_cols <- 12  # 12 months per row (1 year)#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  # Create the data frame without using data-masking verbs initially#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    stringsAsFactors = FALSE#
  )#
  # Add calculated columns#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Life in Boxes - Modern Life Calendar",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      # Header with Icon#
      div(#
        class = "text-center mb-4",#
        style = "padding: 20px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Life Calendar", class = "mt-2", style = "font-weight: 600; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;")#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar", style = "width: 0%;")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      ),#
      # Real-time Display#
      conditionalPanel(#
        condition = "input.real_time == true",#
        div(#
          class = "modern-card mt-4",#
          style = "padding: 24px;",#
          div(#
            class = "text-center",#
            h4("Current Time:", style = "display: inline; margin-right: 15px; color: #2c3e50;"),#
            h4(textOutput("current_time", inline = TRUE), #
               style = "display: inline; color: #e74c3c; font-weight: 700;")#
          )#
        )#
      )#
    )#
  ),#
  # Scripts#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block';#
        } else {#
          pulseIndicator.style.display = 'none';#
          currentIndicator.style.display = 'none';#
        }#
      }#
    });#
    // Update progress bar#
    $(document).on('shiny:value', function(event) {#
      if (event.name === 'progress_percent') {#
        const progressBar = document.getElementById('main_progress_bar');#
        if (progressBar) {#
          progressBar.style.width = event.value + '%';#
        }#
      }#
    });#
  "))#
)#
#
# Server Logic#
server <- function(input, output, session) {#
  # Reactive values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Boxes data#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Progress calculations#
  progress_stats <- reactive({#
    data <- boxes_data()#
    total_units <- nrow(data)#
    lived_units <- sum(data$lived)#
    remaining_units <- total_units - lived_units#
    pct <- if (total_units > 0) (lived_units / total_units) * 100 else 0#
    list(#
      total = total_units,#
      lived = lived_units,#
      remaining = remaining_units,#
      percent = pct#
    )#
  })#
  # Update progress bar via JavaScript#
  observe({#
    stats <- progress_stats()#
    session$sendCustomMessage("shiny:value", list(name = "progress_percent", value = stats$percent))#
  })#
  # Progress text#
  output$progress_text <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "text-center",#
      h3(paste0(round(stats$percent, 1), "%"), #
         style = "font-weight: 700; margin: 0; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
      p("of your expected life has been lived", style = "color: #7f8c8d; margin: 0;")#
    )#
  })#
  # Modern value cards#
  output$age_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-primary",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(current_age(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Years Old", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-person-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-success",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(life_expectancy(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Life Expectancy", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-heart-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-warning",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$lived, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Lived", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-check-circle-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-info",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$remaining, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Remaining", style = "margin: 0;")#
        ),#
        tags$i(class = "bi bi-hourglass-split", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  # Life grid#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Add milestone information#
    data$milestone <- FALSE#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- if (input$granularity == "Weeks") 52.18 else 12#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    }#
    # Colors#
    colors <- list(#
      lived = "#667eea",#
      remaining = "#e2e8f0",#
      today = "#e74c3c",#
      milestone = "#f39c12"#
    )#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = data[data$milestone, ], #
        fill = colors$milestone, #
        width = 0.85, height = 0.85,#
        color = "white", size = 0.8#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = data[data$today, ], #
        fill = colors$today, #
        width = 0.85, height = 0.85,#
        color = "white", size = 1#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Milestones existence check#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones#
    display_data$Date <- format(display_data$date, "%Y-%m-%d")#
    display_data$Age <- round(as.numeric(difftime(display_data$date, input$dob, units = "days")) / 365.25, 1)#
    final_data <- data.frame(#
      Event = display_data$name,#
      Date = display_data$Date,#
      Age = display_data$Age,#
      Category = display_data$category,#
      stringsAsFactors = FALSE#
    )#
    final_data <- final_data[order(final_data$Date), ]#
    DT::datatable(#
      final_data,#
      options = list(#
        pageLength = 8,#
        dom = 't',#
        scrollX = TRUE#
      ),#
      rownames = FALSE#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    stats <- progress_stats()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stat_items <- list(#
      list(#
        icon = "bi-calendar-check",#
        label = "Current Age",#
        value = paste(round(age, 2), "years"),#
        color = "#667eea"#
      ),#
      list(#
        icon = "bi-hourglass-split",#
        label = "Years Remaining",#
        value = paste(round(life_exp - age, 2), "years"),#
        color = "#4facfe"#
      ),#
      list(#
        icon = "bi-grid-3x3",#
        label = "Total Units",#
        value = format(stats$total, big.mark = ","),#
        color = "#fa709a"#
      ),#
      list(#
        icon = "bi-percent",#
        label = "Completion",#
        value = paste0(round(stats$percent, 2), "%"),#
        color = "#2ecc71"#
      )#
    )#
    div(#
      lapply(stat_items, function(stat) {#
        div(#
          class = "d-flex align-items-center p-3 mb-2",#
          style = paste0("background: linear-gradient(135deg, ", stat$color, "20, ", stat$color, "10); border-radius: 12px; border-left: 4px solid ", stat$color, ";"),#
          tags$i(class = paste("bi", stat$icon, "me-3"), style = paste0("color: ", stat$color, "; font-size: 1.2rem;")),#
          div(#
            div(stat$label, style = "font-size: 0.9rem; color: #7f8c8d;"),#
            div(stat$value, style = "font-weight: 600; color: #2c3e50;")#
          )#
        )#
      })#
    )#
  })#
  # Current time#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() paste0("modern-life-calendar-", Sys.Date(), ".png"),#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#667eea", `FALSE` = "#e2e8f0"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() paste0("life-calendar-data-", Sys.Date(), ".csv"),#
    content = function(file) {#
      data <- boxes_data()#
      data$age_at_unit <- as.numeric(difftime(data$date, input$dob, units = "days")) / 365.25#
      data$granularity <- input$granularity#
      data$life_expectancy <- life_expectancy()#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
# Modern Life in Boxes - Fixed Version (Weeks & Months Only)#
# ========================================================#
library(shiny)#
library(bslib)#
library(dplyr)#
library(tidyr)#
library(lubridate)#
library(ggplot2)#
library(scales)#
library(DT)#
library(htmltools)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
# Modern Custom CSS#
modern_css <- "#
/* Modern Card Hover Effects */#
.modern-card {#
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);#
  border: none;#
  border-radius: 16px;#
  box-shadow: 0 2px 20px rgba(0,0,0,0.08);#
  backdrop-filter: blur(10px);#
}#
#
.modern-card:hover {#
  transform: translateY(-2px);#
  box-shadow: 0 8px 40px rgba(0,0,0,0.12);#
}#
#
/* Gradient Backgrounds */#
.gradient-primary {#
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
  color: white;#
}#
#
.gradient-success {#
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);#
  color: white;#
}#
#
.gradient-warning {#
  background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);#
  color: white;#
}#
#
.gradient-info {#
  background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);#
  color: #2c3e50;#
}#
#
/* Modern Progress Bar */#
.modern-progress {#
  height: 12px;#
  border-radius: 12px;#
  background: rgba(255,255,255,0.2);#
  overflow: hidden;#
  position: relative;#
}#
#
.modern-progress-bar {#
  height: 100%;#
  border-radius: 12px;#
  background: linear-gradient(90deg, #667eea, #764ba2, #4facfe);#
  background-size: 200% 100%;#
  animation: gradientShift 3s ease infinite;#
  transition: width 0.8s ease;#
}#
#
@keyframes gradientShift {#
  0% { background-position: 0% 50%; }#
  50% { background-position: 100% 50%; }#
  100% { background-position: 0% 50%; }#
}#
#
/* Modern Value Box */#
.modern-value-box {#
  border-radius: 20px;#
  padding: 24px;#
  position: relative;#
  overflow: hidden;#
  border: 1px solid rgba(255,255,255,0.2);#
}#
#
.modern-value-box::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  right: 0;#
  height: 3px;#
  background: linear-gradient(90deg, #667eea, #764ba2);#
}#
#
/* Pulse Animation */#
.pulse-dot {#
  width: 12px;#
  height: 12px;#
  border-radius: 50%;#
  background: #e74c3c;#
  animation: pulse 2s infinite;#
}#
#
@keyframes pulse {#
  0% { transform: scale(1); opacity: 1; }#
  50% { transform: scale(1.2); opacity: 0.7; }#
  100% { transform: scale(1); opacity: 1; }#
}#
#
/* Memento Mori Quote Styling */#
.memento-mori-quote {#
  background: linear-gradient(135deg, rgba(52, 73, 94, 0.95), rgba(44, 62, 80, 0.95));#
  border-radius: 16px;#
  padding: 24px;#
  margin: 20px 0;#
  border-left: 4px solid #e67e22;#
  position: relative;#
  overflow: hidden;#
}#
#
.memento-mori-quote::before {#
  content: '';#
  position: absolute;#
  top: 0;#
  left: 0;#
  width: 100%;#
  height: 1px;#
  background: linear-gradient(90deg, transparent, rgba(230, 126, 34, 0.6), transparent);#
}#
#
.memento-mori-quote blockquote {#
  color: #ecf0f1;#
  font-size: 1rem;#
  line-height: 1.6;#
  margin: 0;#
  font-style: italic;#
  position: relative;#
}#
#
.memento-mori-quote blockquote::before {#
  content: '"';#
  font-size: 3rem;#
  color: #e67e22;#
  position: absolute;#
  left: -15px;#
  top: -10px;#
  font-family: serif;#
}#
#
/* Dark Mode Styles */#
[data-bs-theme='dark'] .modern-card {#
  background: rgba(30, 30, 30, 0.8);#
  backdrop-filter: blur(20px);#
  border: 1px solid rgba(255, 255, 255, 0.1);#
}#
#
[data-bs-theme='dark'] .memento-mori-quote {#
  background: linear-gradient(135deg, rgba(26, 35, 44, 0.95), rgba(20, 28, 36, 0.95));#
}#
"#
#
# Helper functions#
get_life_expectancy <- function(country, sex) {#
  row_index <- which(life_expectancy_data$country == country)#
  if (length(row_index) == 0) return(80)#
  row <- life_expectancy_data[row_index, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52  # 52 weeks per row (1 year)#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else { # Months#
    total_units <- round(expected_age * 12)#
    n_cols <- 12  # 12 months per row (1 year)#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  # Create the data frame without using data-masking verbs initially#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date(),#
    stringsAsFactors = FALSE#
  )#
  # Add calculated columns#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
# Modern Theme#
modern_theme <- bs_theme(#
  version = 5,#
  bg = "#f8fafc",#
  fg = "#1a202c",#
  primary = "#667eea",#
  secondary = "#764ba2",#
  success = "#4facfe",#
  info = "#a8edea",#
  warning = "#fa709a",#
  danger = "#e74c3c",#
  base_font = font_google("Inter"),#
  heading_font = font_google("Inter", wght = "600")#
) |> bs_add_rules(modern_css)#
#
# UI Definition#
ui <- page_fillable(#
  theme = modern_theme,#
  title = "Memento Mori - Life in Boxes",#
  tags$head(#
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1"),#
    tags$link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css")#
  ),#
  layout_sidebar(#
    sidebar = sidebar(#
      width = 380,#
      # Header with Icon and Memento Mori Quote#
      div(#
        class = "text-center mb-3",#
        style = "padding: 20px 0 10px 0;",#
        tags$i(class = "bi bi-calendar-heart", style = "font-size: 2.5rem; color: #667eea;"),#
        h3("Memento Mori", class = "mt-2 mb-1", style = "font-weight: 700; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
        h5("Life in Boxes", class = "mb-0", style = "font-weight: 400; color: #7f8c8d;")#
      ),#
      # Memento Mori Quote#
      div(#
        class = "memento-mori-quote mb-4",#
        blockquote(#
          "I built the Memento Mori mini app to make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      # Personal Information#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-person-circle me-2", style = "color: #667eea; font-size: 1.2rem;"),#
          h5("Personal Information", class = "mb-0", style = "font-weight: 600;")#
        ),#
        dateInput("dob", "Date of Birth:", #
                 value = as.Date("1990-01-01"), #
                 max = Sys.Date()),#
        selectInput("country", "Country:", #
                   choices = sort(life_expectancy_data$country), #
                   selected = "Malaysia"),#
        radioButtons("sex", "Gender:", #
                    choices = c("Male", "Female", "Total"), #
                    selected = "Total", #
                    inline = TRUE)#
      ),#
      # Display Options#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-gear-fill me-2", style = "color: #4facfe; font-size: 1.2rem;"),#
          h5("Display Options", class = "mb-0", style = "font-weight: 600;")#
        ),#
        radioButtons("granularity", "Time Granularity:", #
                    choices = c("Weeks", "Months"), #
                    selected = "Weeks", #
                    inline = TRUE),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          div(#
            checkboxInput("real_time", "Real-time Updates", FALSE, width = "auto"),#
            class = "flex-grow-1"#
          ),#
          div(#
            class = "pulse-dot",#
            id = "pulse_indicator",#
            style = "display: none;"#
          )#
        ),#
        conditionalPanel(#
          condition = "input.real_time == true",#
          numericInput("update_interval", "Update Interval (seconds):",#
                      min = 1, max = 60, value = 5)#
        )#
      ),#
      # Theme Toggle#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-palette-fill me-2", style = "color: #fa709a; font-size: 1.2rem;"),#
          h5("Appearance", class = "mb-0", style = "font-weight: 600;")#
        ),#
        div(#
          class = "d-flex align-items-center justify-content-between",#
          span("Light Mode"),#
          div(#
            class = "form-check form-switch",#
            tags$input(#
              class = "form-check-input",#
              type = "checkbox",#
              id = "dark_mode_toggle",#
              onchange = "toggleDarkMode()"#
            )#
          ),#
          span("Dark Mode")#
        )#
      ),#
      # Milestones#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-star-fill me-2", style = "color: #fee140; font-size: 1.2rem;"),#
          h5("Add Milestone", class = "mb-0", style = "font-weight: 600;")#
        ),#
        textInput("milestone_name", "Event Name:", #
                 placeholder = "e.g., Graduation"),#
        dateInput("milestone_date", "Event Date:", value = Sys.Date()),#
        selectInput("milestone_category", "Category:",#
                   choices = c("Education", "Career", "Personal", #
                             "Health", "Travel", "Family", "Other")),#
        actionButton("add_milestone", "Add Milestone", #
                    class = "btn w-100",#
                    style = "background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      ),#
      # Export#
      div(#
        class = "modern-card",#
        style = "padding: 24px;",#
        div(#
          class = "d-flex align-items-center mb-3",#
          tags$i(class = "bi bi-download me-2", style = "color: #2ecc71; font-size: 1.2rem;"),#
          h5("Export", class = "mb-0", style = "font-weight: 600;")#
        ),#
        downloadButton("download_png", "Download PNG", #
                      class = "btn w-100 mb-2",#
                      style = "background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border: none; border-radius: 12px; padding: 12px; font-weight: 600;"),#
        downloadButton("download_data", "Download Data", #
                      class = "btn w-100",#
                      style = "background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; border: none; border-radius: 12px; padding: 12px; font-weight: 600;")#
      )#
    ),#
    # Main Content#
    div(#
      # Progress Section#
      div(#
        class = "modern-card mb-4",#
        style = "padding: 32px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));",#
        div(#
          class = "text-center mb-4",#
          h2("Life Progress", style = "font-weight: 600; color: #2c3e50;"),#
          p("Your journey through time", style = "color: #7f8c8d; font-size: 1.1rem;")#
        ),#
        div(#
          class = "modern-progress mb-3",#
          div(class = "modern-progress-bar", id = "main_progress_bar", style = "width: 0%;")#
        ),#
        uiOutput("progress_text", class = "text-center")#
      ),#
      # Statistics Cards#
      div(#
        class = "row g-4 mb-4",#
        div(class = "col-md-3", uiOutput("age_card")),#
        div(class = "col-md-3", uiOutput("expect_card")),#
        div(class = "col-md-3", uiOutput("lived_card")),#
        div(class = "col-md-3", uiOutput("remaining_card"))#
      ),#
      # Main Content Row#
      div(#
        class = "row g-4",#
        div(#
          class = "col-lg-8",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center justify-content-between mb-3",#
              div(#
                h4("Life Visualization", style = "font-weight: 600; margin: 0;"),#
                p("Each box represents a unit of your life", class = "mb-0", style = "color: #7f8c8d;")#
              ),#
              div(#
                id = "current_indicator",#
                style = "display: none;",#
                span(class = "badge", style = "background: linear-gradient(135deg, #e74c3c, #c0392b); padding: 8px 16px; border-radius: 20px;", "LIVE")#
              )#
            ),#
            div(#
              style = "height: calc(70vh - 120px); overflow: auto; border-radius: 12px; background: rgba(248, 250, 252, 0.5);",#
              plotOutput("life_grid", #
                        height = "100%",#
                        hover = "grid_hover",#
                        click = "grid_click")#
            )#
          )#
        ),#
        div(#
          class = "col-lg-4",#
          div(#
            class = "modern-card",#
            style = "padding: 24px; height: 70vh;",#
            div(#
              class = "d-flex align-items-center mb-3",#
              tags$i(class = "bi bi-calendar-event me-2", style = "color: #667eea; font-size: 1.2rem;"),#
              h4("Milestones & Stats", style = "font-weight: 600; margin: 0;")#
            ),#
            div(#
              style = "height: calc(70vh - 100px); overflow: auto;",#
              conditionalPanel(#
                condition = "output.has_milestones",#
                h5("Your Milestones:", style = "color: #4facfe; font-weight: 600;"),#
                DT::dataTableOutput("milestones_table")#
              ),#
              conditionalPanel(#
                condition = "!output.has_milestones",#
                div(#
                  class = "text-center",#
                  style = "margin-top: 100px; color: #bdc3c7;",#
                  tags$i(class = "bi bi-calendar-plus", style = "font-size: 4rem; margin-bottom: 20px; display: block;"),#
                  h5("No milestones yet", style = "color: #7f8c8d;"),#
                  p("Add important life events to track your journey!")#
                )#
              ),#
              hr(style = "margin: 24px 0;"),#
              h5("Statistics:", style = "color: #4facfe; font-weight: 600;"),#
              uiOutput("detailed_stats")#
            )#
          )#
        )#
      ),#
      # Real-time Display#
      conditionalPanel(#
        condition = "input.real_time == true",#
        div(#
          class = "modern-card mt-4",#
          style = "padding: 24px;",#
          div(#
            class = "text-center",#
            h4("Current Time:", style = "display: inline; margin-right: 15px; color: #2c3e50;"),#
            h4(textOutput("current_time", inline = TRUE), #
               style = "display: inline; color: #e74c3c; font-weight: 700;")#
          )#
        )#
      )#
    )#
  ),#
  # Scripts#
  tags$script(HTML("#
    function toggleDarkMode() {#
      const toggle = document.getElementById('dark_mode_toggle');#
      const html = document.documentElement;#
      if (toggle.checked) {#
        html.setAttribute('data-bs-theme', 'dark');#
      } else {#
        html.setAttribute('data-bs-theme', 'light');#
      }#
    }#
    // Show/hide real-time indicators#
    $(document).on('shiny:inputchanged', function(event) {#
      if (event.name === 'real_time') {#
        const pulseIndicator = document.getElementById('pulse_indicator');#
        const currentIndicator = document.getElementById('current_indicator');#
        if (event.value) {#
          pulseIndicator.style.display = 'block';#
          currentIndicator.style.display = 'block';#
        } else {#
          pulseIndicator.style.display = 'none';#
          currentIndicator.style.display = 'none';#
        }#
      }#
    });#
    // Update progress bar#
    $(document).on('shiny:value', function(event) {#
      if (event.name === 'progress_percent') {#
        const progressBar = document.getElementById('main_progress_bar');#
        if (progressBar) {#
          progressBar.style.width = event.value + '%';#
        }#
      }#
    });#
  "))#
)#
#
# Server Logic (unchanged from previous version)#
server <- function(input, output, session) {#
  # Reactive values#
  values <- reactiveValues(#
    milestones = data.frame(#
      name = character(),#
      date = as.Date(character()),#
      category = character(),#
      stringsAsFactors = FALSE#
    ),#
    current_time = Sys.time()#
  )#
  # Real-time updates#
  observe({#
    if (input$real_time) {#
      invalidateLater(input$update_interval * 1000, session)#
      values$current_time <- Sys.time()#
    }#
  })#
  # Life expectancy#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  # Current age#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(values$current_time, input$dob, units = "days")) / 365.25#
  })#
  # Boxes data#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Progress calculations#
  progress_stats <- reactive({#
    data <- boxes_data()#
    total_units <- nrow(data)#
    lived_units <- sum(data$lived)#
    remaining_units <- total_units - lived_units#
    pct <- if (total_units > 0) (lived_units / total_units) * 100 else 0#
    list(#
      total = total_units,#
      lived = lived_units,#
      remaining = remaining_units,#
      percent = pct#
    )#
  })#
  # Update progress bar via JavaScript#
  observe({#
    stats <- progress_stats()#
    session$sendCustomMessage("shiny:value", list(name = "progress_percent", value = stats$percent))#
  })#
  # Progress text#
  output$progress_text <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "text-center",#
      h3(paste0(round(stats$percent, 1), "%"), #
         style = "font-weight: 700; margin: 0; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;"),#
      p("of your expected life has been lived", style = "color: #7f8c8d; margin: 0;")#
    )#
  })#
  # Modern value cards#
  output$age_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-primary",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(current_age(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Years Old", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-person-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$expect_card <- renderUI({#
    div(#
      class = "modern-value-box gradient-success",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(round(life_expectancy(), 1), style = "font-weight: 700; margin: 0;"),#
          p("Life Expectancy", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-heart-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$lived_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-warning",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$lived, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Lived", style = "margin: 0; opacity: 0.9;")#
        ),#
        tags$i(class = "bi bi-check-circle-fill", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  output$remaining_card <- renderUI({#
    stats <- progress_stats()#
    div(#
      class = "modern-value-box gradient-info",#
      div(#
        class = "d-flex align-items-center justify-content-between",#
        div(#
          h3(format(stats$remaining, big.mark = ","), style = "font-weight: 700; margin: 0;"),#
          p("Units Remaining", style = "margin: 0;")#
        ),#
        tags$i(class = "bi bi-hourglass-split", style = "font-size: 2.5rem; opacity: 0.3;")#
      )#
    )#
  })#
  # Life grid#
  output$life_grid <- renderPlot({#
    data <- boxes_data()#
    # Add milestone information#
    data$milestone <- FALSE#
    if (nrow(values$milestones) > 0) {#
      milestone_units <- sapply(values$milestones$date, function(d) {#
        age_at_milestone <- as.numeric(difftime(d, input$dob, units = "days")) / 365.25#
        multiplier <- if (input$granularity == "Weeks") 52.18 else 12#
        round(age_at_milestone * multiplier)#
      })#
      data$milestone <- data$idx %in% milestone_units#
    }#
    # Colors#
    colors <- list(#
      lived = "#667eea",#
      remaining = "#e2e8f0",#
      today = "#e74c3c",#
      milestone = "#f39c12"#
    )#
    p <- ggplot(data, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c(`TRUE` = colors$lived, `FALSE` = colors$remaining),#
        guide = "none"#
      ) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_equal()#
    # Add milestone markers#
    if (any(data$milestone)) {#
      p <- p + geom_tile(#
        data = data[data$milestone, ], #
        fill = colors$milestone, #
        width = 0.85, height = 0.85,#
        color = "white", size = 0.8#
      )#
    }#
    # Add today marker#
    if (any(data$today)) {#
      p <- p + geom_tile(#
        data = data[data$today, ], #
        fill = colors$today, #
        width = 0.85, height = 0.85,#
        color = "white", size = 1#
      )#
    }#
    p#
  })#
  # Milestone management#
  observeEvent(input$add_milestone, {#
    req(input$milestone_name, input$milestone_date)#
    new_milestone <- data.frame(#
      name = input$milestone_name,#
      date = input$milestone_date,#
      category = input$milestone_category,#
      stringsAsFactors = FALSE#
    )#
    values$milestones <- rbind(values$milestones, new_milestone)#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added successfully!", type = "success")#
  })#
  # Milestones existence check#
  output$has_milestones <- reactive({#
    nrow(values$milestones) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  # Milestones table#
  output$milestones_table <- DT::renderDataTable({#
    req(nrow(values$milestones) > 0)#
    display_data <- values$milestones#
    display_data$Date <- format(display_data$date, "%Y-%m-%d")#
    display_data$Age <- round(as.numeric(difftime(display_data$date, input$dob, units = "days")) / 365.25, 1)#
    final_data <- data.frame(#
      Event = display_data$name,#
      Date = display_data$Date,#
      Age = display_data$Age,#
      Category = display_data$category,#
      stringsAsFactors = FALSE#
    )#
    final_data <- final_data[order(final_data$Date), ]#
    DT::datatable(#
      final_data,#
      options = list(#
        pageLength = 8,#
        dom = 't',#
        scrollX = TRUE#
      ),#
      rownames = FALSE#
    )#
  })#
  # Detailed statistics#
  output$detailed_stats <- renderUI({#
    stats <- progress_stats()#
    age <- current_age()#
    life_exp <- life_expectancy()#
    stat_items <- list(#
      list(#
        icon = "bi-calendar-check",#
        label = "Current Age",#
        value = paste(round(age, 2), "years"),#
        color = "#667eea"#
      ),#
      list(#
        icon = "bi-hourglass-split",#
        label = "Years Remaining",#
        value = paste(round(life_exp - age, 2), "years"),#
        color = "#4facfe"#
      ),#
      list(#
        icon = "bi-grid-3x3",#
        label = "Total Units",#
        value = format(stats$total, big.mark = ","),#
        color = "#fa709a"#
      ),#
      list(#
        icon = "bi-percent",#
        label = "Completion",#
        value = paste0(round(stats$percent, 2), "%"),#
        color = "#2ecc71"#
      )#
    )#
    div(#
      lapply(stat_items, function(stat) {#
        div(#
          class = "d-flex align-items-center p-3 mb-2",#
          style = paste0("background: linear-gradient(135deg, ", stat$color, "20, ", stat$color, "10); border-radius: 12px; border-left: 4px solid ", stat$color, ";"),#
          tags$i(class = paste("bi", stat$icon, "me-3"), style = paste0("color: ", stat$color, "; font-size: 1.2rem;")),#
          div(#
            div(stat$label, style = "font-size: 0.9rem; color: #7f8c8d;"),#
            div(stat$value, style = "font-weight: 600; color: #2c3e50;")#
          )#
        )#
      })#
    )#
  })#
  # Current time#
  output$current_time <- renderText({#
    format(values$current_time, "%Y-%m-%d %H:%M:%S")#
  })#
  # Download handlers#
  output$download_png <- downloadHandler(#
    filename = function() paste0("memento-mori-life-calendar-", Sys.Date(), ".png"),#
    content = function(file) {#
      data <- boxes_data()#
      png(file, width = 1600, height = 1000, res = 150)#
      p <- ggplot(data, aes(x = col, y = -row)) +#
        geom_tile(aes(fill = lived), width = 0.9, height = 0.9) +#
        scale_fill_manual(#
          values = c(`TRUE` = "#667eea", `FALSE` = "#e2e8f0"),#
          guide = "none"#
        ) +#
        theme_void() +#
        coord_equal()#
      print(p)#
      dev.off()#
    }#
  )#
  output$download_data <- downloadHandler(#
    filename = function() paste0("memento-mori-data-", Sys.Date(), ".csv"),#
    content = function(file) {#
      data <- boxes_data()#
      data$age_at_unit <- as.numeric(difftime(data$date, input$dob, units = "days")) / 365.25#
      data$granularity <- input$granularity#
      data$life_expectancy <- life_expectancy()#
      write.csv(data, file, row.names = FALSE)#
    }#
  )#
}#
#
# Run the application#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  titlePanel("Life in Boxes"),#
  sidebarLayout(#
    sidebarPanel(#
      tags$div(#
        style = 'background-color:#fafafa; border-radius:10px; margin-bottom:10px; padding:10px; border-left:4px solid #e67e22;',#
        tags$b("Memento Mori"),#
        tags$p(style="font-style:italic; color:#555; margin-bottom:0;",#
               "I built the Memento Mori mini app to make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), inline = TRUE),#
      radioButtons("granularity", "Granularity", choices = c("Weeks", "Months"), selected = "Weeks", inline = TRUE),#
      hr(),#
      textInput("milestone_name", "Milestone Name (optional)", ""),#
      dateInput("milestone_date", "Milestone Date", value = Sys.Date()),#
      actionButton("add_milestone", "Add Milestone", class = "btn-primary")#
    ),#
    mainPanel(#
      fluidRow(#
        column(4, uiOutput("age_box")),#
        column(4, uiOutput("expect_box")),#
        column(4, uiOutput("pct_box"))#
      ),#
      plotOutput("grid_plot", height = "600px"),#
      br(),#
      DTOutput("milestones_table")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
  })#
  life_expectancy <- reactive({#
    get_life_expectancy(input$country, input$sex)#
  })#
  boxes_data <- reactive({#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    milestone_dates <- as.Date(milestones()$date)#
    df$milestone <- df$date %in% milestone_dates#
    cols <- c(bg="white", lived="#3498db", remaining="#ddd", today="#e74c3c", milestone="#f39c12")#
    ggplot(df, aes(x=col, y=-row)) +#
      geom_tile(aes(fill = lived), width=0.95, height=0.95, color="white") +#
      scale_fill_manual(values = c(`TRUE` = cols["lived"], `FALSE` = cols["remaining"]), guide="none") +#
      geom_tile(data = df[df$today,], fill=cols["today"], width=0.95, height=0.95) +#
      geom_tile(data = df[df$milestone,], fill=cols["milestone"], width=0.95, height=0.95) +#
      theme_void() +#
      theme(plot.background=element_rect(fill=cols["bg"], color=NA))#
  })#
  output$age_box <- renderUI({#
    age <- as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
    div(style="background:#f0f8ff; border-radius:8px; text-align:center; padding:10px; margin-bottom:10px;",#
        tags$b("Age:"), sprintf("%.1f yrs", age))#
  })#
  output$expect_box <- renderUI({#
    div(style="background:#e6f2ff; border-radius:8px; text-align:center; padding:10px; margin-bottom:10px;",#
        tags$b("Life Expectancy:"), round(life_expectancy(),1), "yrs")#
  })#
  output$pct_box <- renderUI({#
    df <- boxes_data()#
    pct <- mean(df$lived)#
    div(style="background:#fffbe6; border-radius:8px; text-align:center; padding:10px; margin-bottom:10px;",#
        tags$b("Lived:"), scales::percent(pct, accuracy=0.1))#
  })#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    if(nrow(df)==0) return(datatable(data.frame(Message="No milestones added yet"), options=list(dom='t'), rownames=FALSE))#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df <- df[order(df$date),]#
    datatable(df, options=list(pageLength=5, dom='t'), rownames=FALSE)#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  titlePanel("Life in Boxes"),#
  sidebarLayout(#
    sidebarPanel(#
      width = 3,#
      tags$div(#
        style = 'background-color:#fafafa; border-radius:10px; margin-bottom:15px; padding:15px; border-left:4px solid #e67e22;',#
        tags$b("Memento Mori", style = "color: #e67e22; font-size: 16px;"),#
        tags$p(style="font-style:italic; color:#555; margin-bottom:0; margin-top:8px; line-height: 1.4;",#
               "I built the Memento Mori mini app to make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), inline = TRUE),#
      radioButtons("granularity", "Granularity", choices = c("Weeks", "Months"), selected = "Weeks", inline = TRUE),#
      hr(),#
      h5("Add Milestone"),#
      textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation"),#
      dateInput("milestone_date", "Event Date", value = Sys.Date()),#
      actionButton("add_milestone", "Add Milestone", class = "btn-primary", style = "width: 100%;")#
    ),#
    mainPanel(#
      width = 9,#
      fluidRow(#
        column(4, uiOutput("age_box")),#
        column(4, uiOutput("expect_box")),#
        column(4, uiOutput("pct_box"))#
      ),#
      br(),#
      # Fixed plot container with consistent dimensions#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Life Visualization", style = "margin-top: 0; color: #333;"),#
        p("Each box represents a unit of your life. Blue = lived, Light gray = future, Red = today, Orange = milestones", #
          style = "color: #666; margin-bottom: 15px;"),#
        div(#
          style = "width: 100%; height: 500px; overflow: auto; background: white; border-radius: 5px;",#
          plotOutput("grid_plot", height = "auto", width = "100%")#
        )#
      ),#
      br(),#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Your Milestones", style = "margin-top: 0; color: #333;"),#
        DTOutput("milestones_table")#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added!", type = "success")#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    df$milestone <- df$date %in% milestone_dates#
    # Calculate consistent plot dimensions#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create the plot with fixed aspect ratio and proper colors#
    p <- ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.9, height = 0.9, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Add today marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      # Add milestone markers (orange)#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0, 0)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0, 0)) +#
      coord_fixed(ratio = 1) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "white", color = NA),#
        panel.background = element_rect(fill = "white", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      )#
    p#
  }, #
  # Fixed plot dimensions to maintain consistency#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    min(500, max(200, max_rows * 8 + 40))  # Responsive but with limits#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    if (input$granularity == "Weeks") {#
      600  # Fixed width for weeks#
    } else {#
      300  # Fixed width for months#
    }#
  })#
  output$age_box <- renderUI({#
    age <- current_age()#
    div(#
      style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #90caf9;",#
      tags$h4(sprintf("%.1f", age), style = "margin: 5px 0; color: #0d47a1; font-weight: bold;"),#
      tags$p("Years Old", style = "margin: 0; color: #1565c0; font-size: 14px;")#
    )#
  })#
  output$expect_box <- renderUI({#
    life_exp <- life_expectancy()#
    div(#
      style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #81c784;",#
      tags$h4(round(life_exp, 1), style = "margin: 5px 0; color: #2e7d32; font-weight: bold;"),#
      tags$p("Life Expectancy", style = "margin: 0; color: #388e3c; font-size: 14px;")#
    )#
  })#
  output$pct_box <- renderUI({#
    df <- boxes_data()#
    pct <- mean(df$lived) * 100#
    div(#
      style="background: linear-gradient(135deg, #fff3e0, #ffcc80); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #ffb74d;",#
      tags$h4(paste0(round(pct, 1), "%"), style = "margin: 5px 0; color: #e65100; font-weight: bold;"),#
      tags$p("Life Lived", style = "margin: 0; color: #f57c00; font-size: 14px;")#
    )#
  })#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    if(nrow(df) == 0) {#
      empty_df <- data.frame(Message = "No milestones added yet")#
      return(datatable(empty_df, options = list(dom = 't', searching = FALSE), rownames = FALSE))#
    }#
    # Calculate age at milestone#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    # Reorder and rename columns#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df, #
      options = list(#
        pageLength = 10, #
        dom = 'tip',#
        searching = TRUE,#
        columnDefs = list(#
          list(className = 'dt-center', targets = 1:2)#
        )#
      ), #
      rownames = FALSE#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  titlePanel("Memento Mori"),#
  sidebarLayout(#
    sidebarPanel(#
      width = 3,#
      tags$div(#
        style = 'background-color:#fafafa; border-radius:10px; margin-bottom:15px; padding:15px; border-left:4px solid #e67e22;',#
        tags$b("About", style = "color: #e67e22; font-size: 16px;"),#
        tags$p(style="font-style:italic; color:#555; margin-bottom:0; margin-top:8px; line-height: 1.4;",#
               "I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), inline = TRUE),#
      radioButtons("granularity", "Granularity", choices = c("Weeks", "Months"), selected = "Weeks", inline = TRUE),#
      hr(),#
      h5("Add Milestone"),#
      textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation"),#
      dateInput("milestone_date", "Event Date", value = Sys.Date()),#
      actionButton("add_milestone", "Add Milestone", class = "btn-primary", style = "width: 100%;")#
    ),#
    mainPanel(#
      width = 9,#
      fluidRow(#
        column(4, uiOutput("age_box")),#
        column(4, uiOutput("expect_box")),#
        column(4, uiOutput("pct_box"))#
      ),#
      br(),#
      # Fixed plot container with consistent dimensions#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Life Visualization", style = "margin-top: 0; color: #333;"),#
        p("Each box represents a unit of your life. Blue = lived, Light gray = future, Red = today, Orange = milestones", #
          style = "color: #666; margin-bottom: 15px;"),#
        div(#
          style = "width: 100%; height: 500px; overflow: auto; background: white; border-radius: 5px;",#
          plotOutput("grid_plot", height = "auto", width = "100%")#
        )#
      ),#
      br(),#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Your Milestones", style = "margin-top: 0; color: #333;"),#
        DTOutput("milestones_table")#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added!", type = "success")#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    df$milestone <- df$date %in% milestone_dates#
    # Calculate consistent plot dimensions#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create the plot with fixed aspect ratio and proper colors#
    p <- ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.9, height = 0.9, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Add today marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      # Add milestone markers (orange)#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0, 0)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0, 0)) +#
      coord_fixed(ratio = 1) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "white", color = NA),#
        panel.background = element_rect(fill = "white", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      )#
    p#
  }, #
  # Fixed plot dimensions to maintain consistency#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    min(500, max(200, max_rows * 8 + 40))  # Responsive but with limits#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    if (input$granularity == "Weeks") {#
      600  # Fixed width for weeks#
    } else {#
      300  # Fixed width for months#
    }#
  })#
  output$age_box <- renderUI({#
    age <- current_age()#
    div(#
      style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #90caf9;",#
      tags$h4(sprintf("%.1f", age), style = "margin: 5px 0; color: #0d47a1; font-weight: bold;"),#
      tags$p("Years Old", style = "margin: 0; color: #1565c0; font-size: 14px;")#
    )#
  })#
  output$expect_box <- renderUI({#
    life_exp <- life_expectancy()#
    div(#
      style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #81c784;",#
      tags$h4(round(life_exp, 1), style = "margin: 5px 0; color: #2e7d32; font-weight: bold;"),#
      tags$p("Life Expectancy", style = "margin: 0; color: #388e3c; font-size: 14px;")#
    )#
  })#
  output$pct_box <- renderUI({#
    df <- boxes_data()#
    pct <- mean(df$lived) * 100#
    div(#
      style="background: linear-gradient(135deg, #fff3e0, #ffcc80); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #ffb74d;",#
      tags$h4(paste0(round(pct, 1), "%"), style = "margin: 5px 0; color: #e65100; font-weight: bold;"),#
      tags$p("Life Lived", style = "margin: 0; color: #f57c00; font-size: 14px;")#
    )#
  })#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    if(nrow(df) == 0) {#
      empty_df <- data.frame(Message = "No milestones added yet")#
      return(datatable(empty_df, options = list(dom = 't', searching = FALSE), rownames = FALSE))#
    }#
    # Calculate age at milestone#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    # Reorder and rename columns#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df, #
      options = list(#
        pageLength = 10, #
        dom = 'tip',#
        searching = TRUE,#
        columnDefs = list(#
          list(className = 'dt-center', targets = 1:2)#
        )#
      ), #
      rownames = FALSE#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  titlePanel("Life in Boxes"),#
  sidebarLayout(#
    sidebarPanel(#
      width = 3,#
      tags$div(#
        style = 'background-color:#fafafa; border-radius:10px; margin-bottom:15px; padding:15px; border-left:4px solid #e67e22;',#
        tags$b("Memento Mori", style = "color: #e67e22; font-size: 16px;"),#
        tags$p(style="font-style:italic; color:#555; margin-bottom:0; margin-top:8px; line-height: 1.4;",#
               "I built the Memento Mori mini app to make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), inline = TRUE),#
      radioButtons("granularity", "Granularity", choices = c("Weeks", "Months"), selected = "Weeks", inline = TRUE),#
      hr(),#
      h5("Add Milestone"),#
      textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation"),#
      dateInput("milestone_date", "Event Date", value = Sys.Date()),#
      actionButton("add_milestone", "Add Milestone", class = "btn-primary", style = "width: 100%;")#
    ),#
    mainPanel(#
      width = 9,#
      fluidRow(#
        column(4, uiOutput("age_box")),#
        column(4, uiOutput("expect_box")),#
        column(4, uiOutput("pct_box"))#
      ),#
      br(),#
      # Fixed plot container with consistent dimensions#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Life Visualization", style = "margin-top: 0; color: #333;"),#
        p("Each box represents a unit of your life. Blue = lived, Light gray = future, Red = today, Orange = milestones", #
          style = "color: #666; margin-bottom: 15px;"),#
        div(#
          style = "width: 100%; height: 500px; overflow: auto; background: white; border-radius: 5px;",#
          plotOutput("grid_plot", height = "auto", width = "100%")#
        )#
      ),#
      br(),#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Your Milestones", style = "margin-top: 0; color: #333;"),#
        DTOutput("milestones_table")#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added!", type = "success")#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    df$milestone <- df$date %in% milestone_dates#
    # Calculate consistent plot dimensions#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create the plot with fixed aspect ratio and proper colors#
    p <- ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.9, height = 0.9, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Add today marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      # Add milestone markers (orange)#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0, 0)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0, 0)) +#
      coord_fixed(ratio = 1) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "white", color = NA),#
        panel.background = element_rect(fill = "white", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      )#
    p#
  }, #
  # Fixed plot dimensions to maintain consistency#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    min(500, max(200, max_rows * 8 + 40))  # Responsive but with limits#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    if (input$granularity == "Weeks") {#
      600  # Fixed width for weeks#
    } else {#
      300  # Fixed width for months#
    }#
  })#
  output$age_box <- renderUI({#
    age <- current_age()#
    div(#
      style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #90caf9;",#
      tags$h4(sprintf("%.1f", age), style = "margin: 5px 0; color: #0d47a1; font-weight: bold;"),#
      tags$p("Years Old", style = "margin: 0; color: #1565c0; font-size: 14px;")#
    )#
  })#
  output$expect_box <- renderUI({#
    life_exp <- life_expectancy()#
    div(#
      style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #81c784;",#
      tags$h4(round(life_exp, 1), style = "margin: 5px 0; color: #2e7d32; font-weight: bold;"),#
      tags$p("Life Expectancy", style = "margin: 0; color: #388e3c; font-size: 14px;")#
    )#
  })#
  output$pct_box <- renderUI({#
    df <- boxes_data()#
    pct <- mean(df$lived) * 100#
    div(#
      style="background: linear-gradient(135deg, #fff3e0, #ffcc80); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #ffb74d;",#
      tags$h4(paste0(round(pct, 1), "%"), style = "margin: 5px 0; color: #e65100; font-weight: bold;"),#
      tags$p("Life Lived", style = "margin: 0; color: #f57c00; font-size: 14px;")#
    )#
  })#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    if(nrow(df) == 0) {#
      empty_df <- data.frame(Message = "No milestones added yet")#
      return(datatable(empty_df, options = list(dom = 't', searching = FALSE), rownames = FALSE))#
    }#
    # Calculate age at milestone#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    # Reorder and rename columns#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df, #
      options = list(#
        pageLength = 10, #
        dom = 'tip',#
        searching = TRUE,#
        columnDefs = list(#
          list(className = 'dt-center', targets = 1:2)#
        )#
      ), #
      rownames = FALSE#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  titlePanel("Memento Mori"),#
  sidebarLayout(#
    sidebarPanel(#
      width = 3,#
      tags$div(#
        style = 'background-color:#fafafa; border-radius:10px; margin-bottom:15px; padding:15px; border-left:4px solid #e67e22;',#
        tags$b("About", style = "color: #e67e22; font-size: 16px;"),#
        tags$p(style="font-style:italic; color:#555; margin-bottom:0; margin-top:8px; line-height: 1.4;",#
               "I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning."#
        )#
      ),#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), inline = TRUE),#
      radioButtons("granularity", "Granularity", choices = c("Weeks", "Months"), selected = "Weeks", inline = TRUE),#
      hr(),#
      h5("Add Milestone"),#
      textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation"),#
      dateInput("milestone_date", "Event Date", value = Sys.Date()),#
      actionButton("add_milestone", "Add Milestone", class = "btn-primary", style = "width: 100%;")#
    ),#
    mainPanel(#
      width = 9,#
      fluidRow(#
        column(4, uiOutput("age_box")),#
        column(4, uiOutput("expect_box")),#
        column(4, uiOutput("pct_box"))#
      ),#
      br(),#
      # Fixed plot container with consistent dimensions#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Life Visualization", style = "margin-top: 0; color: #333;"),#
        p("Each box represents a unit of your life. Blue = lived, Light gray = future, Red = today, Orange = milestones", #
          style = "color: #666; margin-bottom: 15px;"),#
        div(#
          style = "width: 100%; height: 500px; overflow: auto; background: white; border-radius: 5px;",#
          plotOutput("grid_plot", height = "auto", width = "100%")#
        )#
      ),#
      br(),#
      div(#
        style = "border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #fafafa;",#
        h4("Your Milestones", style = "margin-top: 0; color: #333;"),#
        DTOutput("milestones_table")#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added!", type = "success")#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    df$milestone <- df$date %in% milestone_dates#
    # Calculate consistent plot dimensions#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create the plot with fixed aspect ratio and proper colors#
    p <- ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.9, height = 0.9, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Add today marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      # Add milestone markers (orange)#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.9, height = 0.9, color = "white", size = 0.8) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0, 0)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0, 0)) +#
      coord_fixed(ratio = 1) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "white", color = NA),#
        panel.background = element_rect(fill = "white", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      )#
    p#
  }, #
  # Fixed plot dimensions to maintain consistency#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    min(500, max(200, max_rows * 8 + 40))  # Responsive but with limits#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    if (input$granularity == "Weeks") {#
      600  # Fixed width for weeks#
    } else {#
      300  # Fixed width for months#
    }#
  })#
  output$age_box <- renderUI({#
    age <- current_age()#
    div(#
      style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #90caf9;",#
      tags$h4(sprintf("%.1f", age), style = "margin: 5px 0; color: #0d47a1; font-weight: bold;"),#
      tags$p("Years Old", style = "margin: 0; color: #1565c0; font-size: 14px;")#
    )#
  })#
  output$expect_box <- renderUI({#
    life_exp <- life_expectancy()#
    div(#
      style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #81c784;",#
      tags$h4(round(life_exp, 1), style = "margin: 5px 0; color: #2e7d32; font-weight: bold;"),#
      tags$p("Life Expectancy", style = "margin: 0; color: #388e3c; font-size: 14px;")#
    )#
  })#
  output$pct_box <- renderUI({#
    df <- boxes_data()#
    pct <- mean(df$lived) * 100#
    div(#
      style="background: linear-gradient(135deg, #fff3e0, #ffcc80); border-radius:10px; text-align:center; padding:15px; margin-bottom:10px; border: 1px solid #ffb74d;",#
      tags$h4(paste0(round(pct, 1), "%"), style = "margin: 5px 0; color: #e65100; font-weight: bold;"),#
      tags$p("Life Lived", style = "margin: 0; color: #f57c00; font-size: 14px;")#
    )#
  })#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    if(nrow(df) == 0) {#
      empty_df <- data.frame(Message = "No milestones added yet")#
      return(datatable(empty_df, options = list(dom = 't', searching = FALSE), rownames = FALSE))#
    }#
    # Calculate age at milestone#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    # Reorder and rename columns#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df, #
      options = list(#
        pageLength = 10, #
        dom = 'tip',#
        searching = TRUE,#
        columnDefs = list(#
          list(className = 'dt-center', targets = 1:2)#
        )#
      ), #
      rownames = FALSE#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= Sys.Date(),#
    today = unit_dates == Sys.Date()#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
        letter-spacing: -1px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto 30px;#
        line-height: 1.6;#
      }#
      .controls-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .visualization-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2.2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        opacity: 0.7;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
        font-size: 0.9rem;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .milestones-section {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
      }#
      .section-title {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 15px;#
        color: #2c3e50;#
      }#
      .form-control, .form-select {#
        border-radius: 8px;#
        border: 2px solid #e9ecef;#
        padding: 12px 15px;#
        font-size: 0.95rem;#
      }#
      .form-control:focus, .form-select:focus {#
        border-color: #667eea;#
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);#
      }#
      .btn-primary {#
        background: linear-gradient(135deg, #667eea, #764ba2);#
        border: none;#
        border-radius: 8px;#
        padding: 12px 25px;#
        font-weight: 500;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        font-size: 0.9rem;#
      }#
      .grid-container {#
        max-width: 100%;#
        overflow-x: auto;#
        background: #f8f9fa;#
        border-radius: 8px;#
        padding: 20px;#
        margin: 20px 0;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls Section#
    div(class = "controls-card",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Create Your Life Calendar", class = "section-title"),#
          p("Start by entering your details below. Watch as your life appears before you—each square representing a unit of time in your journey.", #
            style = "color: #6c757d; margin-bottom: 25px;")#
        )#
      ),#
      div(class = "row",#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Date of Birth", class = "form-label fw-bold"),#
            dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), #
                     class = "form-control")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Country", class = "form-label fw-bold"),#
            selectInput("country", NULL, #
                       choices = sort(life_expectancy_data$country), #
                       selected = "Malaysia", class = "form-select")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Gender", class = "form-label fw-bold"),#
            radioButtons("sex", NULL, #
                        choices = c("Male", "Female", "Total"), #
                        selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("View Mode", class = "form-label fw-bold"),#
            radioButtons("granularity", NULL, #
                        choices = c("Weeks", "Months"), #
                        selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats Section#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization Section#
    div(class = "visualization-card",#
      h3("Your Life Visualization", class = "section-title"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6c757d; margin-bottom: 20px;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Today")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #f39c12;"),#
          span("Milestones")#
        )#
      ),#
      # Grid#
      div(class = "grid-container",#
        plotOutput("grid_plot", height = "auto", width = "100%")#
      )#
    ),#
    # Milestones Section#
    div(class = "milestones-section",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Your Milestones", class = "section-title"),#
          conditionalPanel(#
            condition = "output.has_milestones",#
            DTOutput("milestones_table")#
          ),#
          conditionalPanel(#
            condition = "!output.has_milestones",#
            div(style = "text-align: center; padding: 40px; color: #6c757d;",#
              tags$i(class = "fas fa-calendar-plus", style = "font-size: 3rem; margin-bottom: 15px; opacity: 0.3;"),#
              h5("No milestones added yet"),#
              p("Add important life events to see them highlighted in your visualization.")#
            )#
          )#
        ),#
        div(class = "col-md-4",#
          h4("Add Milestone", style = "margin-bottom: 20px;"),#
          div(class = "mb-3",#
            textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation", class = "form-control")#
          ),#
          div(class = "mb-3",#
            dateInput("milestone_date", "Event Date", value = Sys.Date(), class = "form-control")#
          ),#
          actionButton("add_milestone", "Add Milestone", class = "btn btn-primary w-100")#
        )#
      )#
    ),#
    # Footer#
    div(style = "text-align: center; padding: 40px 0; color: #6c757d; border-top: 1px solid #e9ecef; margin-top: 60px;",#
      p("Time is our most valuable resource. Make it count.", style = "font-style: italic; margin: 0;")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added to your life calendar!", type = "success", duration = 3)#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste("Units Lived"), class = "stat-label")#
      )#
    )#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    df$milestone <- df$date %in% milestone_dates#
    # Calculate dimensions#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create clean, minimal plot#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Today marker#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 1) +#
      # Milestone markers#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.85, height = 0.85, color = "white", size = 1) +#
      scale_x_continuous(expand = c(0.01, 0.01)) +#
      scale_y_continuous(expand = c(0.01, 0.01)) +#
      coord_fixed(ratio = 1) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(20, 20, 20, 20)#
      )#
  },#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    max(300, min(600, max_rows * 12))#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    if (input$granularity == "Weeks") 800 else 500#
  })#
  # Milestones table#
  output$has_milestones <- reactive({#
    nrow(milestones()) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    req(nrow(df) > 0)#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age at Event")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df,#
      options = list(#
        pageLength = 8,#
        dom = 'tip',#
        searching = FALSE,#
        columnDefs = list(list(className = 'dt-center', targets = 1:2))#
      ),#
      rownames = FALSE,#
      class = "table table-hover"#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Find the current period more accurately#
  if (granularity == "Weeks") {#
    # Find current week#
    current_week_start <- floor_date(current_date, "week")#
    df$today <- (df$date >= current_week_start) & (df$date < current_week_start + weeks(1)) & (df$date <= current_date)#
  } else {#
    # Find current month#
    current_month_start <- floor_date(current_date, "month")#
    df$today <- (df$date >= current_month_start) & (df$date < current_month_start + months(1))#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
        letter-spacing: -1px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto 30px;#
        line-height: 1.6;#
      }#
      .controls-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .visualization-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2.2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        opacity: 0.7;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
        font-size: 0.9rem;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .milestones-section {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
      }#
      .section-title {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 15px;#
        color: #2c3e50;#
      }#
      .form-control, .form-select {#
        border-radius: 8px;#
        border: 2px solid #e9ecef;#
        padding: 12px 15px;#
        font-size: 0.95rem;#
      }#
      .form-control:focus, .form-select:focus {#
        border-color: #667eea;#
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);#
      }#
      .btn-primary {#
        background: linear-gradient(135deg, #667eea, #764ba2);#
        border: none;#
        border-radius: 8px;#
        padding: 12px 25px;#
        font-weight: 500;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        font-size: 0.9rem;#
      }#
      .grid-container {#
        max-width: 100%;#
        overflow-x: auto;#
        background: #f8f9fa;#
        border-radius: 8px;#
        padding: 20px;#
        margin: 20px 0;#
        text-align: center;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls Section#
    div(class = "controls-card",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Create Your Life Calendar", class = "section-title"),#
          p("Start by entering your details below. Watch as your life appears before you—each square representing a unit of time in your journey.", #
            style = "color: #6c757d; margin-bottom: 25px;")#
        )#
      ),#
      div(class = "row",#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Date of Birth", class = "form-label fw-bold"),#
            dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), #
                     class = "form-control")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Country", class = "form-label fw-bold"),#
            selectInput("country", NULL, #
                       choices = sort(life_expectancy_data$country), #
                       selected = "Malaysia", class = "form-select")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Gender", class = "form-label fw-bold"),#
            radioButtons("sex", NULL, #
                        choices = c("Male", "Female", "Total"), #
                        selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("View Mode", class = "form-label fw-bold"),#
            radioButtons("granularity", NULL, #
                        choices = c("Weeks", "Months"), #
                        selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats Section#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization Section#
    div(class = "visualization-card",#
      h3("Your Life Visualization", class = "section-title"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6c757d; margin-bottom: 20px;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #f39c12;"),#
          span("Milestones")#
        )#
      ),#
      # Grid#
      div(class = "grid-container",#
        plotOutput("grid_plot", height = "auto", width = "100%")#
      )#
    ),#
    # Milestones Section#
    div(class = "milestones-section",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Your Milestones", class = "section-title"),#
          conditionalPanel(#
            condition = "output.has_milestones",#
            DTOutput("milestones_table")#
          ),#
          conditionalPanel(#
            condition = "!output.has_milestones",#
            div(style = "text-align: center; padding: 40px; color: #6c757d;",#
              tags$i(class = "fas fa-calendar-plus", style = "font-size: 3rem; margin-bottom: 15px; opacity: 0.3;"),#
              h5("No milestones added yet"),#
              p("Add important life events to see them highlighted in your visualization.")#
            )#
          )#
        ),#
        div(class = "col-md-4",#
          h4("Add Milestone", style = "margin-bottom: 20px;"),#
          div(class = "mb-3",#
            textInput("milestone_name", "Event Name", placeholder = "e.g., Graduation", class = "form-control")#
          ),#
          div(class = "mb-3",#
            dateInput("milestone_date", "Event Date", value = Sys.Date(), class = "form-control")#
          ),#
          actionButton("add_milestone", "Add Milestone", class = "btn btn-primary w-100")#
        )#
      )#
    ),#
    # Footer#
    div(style = "text-align: center; padding: 40px 0; color: #6c757d; border-top: 1px solid #e9ecef; margin-top: 60px;",#
      p("Time is our most valuable resource. Make it count.", style = "font-style: italic; margin: 0;")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  milestones <- reactiveVal(data.frame(#
    name = character(),#
    date = as.Date(character()),#
    stringsAsFactors = FALSE#
  ))#
  observeEvent(input$add_milestone,{#
    req(input$milestone_name, input$milestone_date)#
    df <- milestones()#
    milestones(rbind(df, data.frame(name = input$milestone_name, date = input$milestone_date, stringsAsFactors = FALSE)))#
    updateTextInput(session, "milestone_name", value = "")#
    showNotification("Milestone added to your life calendar!", type = "success", duration = 3)#
  })#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"), class = "stat-label")#
      )#
    )#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Add milestone markers#
    milestone_dates <- milestones()$date#
    if (nrow(milestones()) > 0) {#
      # Find which units contain milestones#
      milestone_units <- sapply(milestone_dates, function(milestone_date) {#
        if (input$granularity == "Weeks") {#
          milestone_week_start <- floor_date(milestone_date, "week")#
          which((df$date >= milestone_week_start) & (df$date < milestone_week_start + weeks(1)))#
        } else {#
          milestone_month_start <- floor_date(milestone_date, "month")#
          which((df$date >= milestone_month_start) & (df$date < milestone_month_start + months(1)))#
        }#
      })#
      milestone_indices <- unique(unlist(milestone_units))#
      df$milestone <- seq_len(nrow(df)) %in% milestone_indices#
    } else {#
      df$milestone <- FALSE#
    }#
    # Calculate dimensions for rectangular plot#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create rectangular plot#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Current period marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 1.2) +#
      # Milestone markers (orange)#
      geom_tile(data = df[df$milestone, ], #
                fill = "#f39c12", width = 0.85, height = 0.85, color = "white", size = 1.2) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0.01, 0.01)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0.01, 0.01)) +#
      # Remove coord_fixed to allow rectangular grid#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(20, 20, 20, 20)#
      )#
  },#
  # Fixed height and dynamic width for rectangular grid#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    # Fixed height regardless of number of rows for better consistency#
    400#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    # Width proportional to columns for rectangular effect#
    if (input$granularity == "Weeks") {#
      max(600, max_cols * 12)  # 12px per column for weeks#
    } else {#
      max(400, max_cols * 25)  # 25px per column for months#
    }#
  })#
  # Milestones table#
  output$has_milestones <- reactive({#
    nrow(milestones()) > 0#
  })#
  outputOptions(output, "has_milestones", suspendWhenHidden = FALSE)#
  output$milestones_table <- renderDT({#
    df <- milestones()#
    req(nrow(df) > 0)#
    df$Age <- round(as.numeric(difftime(df$date, input$dob, units="days"))/365.25, 1)#
    df$Date <- format(df$date, "%Y-%m-%d")#
    display_df <- df[, c("name", "Date", "Age")]#
    names(display_df) <- c("Event", "Date", "Age at Event")#
    display_df <- display_df[order(as.Date(df$date)), ]#
    datatable(#
      display_df,#
      options = list(#
        pageLength = 8,#
        dom = 'tip',#
        searching = FALSE,#
        columnDefs = list(list(className = 'dt-center', targets = 1:2))#
      ),#
      rownames = FALSE,#
      class = "table table-hover"#
    )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Find the current period more accurately#
  if (granularity == "Weeks") {#
    # Find current week#
    current_week_start <- floor_date(current_date, "week")#
    df$today <- (df$date >= current_week_start) & (df$date < current_week_start + weeks(1)) & (df$date <= current_date)#
  } else {#
    # Find current month#
    current_month_start <- floor_date(current_date, "month")#
    df$today <- (df$date >= current_month_start) & (df$date < current_month_start + months(1))#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
        letter-spacing: -1px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto 30px;#
        line-height: 1.6;#
      }#
      .controls-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .visualization-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2.2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        opacity: 0.7;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
        font-size: 0.9rem;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .section-title {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 15px;#
        color: #2c3e50;#
      }#
      .form-control, .form-select {#
        border-radius: 8px;#
        border: 2px solid #e9ecef;#
        padding: 12px 15px;#
        font-size: 0.95rem;#
      }#
      .form-control:focus, .form-select:focus {#
        border-color: #667eea;#
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);#
      }#
      .grid-container {#
        max-width: 100%;#
        overflow-x: auto;#
        background: #f8f9fa;#
        border-radius: 8px;#
        padding: 30px;#
        margin: 20px 0;#
        text-align: center;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls Section#
    div(class = "controls-card",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Create Your Life Calendar", class = "section-title"),#
          p("Start by entering your details below. Watch as your life appears before you—each square representing a unit of time in your journey.", #
            style = "color: #6c757d; margin-bottom: 25px;")#
        )#
      ),#
      div(class = "row",#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Date of Birth", class = "form-label fw-bold"),#
            dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), #
                     class = "form-control")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Country", class = "form-label fw-bold"),#
            selectInput("country", NULL, #
                       choices = sort(life_expectancy_data$country), #
                       selected = "Malaysia", class = "form-select")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Gender", class = "form-label fw-bold"),#
            radioButtons("sex", NULL, #
                        choices = c("Male", "Female", "Total"), #
                        selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("View Mode", class = "form-label fw-bold"),#
            radioButtons("granularity", NULL, #
                        choices = c("Weeks", "Months"), #
                        selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats Section#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization Section#
    div(class = "visualization-card",#
      h3("Your Life Visualization", class = "section-title"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6c757d; margin-bottom: 20px;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        )#
      ),#
      # Large Grid#
      div(class = "grid-container",#
        plotOutput("grid_plot", height = "auto", width = "100%")#
      )#
    ),#
    # Footer#
    div(style = "text-align: center; padding: 40px 0; color: #6c757d; border-top: 1px solid #e9ecef; margin-top: 60px;",#
      p("Time is our most valuable resource. Make it count.", style = "font-style: italic; margin: 0;")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"), class = "stat-label")#
      )#
    )#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Calculate dimensions for rectangular plot#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Create large rectangular plot#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.9, height = 0.9, color = "white", size = 0.5) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Current period marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0.01, 0.01)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0.01, 0.01)) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(30, 30, 30, 30)#
      )#
  },#
  # Much larger grid dimensions#
  height = function() {#
    df <- boxes_data()#
    max_rows <- max(df$row)#
    # Larger height - minimum 600px#
    max(600, max_rows * 15)#
  },#
  width = function() {#
    df <- boxes_data()#
    max_cols <- max(df$col)#
    # Much larger width for better visibility#
    if (input$granularity == "Weeks") {#
      max(1000, max_cols * 18)  # 18px per column for weeks#
    } else {#
      max(600, max_cols * 40)   # 40px per column for months#
    }#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Find the current period more accurately#
  if (granularity == "Weeks") {#
    # Find current week#
    current_week_start <- floor_date(current_date, "week")#
    df$today <- (df$date >= current_week_start) & (df$date < current_week_start + weeks(1)) & (df$date <= current_date)#
  } else {#
    # Find current month#
    current_month_start <- floor_date(current_date, "month")#
    df$today <- (df$date >= current_month_start) & (df$date < current_month_start + months(1))#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
        letter-spacing: -1px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto 30px;#
        line-height: 1.6;#
      }#
      .controls-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .visualization-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2.2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        opacity: 0.7;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
        font-size: 0.9rem;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .section-title {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 15px;#
        color: #2c3e50;#
      }#
      .form-control, .form-select {#
        border-radius: 8px;#
        border: 2px solid #e9ecef;#
        padding: 12px 15px;#
        font-size: 0.95rem;#
      }#
      .form-control:focus, .form-select:focus {#
        border-color: #667eea;#
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);#
      }#
      .grid-container {#
        width: 100%;#
        background: #f8f9fa;#
        border-radius: 8px;#
        padding: 20px;#
        margin: 20px 0;#
        text-align: center;#
        display: flex;#
        justify-content: center;#
        align-items: center;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls Section#
    div(class = "controls-card",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Create Your Life Calendar", class = "section-title"),#
          p("Start by entering your details below. Watch as your life appears before you—each square representing a unit of time in your journey.", #
            style = "color: #6c757d; margin-bottom: 25px;")#
        )#
      ),#
      div(class = "row",#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Date of Birth", class = "form-label fw-bold"),#
            dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), #
                     class = "form-control")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Country", class = "form-label fw-bold"),#
            selectInput("country", NULL, #
                       choices = sort(life_expectancy_data$country), #
                       selected = "Malaysia", class = "form-select")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Gender", class = "form-label fw-bold"),#
            radioButtons("sex", NULL, #
                        choices = c("Male", "Female", "Total"), #
                        selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("View Mode", class = "form-label fw-bold"),#
            radioButtons("granularity", NULL, #
                        choices = c("Weeks", "Months"), #
                        selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats Section#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization Section#
    div(class = "visualization-card",#
      h3("Your Life Visualization", class = "section-title"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6c757d; margin-bottom: 20px;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        )#
      ),#
      # Rectangular Grid that fits window#
      div(class = "grid-container",#
        plotOutput("grid_plot", height = "500px", width = "100%")#
      )#
    ),#
    # Footer#
    div(style = "text-align: center; padding: 40px 0; color: #6c757d; border-top: 1px solid #e9ecef; margin-top: 60px;",#
      p("Time is our most valuable resource. Make it count.", style = "font-style: italic; margin: 0;")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"), class = "stat-label")#
      )#
    )#
  })#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Calculate dimensions for rectangular plot that fits window#
    max_cols <- max(df$col)#
    max_rows <- max(df$row)#
    # Calculate tile size to fit within window#
    # Available space: roughly 1000px width, 450px height (accounting for padding)#
    available_width <- 950#
    available_height <- 450#
    # Calculate optimal tile size#
    tile_width <- min(available_width / max_cols, available_height / max_rows * 2.5)  # 2.5 ratio for rectangular#
    tile_height <- tile_width * 0.8  # Make rectangles slightly shorter#
    # Create rectangular plot that fits in window#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Current period marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_x_continuous(limits = c(0.5, max_cols + 0.5), expand = c(0.01, 0.01)) +#
      scale_y_continuous(limits = c(-max_rows - 0.5, -0.5), expand = c(0.01, 0.01)) +#
      # Force rectangular aspect ratio#
      coord_fixed(ratio = max_cols / (max_rows * 2.2)) +  # Adjust ratio for rectangular appearance#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(lubridate)#
library(ggplot2)#
library(DT)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Find the current period more accurately#
  if (granularity == "Weeks") {#
    # Find current week#
    current_week_start <- floor_date(current_date, "week")#
    df$today <- (df$date >= current_week_start) & (df$date < current_week_start + weeks(1)) & (df$date <= current_date)#
  } else {#
    # Find current month#
    current_month_start <- floor_date(current_date, "month")#
    df$today <- (df$date >= current_month_start) & (df$date < current_month_start + months(1))#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
        letter-spacing: -1px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto 30px;#
        line-height: 1.6;#
      }#
      .controls-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .visualization-card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2.2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 0.5px;#
        opacity: 0.7;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
        font-size: 0.9rem;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .section-title {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 15px;#
        color: #2c3e50;#
      }#
      .form-control, .form-select {#
        border-radius: 8px;#
        border: 2px solid #e9ecef;#
        padding: 12px 15px;#
        font-size: 0.95rem;#
      }#
      .form-control:focus, .form-select:focus {#
        border-color: #667eea;#
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);#
      }#
      .grid-container {#
        width: 100%;#
        background: #f8f9fa;#
        border-radius: 8px;#
        padding: 20px;#
        margin: 20px 0;#
        text-align: center;#
        overflow-x: auto;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls Section#
    div(class = "controls-card",#
      div(class = "row",#
        div(class = "col-md-8",#
          h3("Create Your Life Calendar", class = "section-title"),#
          p("Start by entering your details below. Watch as your life appears before you—each square representing a unit of time in your journey.", #
            style = "color: #6c757d; margin-bottom: 25px;")#
        )#
      ),#
      div(class = "row",#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Date of Birth", class = "form-label fw-bold"),#
            dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), #
                     class = "form-control")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Country", class = "form-label fw-bold"),#
            selectInput("country", NULL, #
                       choices = sort(life_expectancy_data$country), #
                       selected = "Malaysia", class = "form-select")#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("Gender", class = "form-label fw-bold"),#
            radioButtons("sex", NULL, #
                        choices = c("Male", "Female", "Total"), #
                        selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "col-md-3",#
          div(class = "mb-3",#
            tags$label("View Mode", class = "form-label fw-bold"),#
            radioButtons("granularity", NULL, #
                        choices = c("Weeks", "Months"), #
                        selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats Section#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization Section#
    div(class = "visualization-card",#
      h3("Your Life Visualization", class = "section-title"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6c757d; margin-bottom: 20px;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        )#
      ),#
      # Simple Grid Container#
      div(class = "grid-container",#
        plotOutput("grid_plot", width = "100%", height = "400px")#
      )#
    ),#
    # Footer#
    div(style = "text-align: center; padding: 40px 0; color: #6c757d; border-top: 1px solid #e9ecef; margin-top: 60px;",#
      p("Time is our most valuable resource. Make it count.", style = "font-style: italic; margin: 0;")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"), class = "stat-label")#
      )#
    )#
  })#
  # Simplified grid plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    # Simple plot without complex calculations#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = factor(ifelse(lived, "lived", "future"))), #
                width = 0.8, height = 0.8, color = "white", size = 0.2) +#
      scale_fill_manual(#
        values = c("lived" = "#3498db", "future" = "#ecf0f1"),#
        guide = "none"#
      ) +#
      # Current period marker (red)#
      geom_tile(data = df[df$today, ], #
                fill = "#e74c3c", width = 0.8, height = 0.8, color = "white", size = 0.5) +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")  # Simple margins#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- round(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- round(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Find current period#
  if (granularity == "Weeks") {#
    current_week_start <- floor_date(current_date, "week")#
    df$today <- (df$date >= current_week_start) & (df$date < current_week_start + weeks(1)) & (df$date <= current_date)#
  } else {#
    current_month_start <- floor_date(current_date, "month")#
    df$today <- (df$date >= current_month_start) & (df$date < current_month_start + months(1))#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #fafbfc;#
        color: #2c3e50;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 60px 0;#
        text-align: center;#
        margin-bottom: 40px;#
      }#
      .hero-title {#
        font-size: 3.5rem;#
        font-weight: 300;#
        margin-bottom: 20px;#
      }#
      .hero-subtitle {#
        font-size: 1.3rem;#
        opacity: 0.9;#
        font-weight: 300;#
        max-width: 600px;#
        margin: 0 auto;#
      }#
      .card {#
        background: white;#
        border-radius: 12px;#
        padding: 30px;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);#
        margin-bottom: 30px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(4, 1fr);#
        gap: 20px;#
        margin: 30px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 12px;#
        padding: 25px;#
        text-align: center;#
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);#
        border-left: 4px solid;#
      }#
      .stat-number {#
        font-size: 2rem;#
        font-weight: 600;#
        margin-bottom: 8px;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 30px;#
        margin: 20px 0;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 8px;#
      }#
      .legend-box {#
        width: 16px;#
        height: 16px;#
        border-radius: 3px;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    div(class = "container",#
      h1("Memento Mori", class = "hero-title"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        class = "hero-subtitle")#
    )#
  ),#
  div(class = "container-fluid",#
    # Controls#
    div(class = "card",#
      h3("Create Your Life Calendar"),#
      div(class = "row",#
        div(class = "col-md-3",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date())#
        ),#
        div(class = "col-md-3",#
          selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia")#
        ),#
        div(class = "col-md-3",#
          radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), selected = "Total", inline = TRUE)#
        ),#
        div(class = "col-md-3",#
          radioButtons("granularity", "View Mode", choices = c("Weeks", "Months"), selected = "Months", inline = TRUE)#
        )#
      )#
    ),#
    # Stats#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization#
    div(class = "card",#
      h3("Your Life Visualization"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        )#
      ),#
      # Grid#
      plotOutput("grid_plot", height = "400px")#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    list(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"))#
      )#
    )#
  })#
  # Simple plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.8, height = 0.8, color = "white") +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.8, height = 0.8, color = "white") +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "white", color = NA),#
        panel.background = element_rect(fill = "white", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)  # Round up to prevent errors#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)     # Round up to prevent errors#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  # Better current period detection#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- floor(as.numeric(difftime(current_date, start_date, units = "weeks")))#
    df$today <- (df$idx == (weeks_lived + 1))  # +1 because idx starts at 1#
  } else {#
    # Calculate months since birth for current date#
    months_lived <- interval(start_date, current_date) %/% months(1)#
    df$today <- (df$idx == (months_lived + 1))  # +1 because idx starts at 1#
  }#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      body { #
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; #
        background-color: #f8fafc;#
        color: #2c3e50;#
        line-height: 1.6;#
      }#
      .hero-section {#
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);#
        color: white;#
        padding: 80px 0;#
        text-align: center;#
        margin-bottom: 50px;#
      }#
      .hero-title {#
        font-size: 4rem;#
        font-weight: 300;#
        margin-bottom: 25px;#
        letter-spacing: -2px;#
      }#
      .hero-subtitle {#
        font-size: 1.4rem;#
        opacity: 0.95;#
        font-weight: 300;#
        max-width: 650px;#
        margin: 0 auto;#
        line-height: 1.7;#
      }#
      .main-container {#
        max-width: 1200px;#
        margin: 0 auto;#
        padding: 0 20px;#
      }#
      .card {#
        background: white;#
        border-radius: 16px;#
        padding: 40px;#
        box-shadow: 0 8px 32px rgba(0,0,0,0.06);#
        margin-bottom: 40px;#
        border: 1px solid rgba(255,255,255,0.2);#
      }#
      .card h3 {#
        font-size: 1.8rem;#
        font-weight: 600;#
        margin-bottom: 25px;#
        color: #2c3e50;#
      }#
      .controls-row {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));#
        gap: 30px;#
        margin-top: 20px;#
      }#
      .control-group label {#
        display: block;#
        font-weight: 600;#
        margin-bottom: 8px;#
        color: #374151;#
        font-size: 0.95rem;#
      }#
      .form-control, .form-select {#
        width: 100%;#
        padding: 12px 16px;#
        border: 2px solid #e5e7eb;#
        border-radius: 8px;#
        font-size: 1rem;#
        transition: all 0.2s ease;#
      }#
      .form-control:focus, .form-select:focus {#
        outline: none;#
        border-color: #667eea;#
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);#
      }#
      .radio-group {#
        display: flex;#
        gap: 15px;#
        margin-top: 8px;#
      }#
      .radio-group input[type='radio'] {#
        margin-right: 6px;#
      }#
      .stats-grid {#
        display: grid;#
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));#
        gap: 25px;#
        margin: 40px 0;#
      }#
      .stat-card {#
        background: white;#
        border-radius: 16px;#
        padding: 30px;#
        text-align: center;#
        box-shadow: 0 4px 20px rgba(0,0,0,0.04);#
        border-left: 5px solid;#
        transition: transform 0.2s ease;#
      }#
      .stat-card:hover {#
        transform: translateY(-2px);#
      }#
      .stat-number {#
        font-size: 2.5rem;#
        font-weight: 700;#
        margin-bottom: 8px;#
        line-height: 1;#
      }#
      .stat-label {#
        font-size: 0.9rem;#
        text-transform: uppercase;#
        letter-spacing: 1px;#
        opacity: 0.8;#
        font-weight: 500;#
      }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 40px;#
        margin: 30px 0 40px 0;#
        flex-wrap: wrap;#
      }#
      .legend-item {#
        display: flex;#
        align-items: center;#
        gap: 10px;#
        font-size: 1rem;#
        font-weight: 500;#
      }#
      .legend-box {#
        width: 18px;#
        height: 18px;#
        border-radius: 4px;#
        border: 1px solid rgba(0,0,0,0.1);#
      }#
      .grid-container {#
        background: #fafbfc;#
        border-radius: 12px;#
        padding: 30px;#
        text-align: center;#
        border: 1px solid #e5e7eb;#
      }#
      .footer {#
        text-align: center;#
        padding: 60px 0;#
        color: #6b7280;#
        border-top: 1px solid #e5e7eb;#
        margin-top: 60px;#
        font-style: italic;#
        font-size: 1.1rem;#
      }#
    "))#
  ),#
  # Hero Section#
  div(class = "hero-section",#
    h1("Memento Mori", class = "hero-title"),#
    p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
      class = "hero-subtitle")#
  ),#
  div(class = "main-container",#
    # Controls#
    div(class = "card",#
      h3("Create Your Life Calendar"),#
      p("Enter your details below and watch as your life appears before you—each square representing a unit of time in your journey.", #
        style = "color: #6b7280; margin-bottom: 30px; font-size: 1.1rem;"),#
      div(class = "controls-row",#
        div(class = "control-group",#
          tags$label("Date of Birth"),#
          dateInput("dob", NULL, value = as.Date("1990-01-01"), max = Sys.Date(), class = "form-control")#
        ),#
        div(class = "control-group",#
          tags$label("Country"),#
          selectInput("country", NULL, choices = sort(life_expectancy_data$country), selected = "Malaysia", class = "form-select")#
        ),#
        div(class = "control-group",#
          tags$label("Gender"),#
          div(class = "radio-group",#
            radioButtons("sex", NULL, choices = c("Male", "Female", "Total"), selected = "Total", inline = TRUE)#
          )#
        ),#
        div(class = "control-group",#
          tags$label("View Mode"),#
          div(class = "radio-group",#
            radioButtons("granularity", NULL, choices = c("Weeks", "Months"), selected = "Months", inline = TRUE)#
          )#
        )#
      )#
    ),#
    # Stats#
    div(class = "stats-grid",#
      uiOutput("stats_cards")#
    ),#
    # Visualization#
    div(class = "card",#
      h3("Your Life Visualization"),#
      p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
        style = "color: #6b7280; margin-bottom: 25px; font-size: 1.1rem;"),#
      # Legend#
      div(class = "legend",#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #3498db;"),#
          span("Time Lived")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #ecf0f1;"),#
          span("Future Time")#
        ),#
        div(class = "legend-item",#
          div(class = "legend-box", style = "background-color: #e74c3c;"),#
          span("Current Period")#
        )#
      ),#
      # Grid#
      div(class = "grid-container",#
        plotOutput("grid_plot", height = "450px")#
      )#
    ),#
    # Footer#
    div(class = "footer",#
      "Time is our most valuable resource. Make it count."#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Stats cards#
  output$stats_cards <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    list(#
      div(class = "stat-card", style = "border-left-color: #3498db;",#
        div(sprintf("%.1f", age), class = "stat-number", style = "color: #3498db;"),#
        div("Years Lived", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #2ecc71;",#
        div(round(life_exp, 1), class = "stat-number", style = "color: #2ecc71;"),#
        div("Life Expectancy", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #e67e22;",#
        div(paste0(round(pct_lived, 1), "%"), class = "stat-number", style = "color: #e67e22;"),#
        div("Life Completed", class = "stat-label")#
      ),#
      div(class = "stat-card", style = "border-left-color: #9b59b6;",#
        div(format(sum(df$lived), big.mark = ","), class = "stat-number", style = "color: #9b59b6;"),#
        div(paste(input$granularity, "Lived"), class = "stat-label")#
      )#
    )#
  })#
  # Fixed plot with better current period detection#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  titlePanel("Memento Mori"),#
  sidebarLayout(#
    sidebarPanel(#
      # Quote section#
      div(#
        style = "background-color: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; margin-bottom: 25px;",#
        h4("About", style = "color: #667eea; margin-bottom: 15px;"),#
        p(style = "font-style: italic; color: #6c757d; line-height: 1.5;",#
          "I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      ),#
      # Controls#
      h4("Settings"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.9em; color: #6c757d; text-align: center; font-style: italic;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", style = "margin-bottom: 20px; color: #2c3e50;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  # Custom title with quote#
  div(#
    style = "background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; margin-bottom: 0;",#
    div(#
      style = "max-width: 1200px; margin: 0 auto;",#
      h1("Memento Mori", style = "font-size: 2.5rem; font-weight: 300; margin-bottom: 15px; letter-spacing: -1px;"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        style = "font-size: 1.1rem; font-style: italic; opacity: 0.95; margin: 0; line-height: 1.6; max-width: 600px;")#
    )#
  ),#
  sidebarLayout(#
    sidebarPanel(#
      # Controls#
      h4("Settings", style = "margin-top: 0;"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.9em; color: #6c757d; text-align: center; font-style: italic;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", style = "margin-bottom: 20px; color: #2c3e50;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  # Import elegant Google Fonts#
  tags$head(#
    tags$link(href = "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Source+Serif+Pro:wght@400;600&display=swap", rel = "stylesheet")#
  ),#
  # Custom title with quote - much darker background#
  div(#
    style = "background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%); color: white; padding: 40px 20px; margin-bottom: 0; box-shadow: 0 4px 20px rgba(0,0,0,0.3);",#
    div(#
      style = "max-width: 1200px; margin: 0 auto;",#
      h1("Memento Mori", #
         style = "font-family: 'Playfair Display', serif; font-size: 3.2rem; font-weight: 600; margin-bottom: 20px; letter-spacing: 1px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);"),#
      p("I make time tangible. It reminds us how silently life slips away. It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
        style = "font-family: 'Source Serif Pro', serif; font-size: 1.2rem; font-style: italic; opacity: 0.9; margin: 0; line-height: 1.7; max-width: 650px; color: #e8eaf6; font-weight: 400;")#
    )#
  ),#
  sidebarLayout(#
    sidebarPanel(#
      # Controls#
      h4("Settings", style = "margin-top: 0; color: #2c3e50; font-family: 'Source Serif Pro', serif;"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats", style = "color: #2c3e50; font-family: 'Source Serif Pro', serif;"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.9em; color: #6c757d; text-align: center; font-style: italic; font-family: 'Source Serif Pro', serif;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", #
           style = "margin-bottom: 20px; color: #2c3e50; font-family: 'Source Serif Pro', serif; font-weight: 600;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px; font-family: 'Source Serif Pro', serif;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  # Import elegant Google Fonts#
  tags$head(#
    tags$link(href = "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Source+Serif+Pro:wght@400;600&display=swap", rel = "stylesheet")#
  ),#
  # Custom title with two-column layout#
  div(#
    style = "background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%); color: white; padding: 40px 20px; margin-bottom: 0; box-shadow: 0 4px 20px rgba(0,0,0,0.3);",#
    div(#
      style = "max-width: 1200px; margin: 0 auto; display: flex; align-items: center; gap: 40px;",#
      # Left column - Large title#
      div(#
        style = "flex: 0 0 auto;",#
        h1("Memento Mori", #
           style = "font-family: 'Playfair Display', serif; font-size: 4rem; font-weight: 600; margin: 0; letter-spacing: 1px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); white-space: nowrap;")#
      ),#
      # Right column - Description in two rows#
      div(#
        style = "flex: 1; display: flex; flex-direction: column; gap: 8px;",#
        p("I make time tangible. It reminds us how silently life slips away.", #
          style = "font-family: 'Source Serif Pro', serif; font-size: 1.1rem; font-style: italic; opacity: 0.9; margin: 0; line-height: 1.5; color: #e8eaf6; font-weight: 400;"),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
          style = "font-family: 'Source Serif Pro', serif; font-size: 1.1rem; font-style: italic; opacity: 0.9; margin: 0; line-height: 1.5; color: #e8eaf6; font-weight: 400;")#
      )#
    )#
  ),#
  sidebarLayout(#
    sidebarPanel(#
      # Controls#
      h4("Settings", style = "margin-top: 0; color: #2c3e50; font-family: 'Source Serif Pro', serif;"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats", style = "color: #2c3e50; font-family: 'Source Serif Pro', serif;"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.9em; color: #6c757d; text-align: center; font-style: italic; font-family: 'Source Serif Pro', serif;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", #
           style = "margin-bottom: 20px; color: #2c3e50; font-family: 'Source Serif Pro', serif; font-weight: 600;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px; font-family: 'Source Serif Pro', serif;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Source Serif Pro', serif;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center; font-family: 'Source Serif Pro', serif;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  # Import elegant fonts - Inter for title, Source Serif Pro for subtitle#
  tags$head(#
    tags$link(href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Source+Serif+Pro:wght@400;600&display=swap", rel = "stylesheet")#
  ),#
  # Custom title with two-column layout#
  div(#
    style = "background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%); color: white; padding: 40px 20px; margin-bottom: 0; box-shadow: 0 4px 20px rgba(0,0,0,0.3);",#
    div(#
      style = "max-width: 1200px; margin: 0 auto; display: flex; align-items: center; gap: 50px;",#
      # Left column - Large title with sans-serif font#
      div(#
        style = "flex: 0 0 auto;",#
        h1("Memento Mori", #
           style = "font-family: 'Inter', sans-serif; font-size: 4.2rem; font-weight: 300; margin: 0; letter-spacing: -2px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); white-space: nowrap; line-height: 1;")#
      ),#
      # Right column - Description in two rows with larger font#
      div(#
        style = "flex: 1; display: flex; flex-direction: column; gap: 12px;",#
        p("I make time tangible. It reminds us how silently life slips away.", #
          style = "font-family: 'Source Serif Pro', serif; font-size: 1.4rem; font-style: italic; opacity: 0.95; margin: 0; line-height: 1.6; color: #e8eaf6; font-weight: 400;"),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
          style = "font-family: 'Source Serif Pro', serif; font-size: 1.4rem; font-style: italic; opacity: 0.95; margin: 0; line-height: 1.6; color: #e8eaf6; font-weight: 400;")#
      )#
    )#
  ),#
  sidebarLayout(#
    sidebarPanel(#
      # Controls#
      h4("Settings", style = "margin-top: 0; color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats", style = "color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.95rem; color: #6c757d; text-align: center; font-style: italic; font-family: 'Source Serif Pro', serif;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", #
           style = "margin-bottom: 20px; color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px; font-family: 'Source Serif Pro', serif; font-size: 1.05rem;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Inter', sans-serif; font-weight: 400;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Inter', sans-serif; font-weight: 400;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Inter', sans-serif; font-weight: 400;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Inter', sans-serif;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Inter', sans-serif;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Inter', sans-serif;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center; font-family: 'Inter', sans-serif;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(#
    date = unit_dates,#
    lived = unit_dates <= current_date,#
    stringsAsFactors = FALSE#
  )#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  # Fixed current period detection - create today column with correct length#
  df$today <- FALSE  # Initialize all as FALSE#
  if (granularity == "Weeks") {#
    # Calculate weeks since birth for current date#
    weeks_lived <- as.numeric(difftime(current_date, start_date, units = "weeks"))#
    current_week_idx <- floor(weeks_lived) + 1#
    if (current_week_idx > 0 && current_week_idx <= nrow(df)) {#
      df$today[current_week_idx] <- TRUE#
    }#
  } else {#
    # Calculate months since birth for current date  #
    months_lived <- interval(start_date, current_date) %/% months(1)#
    current_month_idx <- months_lived + 1#
    if (current_month_idx > 0 && current_month_idx <= nrow(df)) {#
      df$today[current_month_idx] <- TRUE#
    }#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  # Import matching sans-serif fonts - Inter for title, Work Sans for subtitle#
  tags$head(#
    tags$link(href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Work+Sans:wght@400;500;600&display=swap", rel = "stylesheet")#
  ),#
  # Custom title with pale background and dark font#
  div(#
    style = "background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 50%, #dee2e6 100%); color: #2c3e50; padding: 50px 20px; margin-bottom: 0; box-shadow: 0 2px 15px rgba(0,0,0,0.1); border-bottom: 1px solid #d6d9dc;",#
    div(#
      style = "max-width: 1200px; margin: 0 auto; display: flex; align-items: center; gap: 60px;",#
      # Left column - Large title with dark font#
      div(#
        style = "flex: 0 0 auto;",#
        h1("Memento Mori", #
           style = "font-family: 'Inter', sans-serif; font-size: 4.5rem; font-weight: 300; margin: 0; letter-spacing: -2px; color: #1a1a1a; white-space: nowrap; line-height: 1;")#
      ),#
      # Right column - Description in two rows with larger sans-serif font#
      div(#
        style = "flex: 1; display: flex; flex-direction: column; gap: 16px;",#
        p("I make time tangible. It reminds us how silently life slips away.", #
          style = "font-family: 'Work Sans', sans-serif; font-size: 1.6rem; font-weight: 400; margin: 0; line-height: 1.5; color: #495057;"),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.", #
          style = "font-family: 'Work Sans', sans-serif; font-size: 1.6rem; font-weight: 400; margin: 0; line-height: 1.5; color: #495057;")#
      )#
    )#
  ),#
  sidebarLayout(#
    sidebarPanel(#
      # Controls#
      h4("Settings", style = "margin-top: 0; color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
      dateInput("dob", #
                "Date of Birth:", #
                value = as.Date("1990-01-01"), #
                max = Sys.Date()),#
      selectInput("country", #
                  "Country:", #
                  choices = sort(life_expectancy_data$country), #
                  selected = "Malaysia"),#
      radioButtons("sex", #
                   "Gender:", #
                   choices = c("Male", "Female", "Total"), #
                   selected = "Total"),#
      radioButtons("granularity", #
                   "View Mode:", #
                   choices = c("Weeks", "Months"), #
                   selected = "Months"),#
      hr(),#
      # Stats in sidebar#
      h4("Your Stats", style = "color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
      uiOutput("sidebar_stats"),#
      # Footer#
      div(#
        style = "margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.95rem; color: #6c757d; text-align: center; font-family: 'Work Sans', sans-serif;",#
        "Time is our most valuable resource."#
      )#
    ),#
    mainPanel(#
      # Main visualization#
      div(#
        style = "background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);",#
        h3("Your Life Visualization", #
           style = "margin-bottom: 20px; color: #2c3e50; font-family: 'Inter', sans-serif; font-weight: 500;"),#
        p("Each square represents a unit of your life. Reflect on where you've been and where you're going.", #
          style = "color: #6c757d; margin-bottom: 25px; font-family: 'Work Sans', sans-serif; font-size: 1.1rem;"),#
        # Legend#
        div(#
          style = "display: flex; justify-content: center; gap: 30px; margin-bottom: 30px; flex-wrap: wrap;",#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Work Sans', sans-serif; font-weight: 500;",#
            div(style = "width: 16px; height: 16px; background-color: #3498db; border-radius: 3px;"),#
            span("Time Lived")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Work Sans', sans-serif; font-weight: 500;",#
            div(style = "width: 16px; height: 16px; background-color: #ecf0f1; border-radius: 3px; border: 1px solid #bdc3c7;"),#
            span("Future Time")#
          ),#
          div(#
            style = "display: flex; align-items: center; gap: 8px; font-family: 'Work Sans', sans-serif; font-weight: 500;",#
            div(style = "width: 16px; height: 16px; background-color: #e74c3c; border-radius: 3px;"),#
            span("Current Period")#
          )#
        ),#
        # Grid container#
        div(#
          style = "background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center;",#
          plotOutput("grid_plot", height = "500px")#
        )#
      )#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_expectancy <- reactive({#
    req(input$country, input$sex)#
    get_life_expectancy(input$country, input$sex)#
  })#
  current_age <- reactive({#
    req(input$dob)#
    as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25#
  })#
  boxes_data <- reactive({#
    req(input$dob, life_expectancy())#
    make_boxes_data(input$dob, life_expectancy(), input$granularity)#
  })#
  # Sidebar stats#
  output$sidebar_stats <- renderUI({#
    age <- current_age()#
    life_exp <- life_expectancy()#
    df <- boxes_data()#
    pct_lived <- mean(df$lived) * 100#
    div(#
      div(#
        style = "background: #e3f2fd; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Work Sans', sans-serif;",#
        strong(sprintf("%.1f years", age), style = "font-size: 1.2em; color: #1976d2;"),#
        br(),#
        span("Years Lived", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #e8f5e8; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Work Sans', sans-serif;",#
        strong(paste(round(life_exp, 1), "years"), style = "font-size: 1.2em; color: #388e3c;"),#
        br(),#
        span("Life Expectancy", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #fff3e0; padding: 15px; border-radius: 6px; margin-bottom: 10px; text-align: center; font-family: 'Work Sans', sans-serif;",#
        strong(paste0(round(pct_lived, 1), "%"), style = "font-size: 1.2em; color: #f57c00;"),#
        br(),#
        span("Life Completed", style = "font-size: 0.9em; color: #666;")#
      ),#
      div(#
        style = "background: #f3e5f5; padding: 15px; border-radius: 6px; text-align: center; font-family: 'Work Sans', sans-serif;",#
        strong(format(sum(df$lived), big.mark = ","), style = "font-size: 1.2em; color: #7b1fa2;"),#
        br(),#
        span(paste(input$granularity, "Lived"), style = "font-size: 0.9em; color: #666;")#
      )#
    )#
  })#
  # Main plot#
  output$grid_plot <- renderPlot({#
    df <- boxes_data()#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c(`TRUE` = "#3498db", `FALSE` = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df)); df$row <- floor((df$idx - 1)/n_cols)+1; df$col <- ((df$idx -1)%%n_cols)+1#
  df$today <- FALSE#
  if (granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units="weeks")))+1#
    if (wi>0&&wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date)%/%months(1)+1#
    if (mi>0&&mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(tags$link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
            tags$style(HTML("#
      body{font-family:Work Sans,sans-serif;background:#f8f9fa;color:#2c3e50;margin:0;padding:0}#
      .header{background:#e9ecef;color:#1a1a1a;padding:30px 20px;display:flex;align-items:center;gap:40px;}#
      .header h1{font-family:Inter,sans-serif;font-size:3.5rem;font-weight:300;margin:0;white-space:nowrap;}#
      .header p{font-size:1.8rem;line-height:1.4;margin:0;color:#495057;}#
      .sidebar .well{padding:15px;border:none;border-radius:6px;margin-bottom:20px}#
      .sidebar h4{margin-top:0;font-family:Inter,sans-serif;font-weight:600}#
      .sidebar .stat{background:#fff;padding:10px;margin-bottom:10px;border-radius:6px;text-align:center}#
      .sidebar .stat strong{display:block;font-size:1.2rem;color:#333}#
      .main{padding:20px}#
      .legend{display:flex;justify-content:center;gap:20px;margin-bottom:10px}#
      .legend-box{width:14px;height:14px;border-radius:3px;border:1px solid #ccc}#
      .grid{background:#fff;padding:10px;border-radius:6px}#
    "))),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class="sidebar", width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months"),#
      h4("Your Stats"),#
      uiOutput("sidebar_stats")#
    ),#
    mainPanel(class="main", width=9,#
      div(class="legend",#
        div(class="legend-item",div(class="legend-box",style="background:#3498db"),span("Lived")),#
        div(class="legend-item",div(class="legend-box",style="background:#ecf0f1"),span("Future")),#
        div(class="legend-item",div(class="legend-box",style="background:#e74c3c"),span("Current"))#
      ),#
      div(class="grid",plotOutput("grid_plot",height="450px"))#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_exp <- reactive(get_life_expectancy(input$country,input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(),input$dob,units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob,life_exp(),input$granularity))#
  output$sidebar_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat",strong(sprintf("%.1f yrs",age())),span("Years Lived")),#
      div(class="stat",strong(sprintf("%.1f yrs",life_exp())),span("Life Expectancy")),#
      div(class="stat",strong(sprintf("%.0f%%",pct)),span("Completed")),#
      div(class="stat",strong(sum(d$lived)),span(paste(input$granularity,"Lived")))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d,aes(x=col,y=-row))+#
      geom_tile(aes(fill=lived),color="white",size=0.2)+#
      geom_tile(data=d[d$today,],fill="#e74c3c",color="white",size=0.5)+#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"),guide="none")+#
      theme_void()#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df)); df$row <- floor((df$idx - 1)/n_cols)+1; df$col <- ((df$idx -1)%%n_cols)+1#
  df$today <- FALSE#
  if (granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units="weeks")))+1#
    if (wi>0&&wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date)%/%months(1)+1#
    if (mi>0&&mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(tags$link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
            tags$style(HTML("#
      body{font-family:Work Sans,sans-serif;background:#f8f9fa;color:#2c3e50;margin:0;padding:0}#
      .header{background:#e9ecef;color:#1a1a1a;padding:30px 20px;display:flex;align-items:center;gap:40px;}#
      .header h1{font-family:Inter,sans-serif;font-size:3.5rem;font-weight:300;margin:0;white-space:nowrap;}#
      .header p{font-size:1.8rem;line-height:1.4;margin:0;color:#495057;}#
      .sidebar .well{padding:15px;border:none;border-radius:6px;margin-bottom:20px}#
      .sidebar h4{margin-top:0;font-family:Inter,sans-serif;font-weight:600}#
      .main{padding:20px}#
      .stats-horizontal{display:flex;justify-content:center;gap:30px;margin-bottom:20px;flex-wrap:wrap}#
      .stat-horizontal{background:#fff;padding:15px 20px;border-radius:8px;text-align:center;min-width:120px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
      .stat-horizontal strong{display:block;font-size:1.4rem;font-weight:600;margin-bottom:4px}#
      .stat-horizontal span{font-size:0.9rem;color:#666;text-transform:uppercase;letter-spacing:0.5px}#
      .legend{display:flex;justify-content:center;gap:25px;margin-bottom:15px}#
      .legend-item{display:flex;align-items:center;gap:8px;font-weight:500}#
      .legend-box{width:16px;height:16px;border-radius:3px;border:1px solid #ccc}#
      .grid{background:#fff;padding:15px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
    "))),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class="sidebar", width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months")#
    ),#
    mainPanel(class="main", width=9,#
      # Horizontal stats above legend#
      div(class="stats-horizontal", uiOutput("horizontal_stats")),#
      # Legend#
      div(class="legend",#
        div(class="legend-item",div(class="legend-box",style="background:#3498db"),span("Time Lived")),#
        div(class="legend-item",div(class="legend-box",style="background:#ecf0f1"),span("Future Time")),#
        div(class="legend-item",div(class="legend-box",style="background:#e74c3c"),span("Current Period"))#
      ),#
      # Grid#
      div(class="grid",plotOutput("grid_plot",height="420px"))#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_exp <- reactive(get_life_expectancy(input$country,input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(),input$dob,units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob,life_exp(),input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat-horizontal", style="border-left:4px solid #3498db",#
          strong(sprintf("%.1f", age())), span("Years Lived")),#
      div(class="stat-horizontal", style="border-left:4px solid #2ecc71",#
          strong(sprintf("%.1f", life_exp())), span("Life Expectancy")),#
      div(class="stat-horizontal", style="border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%", pct)), span("Life Completed")),#
      div(class="stat-horizontal", style="border-left:4px solid #9b59b6",#
          strong(format(sum(d$lived), big.mark=",")), span(paste(input$granularity, "Lived")))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d,aes(x=col,y=-row))+#
      geom_tile(aes(fill=lived),width=0.85,height=0.85,color="white",size=0.3)+#
      geom_tile(data=d[d$today,],fill="#e74c3c",width=0.85,height=0.85,color="white",size=0.8)+#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"),guide="none")+#
      theme_void()+#
      theme(plot.background=element_rect(fill="transparent",color=NA))#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df)); df$row <- floor((df$idx - 1)/n_cols)+1; df$col <- ((df$idx -1)%%n_cols)+1#
  df$today <- FALSE#
  if (granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units="weeks")))+1#
    if (wi>0&&wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date)%/%months(1)+1#
    if (mi>0&&mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(tags$link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
            tags$style(HTML("#
      body{font-family:Work Sans,sans-serif;background:#f8f9fa;color:#2c3e50;margin:0;padding:0}#
      .header{background:#e9ecef;color:#1a1a1a;padding:30px 20px;display:flex;align-items:center;gap:40px;}#
      .header h1{font-family:Inter,sans-serif;font-size:3.5rem;font-weight:300;margin:0;white-space:nowrap;}#
      .header p{font-size:1.8rem;line-height:1.4;margin:0;color:#495057;}#
      .sidebar .well{padding:15px;border:none;border-radius:6px;margin-bottom:20px}#
      .sidebar h4{margin-top:0;font-family:Inter,sans-serif;font-weight:600}#
      .sidebar .stat{background:#fff;padding:10px;margin-bottom:10px;border-radius:6px;text-align:center}#
      .sidebar .stat strong{display:block;font-size:1.2rem;color:#333}#
      .main{padding:20px}#
      .legend{display:flex;justify-content:center;gap:20px;margin-bottom:10px}#
      .legend-box{width:14px;height:14px;border-radius:3px;border:1px solid #ccc}#
      .grid{background:#fff;padding:10px;border-radius:6px}#
    "))),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class="sidebar", width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months"),#
      h4("Your Stats"),#
      uiOutput("sidebar_stats")#
    ),#
    mainPanel(class="main", width=9,#
      div(class="legend",#
        div(class="legend-item",div(class="legend-box",style="background:#3498db"),span("Lived")),#
        div(class="legend-item",div(class="legend-box",style="background:#ecf0f1"),span("Future")),#
        div(class="legend-item",div(class="legend-box",style="background:#e74c3c"),span("Current"))#
      ),#
      div(class="grid",plotOutput("grid_plot",height="450px"))#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_exp <- reactive(get_life_expectancy(input$country,input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(),input$dob,units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob,life_exp(),input$granularity))#
  output$sidebar_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat",strong(sprintf("%.1f yrs",age())),span("Years Lived")),#
      div(class="stat",strong(sprintf("%.1f yrs",life_exp())),span("Life Expectancy")),#
      div(class="stat",strong(sprintf("%.0f%%",pct)),span("Completed")),#
      div(class="stat",strong(sum(d$lived)),span(paste(input$granularity,"Lived")))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d,aes(x=col,y=-row))+#
      geom_tile(aes(fill=lived),color="white",size=0.2)+#
      geom_tile(data=d[d$today,],fill="#e74c3c",color="white",size=0.5)+#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"),guide="none")+#
      theme_void()#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df)); df$row <- floor((df$idx - 1)/n_cols)+1; df$col <- ((df$idx -1)%%n_cols)+1#
  df$today <- FALSE#
  if (granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units="weeks")))+1#
    if (wi>0 && wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date)%/%months(1)+1#
    if (mi>0 && mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body{font-family:'Work Sans',sans-serif;background:#f8f9fa;color:#2c3e50;margin:0;padding:0}#
      .header{background:#e9ecef;color:#1a1a1a;padding:30px 20px;display:flex;align-items:center;gap:40px;}#
      .header h1{font-family:'Inter',sans-serif;font-size:3.5rem;font-weight:300;margin:0;white-space:nowrap;}#
      .header p{font-size:1.8rem;line-height:1.4;margin:0;color:#495057;}#
      .sidebar .well{padding:15px;border:none;border-radius:6px;margin-bottom:20px}#
      .sidebar h4{margin-top:20px;font-family:'Inter',sans-serif;font-weight:600}#
      .main{padding:20px}#
      .stats-horizontal{display:flex;justify-content:space-around;margin-bottom:10px;flex-wrap:wrap}#
      .stat-horizontal{background:#fff;padding:15px 20px;border-radius:8px;text-align:center;min-width:120px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
      .stat-horizontal strong{display:block;font-size:1.4rem;font-weight:600;margin-bottom:4px}#
      .stat-horizontal span{font-size:0.9rem;color:#666;text-transform:uppercase;letter-spacing:0.5px}#
      .legend{display:flex;justify-content:center;gap:20px;margin-bottom:15px;flex-wrap:wrap}#
      .legend-item{display:flex;align-items:center;gap:8px;font-weight:500}#
      .legend-box{width:16px;height:16px;border-radius:3px;border:1px solid #ccc}#
      .grid{background:#fff;padding:15px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
    "))#
  ),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class="sidebar", width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months")#
    ),#
    mainPanel(class="main", width=9,#
      div(class="stats-horizontal", uiOutput("horizontal_stats")),#
      div(class="legend",#
        div(class="legend-item",div(class="legend-box",style="background:#3498db"),span("Time Lived")),#
        div(class="legend-item",div(class="legend-box",style="background:#ecf0f1"),span("Future Time")),#
        div(class="legend-item",div(class="legend-box",style="background:#e74c3c"),span("Current Period"))#
      ),#
      div(class="grid",plotOutput("grid_plot",height="420px"))#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_exp <- reactive(get_life_expectancy(input$country,input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(),input$dob,units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob,life_exp(),input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat-horizontal",style="border-left:4px solid #3498db",#
          strong(sprintf("%.1f",age())),span("Years Lived")),#
      div(class="stat-horizontal",style="border-left:4px solid #2ecc71",#
          strong(sprintf("%.1f",life_exp())),span("Life Expectancy")),#
      div(class="stat-horizontal",style="border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%",pct)),span("Life Completed")),#
      div(class="stat-horizontal",style="border-left:4px solid #9b59b6",#
          strong(format(sum(d$lived),big.mark=",")),span(paste(input$granularity,"Lived")))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d,aes(x=col,y=-row))+#
      geom_tile(aes(fill=lived),width=0.85,height=0.85,color="white",size=0.3)+#
      geom_tile(data=d[d$today,],fill="#e74c3c",width=0.85,height=0.85,color="white",size=0.8)+#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"),guide="none")+#
      theme_void()+#
      theme(plot.background=element_rect(fill="transparent",color=NA))#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex){#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity){#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df)); df$row <- floor((df$idx - 1)/n_cols)+1; df$col <- ((df$idx -1)%%n_cols)+1#
  df$today <- FALSE#
  if (granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units="weeks")))+1#
    if (wi>0 && wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date)%/%months(1)+1#
    if (mi>0 && mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body{font-family:'Work Sans',sans-serif;background:#f8f9fa;color:#2c3e50;margin:0;padding:0}#
      .header{background:#e9ecef;color:#1a1a1a;padding:30px 20px;display:flex;align-items:center;gap:40px;}#
      .header h1{font-family:'Inter',sans-serif;font-size:3.5rem;font-weight:300;margin:0;white-space:nowrap;}#
      .header p{font-family:'Work Sans',sans-serif;font-size:1.8rem;line-height:1.4;margin:0;color:#495057;}#
      .sidebar .well{padding:15px;border:none;border-radius:6px;margin-bottom:20px}#
      .sidebar h4{margin-top:20px;font-family:'Inter',sans-serif;font-weight:600}#
      .main{padding:20px}#
      .stats-horizontal{display:flex;justify-content:space-evenly;margin-bottom:10px;flex-wrap:wrap}#
      .stat-horizontal{background:#fff;padding:12px 16px;border-radius:8px;text-align:center;min-width:140px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
      .stat-horizontal strong{display:block;font-size:1.3rem;font-weight:600;color:#333}#
      .stat-horizontal span{font-size:0.85rem;color:#666;text-transform:none;letter-spacing:0}#
      .legend{display:flex;justify-content:center;gap:12px;margin-bottom:8px;flex-wrap:wrap}#
      .legend-item{display:flex;align-items:center;gap:4px;font-weight:500;font-size:0.9rem}#
      .legend-box{width:12px;height:12px;border-radius:3px;border:1px solid #ccc}#
      .grid{background:#fff;padding:10px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
    "))#
  ),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class="sidebar", width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months")#
    ),#
    mainPanel(class="main", width=9,#
      div(class="stats-horizontal", uiOutput("horizontal_stats")),#
      div(class="legend",#
          div(class="legend-item",div(class="legend-box",style="background:#3498db"),span("Lived")),#
          div(class="legend-item",div(class="legend-box",style="background:#ecf0f1"),span("Future")),#
          div(class="legend-item",div(class="legend-box",style="background:#e74c3c"),span("Current"))#
      ),#
      div(class="grid",plotOutput("grid_plot",height="420px"))#
    )#
  )#
)#
#
server <- function(input, output, session){#
  life_exp <- reactive(get_life_expectancy(input$country,input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(),input$dob,units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob,life_exp(),input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat-horizontal",style="border-left:4px solid #3498db",#
          strong(sprintf("%.1fYears",age())),span("Lived")),#
      div(class="stat-horizontal",style="border-left:4px solid #2ecc71",#
          strong(sprintf("%.1fLife",life_exp())),span("Expectancy")),#
      div(class="stat-horizontal",style="border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%Life",pct)),span("Completed")),#
      div(class="stat-horizontal",style="border-left:4px solid #9b59b6",#
          strong(paste0(sum(d$lived),input$granularity)),span("Lived"))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d,aes(x=col,y=-row))+#
      geom_tile(aes(fill=lived),width=0.85,height=0.85,color="white",size=0.3)+#
      geom_tile(data=d[d$today,],fill="#e74c3c",width=0.85,height=0.85,color="white",size=0.8)+#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"),guide="none")+#
      theme_void()+#
      theme(plot.background=element_rect(fill="transparent",color=NA))#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; color:#2c3e50; margin:0; padding:0 }#
      .header { background:#e9ecef; color:#1a1a1a; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0; white-space:nowrap }#
      .header p { font-family:'Work Sans',sans-serif; font-size:1.8rem; line-height:1.4; margin:0; color:#495057 }#
      .sidebar { padding:20px }#
      .sidebar h4 { font-family:'Inter',sans-serif; font-weight:600; margin-top:20px }#
      .main { padding:20px }#
      .stats-horizontal { display:flex; justify-content:space-around; align-items:center; gap:20px; margin-bottom:10px; flex-wrap:wrap }#
      .stat-horizontal { background:#fff; padding:12px 16px; border-radius:8px; text-align:center; min-width:140px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
      .stat-horizontal strong { display:block; font-family:'Inter',sans-serif; font-size:1.3rem; font-weight:600; color:#333 }#
      .stat-horizontal span { font-size:0.9rem; color:#666; }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:15px; flex-wrap:wrap }#
      .legend-item { display:flex; align-items:center; gap:6px; font-weight:500; font-family:'Work Sans',sans-serif }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
    "))#
  ),#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class = "sidebar", width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia", "Singapore", "Japan", "South Korea", "United States", #
              "United Kingdom", "Australia", "Canada", "Germany", "France"),#
  male = c(74.1, 81.2, 81.6, 79.8, 76.3, 79.4, 81.2, 80.9, 78.9, 79.8),#
  female = c(78.2, 85.8, 87.6, 85.7, 81.2, 82.9, 85.4, 84.7, 83.6, 85.6),#
  total = c(76.2, 83.5, 84.6, 82.8, 78.8, 81.2, 83.3, 82.8, 81.3, 82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  current_date <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    unit_dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    unit_dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = unit_dates, lived = unit_dates <= current_date)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(current_date, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, current_date) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; color:#2c3e50; margin:0; padding:0 }#
      .header { background:#e9ecef; color:#1a1a1a; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0; white-space:nowrap }#
      .header p { font-family:'Work Sans',sans-serif; font-size:1.8rem; line-height:1.4; margin:0; color:#495057 }#
      .sidebar { padding:20px }#
      .sidebar h4 { font-family:'Inter',sans-serif; font-weight:600; margin-top:20px }#
      .main { padding:20px }#
      .stats-horizontal { display:flex; justify-content:space-around; align-items:center; gap:20px; margin-bottom:10px; flex-wrap:wrap }#
      .stat-horizontal { background:#fff; padding:12px 16px; border-radius:8px; text-align:center; min-width:140px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
      .stat-horizontal strong { display:block; font-family:'Inter',sans-serif; font-size:1.3rem; font-weight:600; color:#333 }#
      .stat-horizontal span { font-size:0.9rem; color:#666; }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:15px; flex-wrap:wrap }#
      .legend-item { display:flex; align-items:center; gap:6px; font-weight:500; font-family:'Work Sans',sans-serif }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
    "))#
  ),#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(class = "sidebar", width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male", "Female", "Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices = c("Weeks", "Months"), selected = "Months")#
    ),#
    mainPanel(class = "main", width = 9,#
      div(class = "stats-horizontal", uiOutput("horizontal_stats")),#
      div(class = "legend",#
          div(class = "legend-item", div(class = "legend-box", style = "background:#3498db"), span("Lived")),#
          div(class = "legend-item", div(class = "legend-box", style = "background:#ecf0f1"), span("Future")),#
          div(class = "legend-item", div(class = "legend-box", style = "background:#e74c3c"), span("Current"))#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "420px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units = "days")) / 365.25)#
  df <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df()#
    pct <- mean(d$lived) * 100#
    tagList(#
      div(class = "stat-horizontal", style = "border-left:4px solid #3498db",#
          strong(sprintf("%.1fYears Lived", age())), span("")),#
      div(class = "stat-horizontal", style = "border-left:4px solid #2ecc71",#
          strong(sprintf("%.1fLife Expectancy", life_exp())), span("")),#
      div(class = "stat-horizontal", style = "border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%Life Completed", pct)), span("")),#
      div(class = "stat-horizontal", style = "border-left:4px solid #9b59b6",#
          strong(paste0(sum(d$lived), input$granularity, " Lived")), span(""))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(plot.background = element_rect(fill = "transparent", color = NA),#
            panel.background = element_rect(fill = "transparent", color = NA))#
  })#
}#
#
shinyApp(ui, server)
# In ui -> mainPanel:#
mainPanel(#
  # Stats row#
  div(style="display:flex; justify-content:space-between; align-items:center; margin-bottom:10px;",#
      # Years lived#
      div(style="flex:1; text-align:center;",#
          strong(sprintf("%.1fYears Lived", age()), style="font-size:1.4rem;"),#
      ),#
      # Life expectancy#
      div(style="flex:1; text-align:center;",#
          strong(sprintf("%.1fLife Expectancy", life_expectancy()), style="font-size:1.4rem;")#
      ),#
      # Percent completed#
      div(style="flex:1; text-align:center;",#
          strong(sprintf("%.0f%%Life Completed", mean(dflived())*100), style="font-size:1.4rem;")#
      ),#
      # Units lived#
      div(style="flex:1; text-align:center;",#
          strong(sprintf("%s%s Lived", sum(dflived()), input$granularity), style="font-size:1.4rem;")#
      )#
  ),#
  # Legend row#
  div(style="display:flex; justify-content:center; gap:30px; margin-bottom:15px;",#
      div(style="display:flex;align-items:center;gap:6px;",#
          div(style="width:14px;height:14px;background:#3498db;border-radius:3px;"),#
          span("Lived")#
      ),#
      div(style="display:flex;align-items:center;gap:6px;",#
          div(style="width:14px;height:14px;background:#ecf0f1;border-radius:3px;border:1px solid #ccc;"),#
          span("Future")#
      ),#
      div(style="display:flex;align-items:center;gap:6px;",#
          div(style="width:14px;height:14px;background:#e74c3c;border-radius:3px;"),#
          span("Current")#
      )#
  ),#
  # Grid#
  plotOutput("grid_plot", height="450px")#
)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country==country,]#
  if(sex=="Male") return(row$male)#
  if(sex=="Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start <- as.Date(dob); today <- Sys.Date()#
  if(granularity=="Weeks") {#
    total <- ceiling(expected_age*52.18); cols <- 52#
    dates <- seq.Date(start, by="week", length.out=total)#
  } else {#
    total <- ceiling(expected_age*12); cols <- 12#
    dates <- seq.Date(floor_date(start,"month"), by="month", length.out=total)#
  }#
  df <- data.frame(date=dates, lived=dates<=today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx-1)/cols)+1#
  df$col <- ((df$idx-1)%%cols)+1#
  df$today <- FALSE#
  if(granularity=="Weeks") {#
    wi <- floor(as.numeric(difftime(today,start,units="weeks")))+1#
    if(wi>0 && wi<=nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start,today)%/%months(1)+1#
    if(mi>0 && mi<=nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel="stylesheet",#
              href="https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body {font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0}#
      .header {background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px}#
      .header h1 {font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0}#
      .header p {font-size:1.8rem; line-height:1.4; margin:0}#
      .stats-row {display:flex; justify-content:space-around; margin:15px 0}#
      .stat {background:#fff; padding:12px 16px; border-radius:8px; text-align:center; min-width:130px; box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
      .stat strong {display:block; font-family:'Inter',sans-serif; font-size:1.3rem; font-weight:600}#
      .legend {display:flex; justify-content:center; gap:20px; margin-bottom:10px}#
      .legend-box {width:14px; height:14px; border-radius:3px; border:1px solid #ccc}#
      .grid {background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08)}#
    "))#
  ),#
  div(class="header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width=3,#
      dateInput("dob","Date of Birth",value=as.Date("1990-01-01"),max=Sys.Date()),#
      selectInput("country","Country",choices=sort(life_expectancy_data$country),selected="Malaysia"),#
      radioButtons("sex","Gender",choices=c("Male","Female","Total"),selected="Total"),#
      radioButtons("granularity","View Mode",choices=c("Weeks","Months"),selected="Months")#
    ),#
    mainPanel(width=9,#
      div(class="stats-row", uiOutput("horizontal_stats")),#
      div(class="legend",#
          div(class="legend-box", style="background:#3498db"), span("Lived"),#
          div(class="legend-box", style="background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class="legend-box", style="background:#e74c3c"), span("Current")#
      ),#
      div(class="grid", plotOutput("grid_plot", height="420px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units="days"))/365.25)#
  df <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df(); pct <- mean(d$lived)*100#
    tagList(#
      div(class="stat", style="border-left:4px solid #3498db",#
          strong(sprintf("%.1fYears Lived", age())), ""),#
      div(class="stat", style="border-left:4px solid #2ecc71",#
          strong(sprintf("%.1fLife Expectancy", life_exp())), ""),#
      div(class="stat", style="border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%Life Completed", pct)), ""),#
      div(class="stat", style="border-left:4px solid #9b59b6",#
          strong(paste0(sum(d$lived), input$granularity, " Lived")), "")#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x=col, y=-row)) +#
      geom_tile(aes(fill=lived), width=0.85, height=0.85, color="white", size=0.3) +#
      geom_tile(data=d[d$today,], fill="#e74c3c", width=0.85, height=0.85, color="white", size=0.8) +#
      scale_fill_manual(values=c("TRUE"="#3498db","FALSE"="#ecf0f1"), guide="none") +#
      theme_void() +#
      theme(plot.background=element_rect(fill="transparent", color=NA),#
            panel.background=element_rect(fill="transparent", color=NA))#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country,]#
  if (sex == "Male") return(row$male)#
  if (sex == "Female") return(row$female)#
  row$total#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18); n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12); n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .stats-row { display:flex; justify-content:space-around; margin:15px 0 }#
      .stat { background:#fff; padding:12px 16px; border-radius:8px; text-align:center; min-width:140px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
      .stat strong { display:block; font-family:'Inter',sans-serif; font-size:1.3rem; font-weight:600 }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male","Female","Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      # Stats row#
      div(class = "stats-row", uiOutput("horizontal_stats")),#
      # Legend#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      # Grid#
      div(class = "grid", plotOutput("grid_plot", height = "420px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units = "days")) / 365.25)#
  df <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df()#
    pct <- mean(d$lived) * 100#
    months_lived <- if (input$granularity == "Months") sum(d$lived) else NA#
    weeks_lived  <- if (input$granularity == "Weeks") sum(d$lived) else NA#
    unit_lived   <- if (input$granularity == "Months") paste0(months_lived, "Months Lived") else paste0(weeks_lived, "Weeks Lived")#
    tagList(#
      div(class = "stat", style = "border-left:4px solid #3498db",#
          strong(sprintf("%.1fYears Lived", age())), ""),#
      div(class = "stat", style = "border-left:4px solid #2ecc71",#
          strong(sprintf("%.1fLife Expectancy", life_exp())), ""),#
      div(class = "stat", style = "border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%Life Completed", pct)), ""),#
      div(class = "stat", style = "border-left:4px solid #9b59b6",#
          strong(unit_lived), "")#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male    = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female  = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total   = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male")   return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags<link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags<style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .stats-row { display:flex; justify-content:space-around; margin:15px 0 }#
      .stat { background:#fff; padding:12px 16px; border-radius:8px; text-align:center; min-width:140px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
      .stat strong { display:block; font-family:'Inter',sans-serif; font-size:1.3rem; font-weight:600 }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male","Female","Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      uiOutput("horizontal_stats"),#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "420px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age      <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units = "days")) / 365.25)#
  df       <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df()#
    pct <- mean(d$lived) * 100#
    months_lived <- if (input$granularity=="Months") sum(d$lived) else NA#
    weeks_lived  <- if (input$granularity=="Weeks")  sum(d$lived) else NA#
    unit_lived   <- if (input$granularity=="Months")#
                      paste0(months_lived," Months Lived")#
                    else#
                      paste0(weeks_lived," Weeks Lived")#
    tags$div(class = "stats-row",#
      div(class = "stat", style = "border-left:4px solid #3498db",#
          strong(sprintf("%.1f Years Lived", age()))),#
      div(class = "stat", style = "border-left:4px solid #2ecc71",#
          strong(sprintf("%.1f Life Expectancy", life_exp()))),#
      div(class = "stat", style = "border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%% Life Completed", pct))),#
      div(class = "stat", style = "border-left:4px solid #9b59b6",#
          strong(unit_lived))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.85, color = "white", size = 0.3) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.85, height = 0.85, color = "white", size = 0.8) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male    = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female  = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total   = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male")   return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      /* Stats row styling */#
      .stats-row { #
        display:flex; #
        justify-content:space-evenly; #
        margin:20px 0; #
        gap:15px; #
      }#
      .stat {#
        background:#fff; #
        padding:16px 20px; #
        border-radius:12px; #
        text-align:center; #
        min-width:160px; #
        box-shadow:0 4px 12px rgba(0,0,0,0.1);#
        transition: transform 0.2s;#
      }#
      .stat:hover { transform: translateY(-2px); }#
      .stat strong {#
        display:block; #
        font-family:'Inter',sans-serif; #
        font-size:1.5rem; #
        font-weight:600;#
        color:#2c3e50;#
      }#
      .stat .label {#
        font-size:0.9rem; #
        color:#7f8c8d; #
        margin-top:4px;#
      }#
      /* Legend */#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      /* Grid styling */#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male","Female","Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      uiOutput("horizontal_stats"),#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age      <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units = "days")) / 365.25)#
  df       <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df()#
    pct <- mean(d$lived) * 100#
    months_lived <- if (input$granularity=="Months") sum(d$lived) else NA#
    weeks_lived  <- if (input$granularity=="Weeks")  sum(d$lived) else NA#
    unit_lived   <- if (input$granularity=="Months")#
                      paste0(months_lived," Months Lived")#
                    else#
                      paste0(weeks_lived," Weeks Lived")#
    tags$div(class = "stats-row",#
      div(class = "stat", style = "border-left:4px solid #3498db",#
          strong(sprintf("%.1f", age())), span("Years Lived", class="label")),#
      div(class = "stat", style = "border-left:4px solid #2ecc71",#
          strong(sprintf("%.1f", life_exp())), span("Life Expectancy", class="label")),#
      div(class = "stat", style = "border-left:4px solid #e67e22",#
          strong(sprintf("%.0f%%", pct)), span("Life Completed", class="label")),#
      div(class = "stat", style = "border-left:4px solid #9b59b6",#
          strong(unit_lived), span("", class="label"))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male    = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female  = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total   = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex) {#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male")   return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      /* Compact pastel stats */#
      .stats-row {#
        display:flex;#
        justify-content:space-around;#
        margin:15px 0;#
        gap:10px;#
      }#
      .stat {#
        background:#dfe7fd;    /* pastel blue */#
        padding:8px 12px;#
        border-radius:6px;#
        text-align:center;#
        min-width:120px;#
        box-shadow:none;#
      }#
      .stat:nth-child(2) { background:#d4f5e9 }  /* pastel green */#
      .stat:nth-child(3) { background:#fde8d8 }  /* pastel orange */#
      .stat:nth-child(4) { background:#f3d4fa }  /* pastel purple */#
      .stat strong {#
        display:block;#
        font-family:'Inter',sans-serif;#
        font-size:1.2rem;#
        font-weight:600;#
        color:#2c3e50;#
      }#
      .stat .label {#
        font-size:0.8rem;#
        color:#5a5a5a;#
        margin-top:2px;#
      }#
      /* Legend */#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      /* Grid styling */#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male","Female","Total"), selected = "Total"),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      uiOutput("horizontal_stats"),#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive(get_life_expectancy(input$country, input$sex))#
  age      <- reactive(as.numeric(difftime(Sys.Date(), input$dob, units = "days")) / 365.25)#
  df       <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$horizontal_stats <- renderUI({#
    d <- df()#
    pct <- mean(d$lived) * 100#
    months_lived <- if (input$granularity == "Months") sum(d$lived) else NA#
    weeks_lived  <- if (input$granularity == "Weeks")  sum(d$lived) else NA#
    unit_lived   <- if (input$granularity == "Months")#
                      paste0(months_lived, " Months Lived")#
                    else#
                      paste0(weeks_lived, " Weeks Lived")#
    tags$div(class = "stats-row",#
      div(class = "stat",#
          strong(sprintf("%.1f", age())), span("Years Lived", class = "label")),#
      div(class = "stat",#
          strong(sprintf("%.1f", life_exp())), span("Life Expectancy", class = "label")),#
      div(class = "stat",#
          strong(sprintf("%.0f%%", pct)), span("Life Completed", class = "label")),#
      div(class = "stat",#
          strong(unit_lived), span("", class = "label"))#
    )#
  })#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Life expectancy data#
life_expectancy_data <- data.frame(#
  country = c("Malaysia","Singapore","Japan","South Korea","United States",#
              "United Kingdom","Australia","Canada","Germany","France"),#
  male    = c(74.1,81.2,81.6,79.8,76.3,79.4,81.2,80.9,78.9,79.8),#
  female  = c(78.2,85.8,87.6,85.7,81.2,82.9,85.4,84.7,83.6,85.6),#
  total   = c(76.2,83.5,84.6,82.8,78.8,81.2,83.3,82.8,81.3,82.7)#
)#
#
get_life_expectancy <- function(country, sex, custom) {#
  if (!is.null(custom) && !is.na(custom) && custom > 0) {#
    return(custom)#
  }#
  row <- life_expectancy_data[life_expectancy_data$country == country, ]#
  if (sex == "Male")   return(row$male)#
  if (sex == "Female") return(row$female)#
  return(row$total)#
}#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      selectInput("country", "Country", choices = sort(life_expectancy_data$country), selected = "Malaysia"),#
      radioButtons("sex", "Gender", choices = c("Male","Female","Total"), selected = "Total"),#
      numericInput("custom_le", "Custom Life Expectancy (years)", value = NA, min = 0, step = 0.1),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  life_exp <- reactive({#
    get_life_expectancy(input$country, input$sex, input$custom_le)#
  })#
  df <- reactive(make_boxes_data(input$dob, life_exp(), input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .stats-global {#
        display:flex;#
        justify-content:space-around;#
        margin:20px 0;#
      }#
      .global-box {#
        background:#fff;#
        padding:12px 16px;#
        border-radius:8px;#
        text-align:center;#
        min-width:140px;#
        box-shadow:0 2px 8px rgba(0,0,0,0.08);#
      }#
      .global-box strong {#
        display:block;#
        font-family:'Inter',sans-serif;#
        font-size:1.4rem;#
        font-weight:600;#
        color:#2c3e50;#
      }#
      .global-box .label {#
        font-size:1rem;#
        color:#7f8c8d;#
        margin-top:4px;#
      }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
      sliderInput("life_exp", "Life Expectancy (years)",#
                  min = 50, max = 100, value = 73.4, step = 0.1),#
      radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
    ),#
    mainPanel(width = 9,#
      # Worldwide stats#
      div(class = "stats-global",#
        div(class = "global-box",#
            strong("70.8"), span("Global Male LE", class = "label")),#
        div(class = "global-box",#
            strong("76.0"), span("Global Female LE", class = "label")),#
        div(class = "global-box",#
            strong("73.4"), span("Overall Global LE", class = "label"))#
      ),#
      # Legend#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      # Grid#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin-bottom:10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 30px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 10px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 20px;#
        margin: 30px 0 10px;  /* increased top margin */#
      }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { #
        background:#fff; #
        padding:8px;        /* reduce padding */#
        border-radius:12px; #
        box-shadow:0 4px 12px rgba(0,0,0,0.1);#
      }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.98, height = 0.98, color = "white", size = 0.2) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.98, height = 0.98, color = "white", size = 0.4) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      coord_fixed(expand = FALSE) +#
      theme_void() +#
      theme(#
        plot.margin = margin(10, 10, 10, 10),#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend {#
        display: flex;#
        justify-content: center;#
        gap: 20px;#
        margin: 30px 0 10px;#
      }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { #
        background:#fff; #
        padding:12px;#
        border-radius:12px; #
        box-shadow:0 4px 12px rgba(0,0,0,0.1);#
      }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "500px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.85, height = 0.6, color = "#ffffff", size = 0.5) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.85, height = 0.6, color = "#ffffff", size = 0.8) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(5, 5, 5, 5)#
      ) +#
      coord_fixed(ratio = 1.4)  # Make rectangles wider than tall#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52 # many columns for a true rectangle#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 24 # more columns for a wide rectangular grid#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1); }#
    "))#
  ),#
  # Header#
  div(class = "header", h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "600px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.92, height = 0.52, color = "#ffffff", size = 0.25) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.92, height = 0.52, color = "#ffffff", size = 0.27) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      coord_fixed(ratio = 1.7, expand = FALSE) +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(5, 5, 5, 5)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity, n_cols) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet", href = #
      "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:0; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.03); height:90vh; width:90vw; margin:0 auto;}#
    "))#
  ),#
  div(class = "header", h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months"),#
          numericInput("n_cols", "Grid Columns", value = 30, min = 5, max = 100)#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#5181b8"), span("Lived"),#
          div(class = "legend-box", style = "background:#e9ecef; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "90vh", width = "90vw"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity, input$n_cols))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.99, height = 0.99, color = "#f8f9fa", size = 0.08) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.99, height = 0.99, color = "#f8f9fa", size = 0.13) +#
      scale_fill_manual(values = c("TRUE" = "#5181b8", "FALSE" = "#e9ecef"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(0, 0, 0, 0)#
      ) +#
      coord_fixed(ratio = 1)#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity, n_cols) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet", href = #
      "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:0; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.03); margin:0 auto; }#
    "))#
  ),#
  div(class = "header", h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months"),#
          numericInput("n_cols", "Grid Columns", value = 45, min = 20, max = 80)#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#5181b8"), span("Lived"),#
          div(class = "legend-box", style = "background:#e9ecef; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "420px", width = "98%"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity, input$n_cols))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.88, height = 0.78, color = "#f8f9fa", size = 0.15) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.88, height = 0.78, color = "#f8f9fa", size = 0.21) +#
      scale_fill_manual(values = c("TRUE" = "#5181b8", "FALSE" = "#e9ecef"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(8, 8, 8, 8)#
      ) +#
      coord_fixed(ratio = 1.45)#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
# Adjusts number of columns based on grid (window) width and aspect ratio for true rectangle#
auto_n_cols <- function(granularity, expected_age, grid_width = 1200, box_size = 22) {#
  # Estimate column count for "rectangular" shape and fit into grid_width (pixels)#
  total_units <- if (granularity == "Weeks") ceiling(expected_age * 52.18) else ceiling(expected_age * 12)#
  max_cols <- floor(grid_width / box_size * 0.95)#
  if (granularity == "Weeks") {#
    n_cols <- min(max_cols, max(35, ceiling(sqrt(total_units*1.5))))#
  } else {#
    n_cols <- min(max_cols, max(30, ceiling(sqrt(total_units*1.5))))#
  }#
  n_cols#
}#
#
make_boxes_data <- function(dob, expected_age, granularity, grid_width = 1200, box_size = 22) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  total_units <- if (granularity == "Weeks") ceiling(expected_age * 52.18) else ceiling(expected_age * 12)#
  n_cols <- auto_n_cols(granularity, expected_age, grid_width, box_size)#
  dates <- if (granularity == "Weeks") seq.Date(start_date, by = "week", length.out = total_units)#
    else seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet", href =#
      "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:0; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.03); margin:0 auto; width:96vw; height:68vh; min-height:350px; max-height:700px;}#
    "))#
  ),#
  div(class = "header", h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#5181b8"), span("Lived"),#
          div(class = "legend-box", style = "background:#e9ecef; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "68vh", width = "96vw"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  output$grid_plot <- renderPlot({#
    grid_width_px <- 1200 # approximate width for laptop, you can auto-detect in JS for perfection#
    box_size_px <- 22#
    df <- make_boxes_data(input$dob, input$life_exp, input$granularity, grid_width_px, box_size_px)#
    ggplot(df, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.82, height = 0.82, color = "#f8f9fa", size = 0.04) +#
      geom_tile(data = df[df$today, ], fill = "#e74c3c", width = 0.82, height = 0.82, color = "#f8f9fa", size = 0.08) +#
      scale_fill_manual(values = c("TRUE" = "#5181b8", "FALSE" = "#e9ecef"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(10, 10, 10, 10)#
      ) +#
      coord_fixed(ratio = 1.2)#
  })#
}#
#
shinyApp(ui, server)
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity, n_cols) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet", href = #
      "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:0; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.03); margin:0 auto; }#
    "))#
  ),#
  div(class = "header", h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months"),#
          numericInput("n_cols", "Grid Columns", value = 45, min = 20, max = 80)#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#5181b8"), span("Lived"),#
          div(class = "legend-box", style = "background:#e9ecef; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "420px", width = "98%"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity, input$n_cols))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.88, height = 0.78, color = "#f8f9fa", size = 0.15) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.88, height = 0.78, color = "#f8f9fa", size = 0.21) +#
      scale_fill_manual(values = c("TRUE" = "#5181b8", "FALSE" = "#e9ecef"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(8, 8, 8, 8)#
      ) +#
      coord_fixed(ratio = 1.45)#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity, n_cols) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet", href =#
      "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px; }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display: flex; justify-content: center; gap: 20px; margin: 30px 0 10px; }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:0; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.03); margin:0 auto; }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)", min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months"),#
          numericInput("n_cols", "Grid Columns", value = 60, min = 20, max = 100)#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#2a72b8"), span("Lived"),#
          div(class = "legend-box", style = "background:#f0f2f5; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#c0392b"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "450px", width = "100%"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(#
    input$dob, input$life_exp, input$granularity, input$n_cols#
  ))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived),#
                width = 0.85, height = 0.65,#
                color = "#f8f9fa", size = 0.2) +#
      geom_tile(data = d[d$today, ],#
                fill = "#c0392b",#
                width = 0.85, height = 0.65,#
                color = "#f8f9fa", size = 0.4) +#
      scale_fill_manual(values = c("TRUE" = "#2a72b8", "FALSE" = "#f0f2f5"),#
                        guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA),#
        plot.margin = margin(5, 5, 5, 5)#
      ) +#
      coord_fixed(ratio = 1.3)  # Wider rectangles#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 24   # double the standard months for a wider rectangle#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  df#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact {#
        background:#fff; padding:10px; border-radius:8px;#
        box-shadow:0 2px 8px rgba(0,0,0,0.08); margin-top:20px;#
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin:18px 0 10px }#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth",#
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode",#
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#2c3e50"), span("Lived"),#
          div(class = "legend-box", style = "background:#dfe6e9; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid",#
          plotOutput("grid_plot", height = "480px")#
      )#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived),#
                width = 0.95, height = 0.55,#
                color = "#f8f9fa", size = 0.3) +#
      geom_tile(data = d[d$today, ],#
                fill = "#e74c3c",#
                width = 0.95, height = 0.55,#
                color = "#f8f9fa", size = 0.6) +#
      scale_fill_manual(values = c("TRUE" = "#2c3e50", "FALSE" = "#dfe6e9"),#
                        guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      ) +#
      coord_fixed(ratio = 1.75)  # keep rectangles wide#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 1.5, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 3, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 3, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.4, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.4, height = 0.9, color = "white", size = 0.4) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.6) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.2) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#1F3B4D", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week",  length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"), by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates, lived = dates <= today)#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = lived), width = 0.9, height = 0.9, color = "white", size = 0.2) +#
      geom_tile(data = d[d$today, ], fill = "#e74c3c", width = 0.9, height = 0.9, color = "white", size = 1) +#
      scale_fill_manual(values = c("TRUE" = "#3498db", "FALSE" = "#ecf0f1"), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    dates <- seq.Date(floor_date(start_date, "month"),#
                      by = "month", length.out = total_units)#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  # mark the "current" box#
  df$today <- FALSE#
  if (granularity == "Weeks") {#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    if (wi > 0 && wi <= nrow(df)) df$today[wi] <- TRUE#
  } else {#
    mi <- interval(start_date, today) %/% months(1) + 1#
    if (mi > 0 && mi <= nrow(df)) df$today[mi] <- TRUE#
  }#
  # classify each box as one of three exclusive states#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  # Header#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = status),#
                width = 0.9, height = 0.9,#
                color = "white", size = 0.2) +#
      scale_fill_manual(values = c(#
        "lived"   = "#3498db",#
        "future"  = "#ecf0f1",#
        "current" = "#e74c3c"#
      ), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
# app.R#
library(shiny)#
library(lubridate)#
library(ggplot2)#
library(scales)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
    # Current week index#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    current_idx <- if (wi > 0 && wi <= total_units) wi else NA#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    # Use floor_date consistently for sequence and index#
    month_start <- floor_date(start_date, "month")#
    dates <- seq.Date(month_start, by = "month", length.out = total_units)#
    # Current month index#
    current_month_floor <- floor_date(today, "month")#
    mi <- interval(month_start, current_month_floor) %/% months(1) + 1#
    current_idx <- if (mi > 0 && mi <= total_units) mi else NA#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  df$today <- FALSE#
  if (!is.na(current_idx)) {#
    df$today[current_idx] <- TRUE#
  }#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    ggplot(d, aes(x = col, y = -row)) +#
      geom_tile(aes(fill = status),#
                width = 0.9, height = 0.9,#
                color = "white", size = 0.2) +#
      scale_fill_manual(values = c(#
        "lived"   = "#3498db",#
        "future"  = "#ecf0f1",#
        "current" = "#e74c3c"#
      ), guide = "none") +#
      theme_void() +#
      theme(#
        plot.background  = element_rect(fill = "transparent", color = NA),#
        panel.background = element_rect(fill = "transparent", color = NA)#
      )#
  })#
}#
#
shinyApp(ui, server)
library(shinylive)
library(httpuv)
cd ~Downloads
cd ~/Downloads
cd("~/Downloads")
cd("~/Downloads")
setdir("~/Downloads")
setdr("~/Downloads")
chgdir("~/Downloads")
setwd("~/Downloads")
export_app("memento-mori.R", "docs")
library(shinylive)
export_app("memento-mori.R", "docs")
library(httpuv)
export_app("memento-mori.R", "docs")
shinylive::export(appdir = "memento-mori", destdir = "docs")
shinylive::export(appdir = "~/Downloads", destdir = "docs")
shinylive::export(appdir = "memento-mori.R", destdir = "docs")
setwd(/Users/junho/Documents/GitHub/junhochai.github.io/memento-mori)
setwd(~/Users/junho/Documents/GitHub/junhochai.github.io/memento-mori)
setwd("~/Users/junho/Documents/GitHub/junhochai.github.io/memento-mori")
setwd("/Users/junho/Documents/GitHub/junhochai.github.io/memento-mori")
shinylive::export(appdir = "."", destdir = "docs")
shinylive::export(appdir = ".", destdir = "docs")
shinylive::export(appdir = ".", destdir = "docs")
httpuv::runStaticServer(".", port=8008)
getwd()
httpuv::runStaticServer("./shinylive", port=8008)
httpuv::runStaticServer("./", port=8008)
httpuv::runStaticServer("/", port=8008)
httpuv::runStaticServer("shinylive/", port=8008)
httpuv::runStaticServer("shinylive/", port=8008)shinylive::export(appdir = "myapp", destdir = "docs")
shinylive::export(appdir = "./", destdir = "./")
# app.R#
library(shiny)#
library(lubridate)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
    # Current week index#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    current_idx <- if (wi > 0 && wi <= total_units) wi else NA#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    month_start <- floor_date(start_date, "month")#
    dates <- seq.Date(month_start, by = "month", length.out = total_units)#
    current_month_floor <- floor_date(today, "month")#
    mi <- interval(month_start, current_month_floor) %/% months(1) + 1#
    current_idx <- if (mi > 0 && mi <= total_units) mi else NA#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  df$today <- FALSE#
  if (!is.na(current_idx)) {#
    df$today[current_idx] <- TRUE#
  }#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    par(mar = c(0, 0, 0, 0))#
    plot(NA, xlim = c(0, max(d$col) + 1), ylim = c(-max(d$row) - 1, 0),#
         xaxs = "i", yaxs = "i", axes = FALSE, xlab = "", ylab = "")#
    colors <- ifelse(d$status == "lived", "#3498db",#
              ifelse(d$status == "current", "#e74c3c", "#ecf0f1"))#
    rect(d$col - 0.45, -d$row - 0.45, d$col + 0.45, -d$row + 0.45,#
         col = colors, border = "white", lwd = 0.5)#
  })#
}#
#
shinyApp(ui, server)
shinylive::export(appdir = "./", destdir = "./")
install.packages("cpp11", repos = "http://repo.r-wasm.org/bin/emscripten/contrib/4.4.1/")
# app.R#
library(shiny)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
    # Current week index#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    current_idx <- if (wi > 0 && wi <= total_units) wi else NA#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    # Start from the first day of the birth month#
    month_start <- as.Date(format(start_date, "%Y-%m-01"))#
    dates <- seq.Date(month_start, by = "month", length.out = total_units)#
    # Calculate month index difference#
    year_diff <- as.integer(format(today, "%Y")) - as.integer(format(month_start, "%Y"))#
    month_diff <- as.integer(format(today, "%m")) - as.integer(format(month_start, "%m"))#
    mi <- year_diff * 12 + month_diff + 1#
    current_idx <- if (mi > 0 && mi <= total_units) mi else NA#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  df$today <- FALSE#
  if (!is.na(current_idx)) {#
    df$today[current_idx] <- TRUE#
  }#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    par(mar = c(0, 0, 0, 0))#
    plot(NA, xlim = c(0, max(d$col) + 1), ylim = c(-max(d$row) - 1, 0),#
         xaxs = "i", yaxs = "i", axes = FALSE, xlab = "", ylab = "")#
    colors <- ifelse(d$status == "lived", "#3498db",#
              ifelse(d$status == "current", "#e74c3c", "#ecf0f1"))#
    rect(d$col - 0.45, -d$row - 0.45, d$col + 0.45, -d$row + 0.45,#
         col = colors, border = "white", lwd = 0.5)#
  })#
}#
#
shinyApp(ui, server)
shinylive::export(appdir = "./", destdir = "./")
httpuv::runStaticServer("./")
httpuv::runStaticServer("/", port=8008)
httpuv::runStaticServer("./", port=8008)
# app.R#
library(shiny)#
library(lubridate)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
    # Current week index#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    current_idx <- if (wi > 0 && wi <= total_units) wi else NA#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    month_start <- floor_date(start_date, "month")#
    dates <- seq.Date(month_start, by = "month", length.out = total_units)#
    current_month_floor <- floor_date(today, "month")#
    mi <- interval(month_start, current_month_floor) %/% months(1) + 1#
    current_idx <- if (mi > 0 && mi <= total_units) mi else NA#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  df$today <- FALSE#
  if (!is.na(current_idx)) {#
    df$today[current_idx] <- TRUE#
  }#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    par(mar = c(0, 0, 0, 0))#
    plot(NA, xlim = c(0, max(d$col) + 1), ylim = c(-max(d$row) - 1, 0),#
         xaxs = "i", yaxs = "i", axes = FALSE, xlab = "", ylab = "")#
    colors <- ifelse(d$status == "lived", "#3498db",#
              ifelse(d$status == "current", "#e74c3c", "#ecf0f1"))#
    rect(d$col - 0.45, -d$row - 0.45, d$col + 0.45, -d$row + 0.45,#
         col = colors, border = "white", lwd = 0.5)#
  })#
}#
#
shinyApp(ui, server)
# app.R#
library(shiny)#
#
make_boxes_data <- function(dob, expected_age, granularity) {#
  start_date <- as.Date(dob)#
  today <- Sys.Date()#
  if (granularity == "Weeks") {#
    total_units <- ceiling(expected_age * 52.18)#
    n_cols <- 52#
    dates <- seq.Date(start_date, by = "week", length.out = total_units)#
    # Current week index#
    wi <- floor(as.numeric(difftime(today, start_date, units = "weeks"))) + 1#
    current_idx <- if (wi > 0 && wi <= total_units) wi else NA#
  } else {#
    total_units <- ceiling(expected_age * 12)#
    n_cols <- 12#
    # Start from the first day of the birth month#
    month_start <- as.Date(format(start_date, "%Y-%m-01"))#
    dates <- seq.Date(month_start, by = "month", length.out = total_units)#
    # Calculate month index difference#
    year_diff <- as.integer(format(today, "%Y")) - as.integer(format(month_start, "%Y"))#
    month_diff <- as.integer(format(today, "%m")) - as.integer(format(month_start, "%m"))#
    mi <- year_diff * 12 + month_diff + 1#
    current_idx <- if (mi > 0 && mi <= total_units) mi else NA#
  }#
  df <- data.frame(date = dates)#
  df$lived <- df$date <= today#
  df$today <- FALSE#
  if (!is.na(current_idx)) {#
    df$today[current_idx] <- TRUE#
  }#
  df$status <- ifelse(df$today, "current",#
                      ifelse(df$lived, "lived", "future"))#
  df$status <- factor(df$status, levels = c("lived", "future", "current"))#
  df$idx <- seq_len(nrow(df))#
  df$row <- floor((df$idx - 1) / n_cols) + 1#
  df$col <- ((df$idx - 1) %% n_cols) + 1#
  return(df)#
}#
#
ui <- fluidPage(#
  tags$head(#
    tags$link(rel = "stylesheet",#
              href = "https://fonts.googleapis.com/css2?family=Inter:wght@300;600&family=Work+Sans:wght@400;600&display=swap"),#
    tags$style(HTML("#
      body { font-family:'Work Sans',sans-serif; background:#f8f9fa; margin:0; padding:0 }#
      .header { background:#e9ecef; padding:30px 20px; display:flex; align-items:center; gap:40px }#
      .header h1 { font-family:'Inter',sans-serif; font-size:3.5rem; font-weight:300; margin:0 }#
      .header p { font-size:1.8rem; line-height:1.4; margin:0 }#
      .sidebar-section { margin-bottom:20px }#
      .stats-global-compact { #
        background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.08);#
        margin-top:20px; #
      }#
      .stats-global-compact div { margin:6px 0; font-family:'Inter',sans-serif; color:#2c3e50 }#
      .stats-global-compact .value { font-weight:600; font-size:1.2rem }#
      .stats-global-compact .label { font-size:0.9rem; color:#7f8c8d; margin-left:6px }#
      .legend { display:flex; justify-content:center; gap:20px; margin: 18px 0 10px}#
      .legend-box { width:14px; height:14px; border-radius:3px; border:1px solid #ccc }#
      .grid { background:#fff; padding:12px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1) }#
    "))#
  ),#
#
  div(class = "header",#
      h1("Memento Mori"),#
      div(#
        p("I make time tangible. It reminds us how silently life slips away."),#
        p("It calls us to pause, reflect, and question our very existence—beyond survival, toward meaning.")#
      )#
  ),#
#
  sidebarLayout(#
    sidebarPanel(width = 3,#
      div(class = "sidebar-section",#
          dateInput("dob", "Date of Birth", #
                    value = as.Date("1990-01-01"), max = Sys.Date()),#
          sliderInput("life_exp", "Life Expectancy (years)",#
                      min = 50, max = 100, value = 73.4, step = 0.1),#
          radioButtons("granularity", "View Mode", #
                       choices = c("Weeks","Months"), selected = "Months")#
      ),#
      div(class = "stats-global-compact",#
          div(span("70.8", class = "value"), span("Global Male LE", class = "label")),#
          div(span("76.0", class = "value"), span("Global Female LE", class = "label")),#
          div(span("73.4", class = "value"), span("Overall Global LE", class = "label"))#
      )#
    ),#
#
    mainPanel(width = 9,#
      div(class = "legend",#
          div(class = "legend-box", style = "background:#3498db"), span("Lived"),#
          div(class = "legend-box", style = "background:#ecf0f1; border:1px solid #ccc"), span("Future"),#
          div(class = "legend-box", style = "background:#e74c3c"), span("Current")#
      ),#
      div(class = "grid", plotOutput("grid_plot", height = "480px"))#
    )#
  )#
)#
#
server <- function(input, output, session) {#
  df <- reactive(make_boxes_data(input$dob, input$life_exp, input$granularity))#
#
  output$grid_plot <- renderPlot({#
    d <- df()#
    par(mar = c(0, 0, 0, 0))#
    plot(NA, xlim = c(0, max(d$col) + 1), ylim = c(-max(d$row) - 1, 0),#
         xaxs = "i", yaxs = "i", axes = FALSE, xlab = "", ylab = "")#
    colors <- ifelse(d$status == "lived", "#3498db",#
              ifelse(d$status == "current", "#e74c3c", "#ecf0f1"))#
    rect(d$col - 0.45, -d$row - 0.45, d$col + 0.45, -d$row + 0.45,#
         col = colors, border = "white", lwd = 0.5)#
  })#
}#
#
shinyApp(ui, server)
shiny::runApp("app.R")
# Create a minimal test app first#
minimal_app <- '#
library(shiny)#
ui <- fluidPage(h1("Test App"))#
server <- function(input, output) {}#
shinyApp(ui, server)#
'#
#
# Write to a test file#
writeLines(minimal_app, "test_app.R")#
#
# Try exporting the minimal app#
shinylive::export("test_app.R", "test_export")
# Create a minimal test app first#
minimal_app <- '#
library(shiny)#
ui <- fluidPage(h1("Test App"))#
server <- function(input, output) {}#
shinyApp(ui, server)#
'#
#
# Write to a test file#
writeLines(minimal_app, "test_app.R")#
#
# Try exporting the minimal app#
shinylive::export("test_app.R", "test_export")
# Try exporting the minimal app#
shinylive::export("", "test_export")
# Try exporting the minimal app#
shinylive::export("./", "test_export")
httpuv::runStaticServer("test_export")
# Try exporting the minimal app#
shinylive::export("./", "./")
httpuv::runStaticServer("./")
# Try exporting the minimal app#
shinylive::export("./", "./")
httpuv::runStaticServer("./")
shinylive::export(#
  appdir = ".",  # current directory containing app.R#
  destdir = "shinylive_output",#
  verbose = TRUE#
)
shinylive::export(#
  appdir = ".",  # current directory containing app.R#
  destdir = "shinylive_output",#
  verbose = TRUE#
)
httpuv::runStaticServer("./")
httpuv::runStaticServer("./")
